<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/28/2019 9:55:29 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="LMISE190"
  DTS:CreatorName="MSKCC\WangA"
  DTS:DTSID="{DC1FF1E4-1097-4EE3-BDAF-93BB81F7CF1C}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="1033"
  DTS:ObjectName="SSIS_GETCTEs"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="241"
  DTS:VersionGUID="{767971C4-E31F-403B-B541-3DD012E9C684}"
  DTS:VersionMinor="1">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{3B45F8B9-DB8E-4026-A831-03E4C0EBD40D}"
      DTS:ObjectName="CONN_OLEDB_DVDDB01">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=DVDDB01;User ID=wanga;Provider=IBMOLEDB.DB2DSDV11;Persist Security Info=True;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="C:\TFS_EDG\SQLCTEsAnalysis\SQLCTEsAnalysis\SSIS_GETCTEs.dtsConfig"
      DTS:ConfigurationType="1"
      DTS:CreationName=""
      DTS:DTSID="{275176AF-2C20-446E-BDBF-B311C062EBA1}"
      DTS:ObjectName="Configuration 1" />
  </DTS:Configurations>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DEC94AFD-DCE2-4B7B-B1BA-606E1E8EA212}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="bDFT_DSGTools_QUERY_CTE_SQL_RAW">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{70F0E752-B404-4DBF-93C3-321239158A5C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="icnt">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1C7900B6-8263-4CEA-85DD-8AC3FFB2B59B}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="iDFT_DSGTools_QUERY_CTE_SQL_RAW">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F6B13569-33B2-4C7E-8AF8-DBCE4BD30F23}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="idx">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{00198E8A-9DC7-4CFA-AA8B-4E87DAD599DC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EB8EC72C-73B4-4480-8AE9-F81EC43B1AB5}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSQLContent">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E03161F7-8396-41B5-A081-DCABADADFCEE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSQLPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Projects\SSIS\SQLCTEsAnalysis\SQLCTEsAnalysis\testCTE.sql</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="2" />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\EST_QUERY_FACT_SQL_RAW_CTE_UPDATE"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{92e17771-c959-455d-864c-51bb444d090b}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="EST_QUERY_FACT_SQL_RAW_CTE_UPDATE"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; Â© 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{3B45F8B9-DB8E-4026-A831-03E4C0EBD40D}"
          SQLTask:SqlStatementSource="call DSGTOOLS.QUERY_FACT_SQL_RAW_CTE_UPDATE()" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:Disabled="True"
      DTS:DTSID="{A34ABDF8-1179-4206-ABE4-46FBA75EE21F}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="SQC_DSGTools_QUERY_CTE_SQL_OUTPUT">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:DelayValidation="True"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{390E54A4-7844-481C-9F56-920204D00019}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">"DSGTOOLS"."QUERY_STAGING_CTE_SQL_OUTPUT"</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      connectionManagerRefId="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Inputs[OLE DB Destination Input].Columns[QCSO_QCSR_ID]"
                          cachedDataType="i4"
                          cachedName="QCSO_QCSR_ID"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Inputs[OLE DB Destination Input].ExternalColumns[STG_QCSR_ID]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Outputs[Output 1].Columns[QCSO_QCSR_ID]" />
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Inputs[OLE DB Destination Input].Columns[QCSO_Name]"
                          cachedDataType="wstr"
                          cachedLength="128"
                          cachedName="QCSO_Name"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Inputs[OLE DB Destination Input].ExternalColumns[STG_NAME]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Outputs[Output 1].Columns[QCSO_Name]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Inputs[OLE DB Destination Input].ExternalColumns[STG_QCSR_ID]"
                          dataType="i4"
                          name="STG_QCSR_ID" />
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Inputs[OLE DB Destination Input].ExternalColumns[STG_NAME]"
                          dataType="wstr"
                          length="255"
                          name="STG_NAME" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="SC_GetCTEColumns"
                  version="9">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="51">
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[columnTableStmt.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace gudusoft.gsqlparser.demos.gettablecolumns
{

    using System.IO;
    using EDbVendor = gudusoft.gsqlparser.EDbVendor;
    using TCustomSqlStatement = gudusoft.gsqlparser.TCustomSqlStatement;
    using TGSqlParser = gudusoft.gsqlparser.TGSqlParser;
    using TObjectName = gudusoft.gsqlparser.nodes.TObjectName;
    using TTable = gudusoft.gsqlparser.nodes.TTable;



    public class columnTableStmt
	{

		public static void doIt(String sqlFilename)
		{

            EDbVendor dbVendor = EDbVendor.dbvmssql;
			Console.WriteLine("Selected SQL dialect: " + dbVendor.ToString());


			TGSqlParser sqlparser = new TGSqlParser(dbVendor);
			sqlparser.sqlfilename = sqlFilename;

			int ret = sqlparser.parse();
			if (ret == 0)
			{
				for (int i = 0;i < sqlparser.sqlstatements.size();i++)
				{
					iterateStmt(sqlparser.sqlstatements.get(i));
				}
			}
			else
			{
				Console.WriteLine(sqlparser.Errormessage);
			}
		}

		protected internal static void iterateStmt(TCustomSqlStatement stmt)
		{
		   // System.out.println(stmt.sqlstatementtype.toString());

			for (int i = 0;i < stmt.tables.size();i++)
			{
				TTable table = stmt.tables.getTable(i);
				string table_name = table.Name;
				Console.WriteLine("Analyzing: " + table_name + " <- " + stmt.sqlstatementtype);
				for (int j = 0; j < table.LinkedColumns.size(); j++)
				{
				  TObjectName objectName = table.LinkedColumns.getObjectName(j);
				  string column_name = table_name + "." + objectName.ColumnNameOnly.ToLower();
				  if (!objectName.TableDetermined)
				  {
					 column_name = "?." + objectName.ColumnNameOnly.ToLower();
				  }
				  Console.WriteLine("Analyzing: " + column_name + " in " + stmt.sqlstatementtype + " " + objectName.Location);
				}
			}

			for (int i = 0;i < stmt.Statements.size();i++)
			{
			   iterateStmt(stmt.Statements.get(i));
			}

		}


	}

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[common.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace gudusoft.gsqlparser.demos.util
{
    using gudusoft.gsqlparser;
    using EDbVendor = gudusoft.gsqlparser.EDbVendor;
    public class Common
    {
        public static EDbVendor GetEDbVendor(string[] args)
        {
            EDbVendor dbVendor = EDbVendor.dbvoracle;
            return GetEDbVendor(args, dbVendor);
        }

        internal static EDbVendor GetEDbVendor(string[] args, EDbVendor defaultVendor)
        {
            List<string> argList = new List<string>(args);
            int index = argList.IndexOf("/t");
            EDbVendor dbVendor = defaultVendor;
            if (index != -1 && args.Length > index + 1)
            {
                if (args[index + 1].Equals("mssql", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvmssql;
                }
                else if (args[index + 1].Equals("db2", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvdb2;
                }
                else if (args[index + 1].Equals("mysql", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvmysql;
                }
                else if (args[index + 1].Equals("netezza", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvnetezza;
                }
                else if (args[index + 1].Equals("teradata", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvteradata;
                }
                else if (args[index + 1].Equals("oracle", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvoracle;
                }
                else if (args[index + 1].Equals("informix", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvinformix;
                }
                else if (args[index + 1].Equals("sybase", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvsybase;
                }
                else if (args[index + 1].Equals("postgresql", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvpostgresql;
                }
                else if (args[index + 1].Equals("hive", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvhive;
                }
                else if (args[index + 1].Equals("greenplum", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvgreenplum;
                }
                else if (args[index + 1].Equals("redshift", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvredshift;
                }
                else if (args[index + 1].Equals("mdx", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvmdx;
                }
            }

            return dbVendor;
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_0914537a7993438d8447a617ce441b8a</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_0914537a7993438d8447a617ce441b8a</msb:DisplayName>
		<msb:ProjectId>{CFA28453-3FB1-405B-BE9D-6330B665488A}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_0914537a7993438d8447a617ce441b8a.csproj"/>
		<msb:File Include="ColumnImpact.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
		<msb:File Include="columnTableStmt.cs"/>
		<msb:File Include="ClassDiagram1.cd"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="common.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="utils\MyUtil.cs"/>
		<msb:File Include="DSGTools.cs"/>
		<msb:File Include="LinkedHashMap.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:Breakpoint Include="79b93e88fbf6444ab55426687389063b">
			<msb:FileName>main.cs</msb:FileName>
			<msb:ColumnNumber>9</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>399</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="b4d5d76899314183b56def65a5538273">
			<msb:FileName>ComponentWrapper.cs</msb:FileName>
			<msb:LineNumber>81</msb:LineNumber>
			<msb:ColumnNumber>9</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="f05f18154dde4f65b6cb3d80e0894efd">
			<msb:FileName>main.cs</msb:FileName>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>412</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="b83096c1b2d645c7a4baa7038baf07be">
			<msb:FileName>ComponentWrapper.cs</msb:FileName>
			<msb:ColumnNumber>12</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>63</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0914537a7993438d8447a617ce441b8a.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{595CE5FF-FC37-495B-B667-11EDA5ED1983}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_0914537a7993438d8447a617ce441b8a</RootNamespace>
    <AssemblyName>SC_0914537a7993438d8447a617ce441b8a</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="ColumnImpact.cs" />
    <Compile Include="columnTableStmt.cs" />
    <Compile Include="common.cs" />
    <Compile Include="DSGTools.cs" />
    <Compile Include="LinkedHashMap.cs" />
    <Compile Include="utils\MyUtil.cs" />
    <Reference Include="gudusoft.gsqlparser, Version=0.0.0.0, Culture=neutral, PublicKeyToken=2b2fd676a50a6d43, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Windows\Microsoft.NET\Framework\v4.0.30319\gudusoft.gsqlparser.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="ClassDiagram1.cd" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_0914537a7993438d8447a617ce441b8a")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_0914537a7993438d8447a617ce441b8a")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output1Buffer Output1Buffer;

    int InputsFinished = 0;

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 1", StringComparison.Ordinal))
        {
            Input1_ProcessInput(new Input1Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

        if (Buffer.EndOfRowset)
        {
            InputsFinished = InputsFinished + 1;
            if (InputsFinished == 1)
            {
                FinishOutputs();
                MarkOutputsFinished();
            }
        }

    }

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output1Buffer)
        {
            Output1Buffer.SetEndOfRowset();
            Output1Buffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 1"))
            {
                Output1Buffer = new Output1Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

    }

    public virtual void CreateNewOutputRows()
    {
    }

    public virtual void Input1_ProcessInput(Input1Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input1_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input1_ProcessInputRow(Input1Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 Connection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"Connection").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[LinkedHashMap.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace gudusoft.gsqlparser.demos.util
{
    public class LinkedHashMap<T, U>
    {
        Dictionary<T, LinkedListNode<Tuple<U, T>>> D = new Dictionary<T, LinkedListNode<Tuple<U, T>>>();
        LinkedList<Tuple<U, T>> LL = new LinkedList<Tuple<U, T>>();

        public U this[T c]
        {
            get
            {
                return D[c].Value.Item1;
            }

            set
            {
                if (D.ContainsKey(c))
                {
                    LL.Remove(D[c]);
                }

                D[c] = new LinkedListNode<Tuple<U, T>>(Tuple.Create(value, c));
                LL.AddLast(D[c]);
            }
        }

        public bool ContainsKey(T k)
        {
            return D.ContainsKey(k);
        }

        public bool Remove(T k) {
            if (D.ContainsKey(k))
            {
                LL.Remove(D[k]);
                D.Remove(k);
                return true;
            }
            return false;
        }

        public void Clear() {
            D.Clear();
            LL.Clear();
        }
        public U PopFirst()
        {
            var node = LL.First;
            LL.Remove(node);
            D.Remove(node.Value.Item2);
            return node.Value.Item1;
        }

        public int Count
        {
            get
            {
                return D.Count;
            }
        }

        public Dictionary<T, LinkedListNode<Tuple<U, T>>>.KeyCollection Keys
        {
            get
            {
                return D.Keys;
            }
        }

        public LinkedListNode<Tuple<U, T>> LLs
        {
            get
            {
                return LL.First;
            }
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ClassDiagram1.cd]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<ClassDiagram MajorVersion="1" MinorVersion="1">
  <Class Name="ScriptMain">
    <Position X="0.5" Y="5.5" Width="2.5" />
    <NestedTypes>
      <Class Name="ScriptMain.queryinfo" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>main.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="ScriptMain.columnInfo" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>main.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
    </NestedTypes>
    <TypeIdentifier>
      <HashCode>AAAAAgAAQCAAAASAAAAAAAABAAAAAAAIAAEAACIDAAA=</HashCode>
      <FileName>main.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="UserComponent">
    <Position X="0.5" Y="1.5" Width="2" />
    <TypeIdentifier>
      <HashCode>CAAAABABAAAAAAAAEAgAAAABAAAgAAQAAAQAgCAAAAA=</HashCode>
      <FileName>ComponentWrapper.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="Connections">
    <Position X="4" Y="0.5" Width="1.75" />
    <TypeIdentifier>
      <HashCode>AAAABAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
      <FileName>ComponentWrapper.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="Variables">
    <Position X="6" Y="0.5" Width="1.75" />
    <TypeIdentifier>
      <HashCode>AAAABAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
      <FileName>ComponentWrapper.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="Microsoft.SqlServer.Dts.Pipeline.ScriptComponent" Collapsed="true">
    <Position X="0.5" Y="0.5" Width="1.5" />
    <TypeIdentifier />
  </Class>
  <Class Name="Microsoft.SqlServer.Dts.Pipeline.ScriptBuffer" Collapsed="true">
    <Position X="4.75" Y="2.75" Width="1.5" />
    <TypeIdentifier />
  </Class>
  <Class Name="Input1Buffer">
    <Position X="3.25" Y="5.25" Width="1.5" />
    <TypeIdentifier>
      <HashCode>BAAAIAAAAAAAAAgAAAACAAAAAAAAAAAAQAAgAAAAAAA=</HashCode>
      <FileName>BufferWrapper.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="Output1Buffer">
    <Position X="5.5" Y="5.25" Width="1.5" />
    <TypeIdentifier>
      <HashCode>IAAAAAAAAAAAACAAAAIAAAAAAAAQAAAAEAAoAAAAAAA=</HashCode>
      <FileName>BufferWrapper.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="GetCTEs.utils.MyUtil">
    <Position X="8.25" Y="0.5" Width="2.75" />
    <TypeIdentifier>
      <HashCode>AEFAAAAAAAAAACAAAAAAABAAAAAABABAAFCAAAAAAAI=</HashCode>
      <FileName>utils\MyUtil.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="GetCTEs.DSGTools.GetCTEs_DSGTools" Collapsed="true">
    <Position X="11" Y="5.75" Width="1.75" />
    <TypeIdentifier>
      <HashCode>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
      <FileName>DSGTools.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="GetCTEs.DSGTools.DSGTOOLS_QUERY_CTE_SQL_RAW" Collapsed="true">
    <Position X="7.75" Y="5.75" Width="2.5" />
    <TypeIdentifier>
      <HashCode>AAAAAAIAAAAAAAAAAAAAAAAAAAIAAAAAAQgAAAAAAAA=</HashCode>
      <FileName>DSGTools.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="GetCTEs.DSGTools.DSGTOOLS_QUERY_CTE_SQL_OUTPUT" Collapsed="true">
    <Position X="9.75" Y="4.25" Width="2.75" />
    <TypeIdentifier>
      <HashCode>AAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA=</HashCode>
      <FileName>DSGTools.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="GetCTEs.DSGTools.DSGTOOLS_QUERY_CTE_SQL" Collapsed="true">
    <Position X="7" Y="4.25" Width="2.25" />
    <TypeIdentifier>
      <HashCode>AAAAAAIAEAAAAAAAAAAAAAAAAAIAAAAAAQgAAAAAAEA=</HashCode>
      <FileName>DSGTools.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact">
    <Position X="7.25" Y="8" Width="3" />
    <NestedTypes>
      <Enum Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.ClauseType" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Enum>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.columnsInExpr" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
        <Lollipop Position="0.2" />
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.Table" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.TAlias" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.TColumn" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.TResultEntry" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.TSourceColumn" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.Utf8StringWriter" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
    </NestedTypes>
    <TypeIdentifier>
      <HashCode>QBghAEEgEtGEECMQAgACFCARQRhAQYOIICBABA4IJCQ=</HashCode>
      <FileName>ColumnImpact.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Font Name="Segoe UI" Size="9" />
</ClassDiagram>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0914537a7993438d8447a617ce441b8a.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0914537a7993438d8447a617ce441b8a.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0914537a7993438d8447a617ce441b8a.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_0914537a7993438d8447a617ce441b8a.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_0914537a7993438d8447a617ce441b8a.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input1Buffer: ScriptBuffer

{
    public Input1Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 QCSRID
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
    }
    public bool QCSRID_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public BlobColumn QCSRSQL
    {
        get
        {
            return (BlobColumn)Buffer[BufferColumnIndexes[1]];
        }
    }
    public bool QCSRSQL_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class Output1Buffer: ScriptBuffer

{
    public Output1Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String QCSOName
    {
        set
        {
            this[0] = value;
        }
    }
    public bool QCSOName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 QCSOQCSRID
    {
        set
        {
            this[1] = value;
        }
    }
    public bool QCSOQCSRID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0914537a7993438d8447a617ce441b8a.Properties.Settings.get_Default():SC_0914537a7993438d8447a617ce441b8a.Properties.Sett" +
    "ings")]

namespace SC_0914537a7993438d8447a617ce441b8a.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[DSGTools.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using gudusoft.gsqlparser.demos.columnImpact;

namespace GetCTEs.DSGTools
{
    public class GetCTEs_DSGTools
    {
    }

    public class DSGTOOLS_QUERY_CTE_SQL_RAW
    {
        public int QCSR_ID;         //dummy, actually it is auto ID in DB
        public int QCSR_QSR_ID;     //here is dummy.  It is from column QSR_ID from DSGTOOLS.QUERY_SQL_RAW
        public string QCSR_NAME;    //The name of the CTE
        public string QCSR_SQL;     //The SQL of the CTE

        public DSGTOOLS_QUERY_CTE_SQL_RAW()
        {

        }
    }

    public class DSGTOOLS_QUERY_CTE_SQL_OUTPUT
    {
        public List<int> QCSO_CSR_ID;         //This is the QCSR_QSR_ID from DSGTOOLS.QUERY_CTE_SQL_RAW
        public List<string> QCSO_NAME;        //This is the name of the column that's output from the CTE

        public DSGTOOLS_QUERY_CTE_SQL_OUTPUT()
        {
            QCSO_CSR_ID = new List<int>();
            QCSO_NAME = new List<string>();
        }
    }

    public class DSGTOOLS_QUERY_CTE_SQL
    {
        //for DSGTOOLS_QUERY_CTE_SQL_RAW
        public int QCSR_ID;         //dummy, actually it is auto ID in DB
        public int QCSR_QSR_ID;     //here is dummy.  It is from column QSR_ID from DSGTOOLS.QUERY_SQL_RAW
        public string QCSR_NAME;    //The name of the CTE
        public string QCSR_SQL;     //The SQL of the CTE

        //for DSGTOOLS_QUERY_CTE_SQL_OUTPUT
        public int QCSO_CSR_ID;         //This is the QCSR_ID from DSGTOOLS.QUERY_CTE_SQL_RAW
        public List<string> QCSO_NAME;        //This is the name of the column that's output from the CTE

        public DSGTOOLS_QUERY_CTE_SQL()
        {
            QCSO_NAME = new List<string>();
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[
#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using gudusoft.gsqlparser;
using gudusoft.gsqlparser.pp;
using System.Text;
using gudusoft.gsqlparser.demos.util;
using gudusoft.gsqlparser.nodes;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Xml;
using gudusoft.gsqlparser.demos.gettablecolumns;
//using gudusoft.gsqlparser.demos.util;
using gudusoft.gsqlparser.demos.columnImpact;
using GetCTEs.utils;
using System.Security.Cryptography;
using GetCTEs.DSGTools;

//using gudusoft.gsqlparser.Units;
#endregion

[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion


    /// <summary>
    /// This static Constructor is guaranteed to be called exactly once "before the first instance is created or any static members are referenced.", so therefore before the dependent assemblies are loaded
    /// </summary>
    //static ScriptMain()
    //{
    //    //AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
    //}

    public override void PreExecute()
    {
        base.PreExecute();
        AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
    }

    static System.Reflection.Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
    {
        if (args.Name.Contains("gsqlparser"))
        {
            string path = @"C:\Windows\Microsoft.NET\Framework\v4.0.30319\";
            return System.Reflection.Assembly.LoadFile(System.IO.Path.Combine(path, "gudusoft.gsqlparser.dll"));
        }
        return null;
    }

    public class queryinfo
    {
        public string strName { get; set; }
        public string strStmt { get; set; }
        public string strID { get; set; }
        public string strParentID { get; set; }
    }

    TGSqlParser sqlparser = new TGSqlParser(EDbVendor.dbvdb2);
    public static List<queryinfo> qiList = new List<queryinfo>();
    public static List<columnInfo> ciList = new List<columnInfo>();
    public static List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT> lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT = new List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT>();

    public override void PostExecute()
    {
        IDTSVariables100 vars;
        base.PostExecute();

        //VariableDispenser variableDispenser = (VariableDispenser)this.VariableDispenser;
        //variableDispenser.LockForWrite("User::lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT");
        //variableDispenser.GetVariables(out vars);

        //// Set the variable
        //vars["User::lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT"].Value = lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT;

        ////Unlock the variable 
        //vars.Unlock();
    }


    public string FormatSql(TGSqlParser inParser)
    {
        string strResult = null;
        gudusoft.gsqlparser.pp.para.GFmtOpt option = gudusoft.gsqlparser.pp.para.GFmtOptFactory.newInstance();
        option.removeComment = true;
        option.selectColumnlistStyle = gudusoft.gsqlparser.pp.para.styleenums.TAlignStyle.AsStacked;
        option.selectColumnlistComma = gudusoft.gsqlparser.pp.para.styleenums.TLinefeedsCommaOption.LfAfterComma;
        option.selectItemInNewLine = false;
        option.alignAliasInSelectList = true;
        option.treatDistinctAsVirtualColumn = true;
        option.caseKeywords = gudusoft.gsqlparser.pp.para.styleenums.TCaseOption.CoUppercase;
        option.fromClauseInNewLine = true;
        option.selectFromclauseJoinOnInNewline = true;
        option.wsPaddingParenthesesOfSubQuery = true;
        option.emptyLines = gudusoft.gsqlparser.pp.para.styleenums.TEmptyLinesOption.EloMergeIntoOne;
        option.wsPaddingParenthesesInExpression = true;
        option.insertValuelistStyle = gudusoft.gsqlparser.pp.para.styleenums.TAlignStyle.AsStacked;
        option.caseWhenThenInSameLine = false;
        option.andOrUnderWhere = true;

        strResult = gudusoft.gsqlparser.pp.stmtformatter.FormatterFactory.pp(inParser, option);


        return strResult;

    }
    public static string getSubStmt(string inStmt)
    {
        string outStmt = null;
        Regex regExStmt = new Regex(@"^\((.*)\)$",
                                         RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.Singleline);
        Match mStmt = null;
        mStmt = regExStmt.Match(inStmt);
        outStmt = mStmt.Groups[1].Value.ToString();

        return outStmt;

    }

    public static void getSubQueries(string inParent, string inStmt)
    {
        TGSqlParser sqParser = new TGSqlParser(EDbVendor.dbvdb2);
        sqParser.sqltext = inStmt;
        int iID = 0;
        int sqRet = sqParser.parse();

        if (sqRet == 0)
        {



            TCustomSqlStatement sqStmt = (TCustomSqlStatement)sqParser.sqlstatements[0];
            TTable lcTable = null;

            for (int iTbl = 0; iTbl < sqStmt.tables.size(); iTbl++)
            {
                lcTable = sqStmt.tables.getTable(iTbl);
                if (lcTable.TableType == ETableSource.subquery)
                {
                    queryinfo qiSubQuery = new queryinfo();
                    qiSubQuery.strParentID = inParent;
                    qiSubQuery.strID = qiSubQuery.strParentID + '.' + iID.ToString();
                    qiSubQuery.strName = lcTable.AliasName.ToString();
                    qiSubQuery.strStmt = getSubStmt(lcTable.Subquery.ToString());
                    qiList.Add(qiSubQuery);
                    iID++;

                    getSubQueries(qiSubQuery.strID, qiSubQuery.strStmt);

                }
            }
        }






    }

    public class columnInfo
    {
        public string strSchemaName { get; set; }
        public string strTableName { get; set; }
        public string strStatementType { get; set; }
        public string strColumnTable { get; set; }
        public string strColumn { get; set; }
        public string strCTEName { get; set; }
    }

    #region not used
    //public void iterateStmt_getCTEs(TCustomSqlStatement stmt, ref string formatedCTEs)
    //{
    //    LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap = new LinkedHashMap<string, TCustomSqlStatement>();
    //    string MyErrormessage = "";
    //    Dictionary<string, List<string>> CTEcolumns = new Dictionary<string, List<string>>();
    //    List<string> lst_endquery_nonCTE_Cols = new List<string>();
    //    string ErrMsg_FromSQLParser = "";

    //    ColumnImpact impact = new ColumnImpact(sqlparser.sqltext, sqlparser.DbVendor, true, true);
    //    impact.CollectColumnInfo = false;

    //    //int ret0 = sqlparser.checkSyntax();
    //    int ret = sqlparser.parse();

    //    if (ret != 0)
    //    {
    //        //buffer.Append(sqlparser.Errormessage + "\r\n");
    //        MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
    //    }
    //    else
    //    {
    //        impact.columnCollection.Clear();

    //        //for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
    //        //{
    //        if (stmt is TCustomSqlStatement)
    //        {
    //            //impact.dependMap.Clear();
    //            //impact.aliases.Clear();
    //            impact.currentSource = null;
    //            impact.cteMap.Clear();
    //            impact.currentClauseMap.Clear();
    //            impact.accessMap.Clear();

    //            string endquery_nonCTE_Cols = "";
    //            impact.initCTEMap(stmt, ref CTEcolumns, ref endquery_nonCTE_Cols);
    //            lst_endquery_nonCTE_Cols.Add(endquery_nonCTE_Cols);
    //        }
    //        //}
    //    }

    //    if (impact.cteMap.Count <= 0)
    //    {
    //        MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
    //    }
    //    else
    //    {
    //        MyCTEsMap = impact.cteMap;
    //    }

    //    #region if not found from above, try to find from "MyCTEsMap" already found 
    //    Dictionary<string, List<string>> CTEcolumns_From_myCTEsMap = new Dictionary<string, List<string>>();
    //    impact.getCTEColumns(MyCTEsMap, ref CTEcolumns_From_myCTEsMap);
    //    #endregion if not found from above, try to find from "MyCTEsMap" already found

    //    MyUtil.MergeDictionary(CTEcolumns_From_myCTEsMap, CTEcolumns);
    //    string myformatedCTEs = "";
    //    MyUtil.FormatCTEs(CTEcolumns, lst_endquery_nonCTE_Cols, ErrMsg_FromSQLParser, ref myformatedCTEs);
    //    formatedCTEs = myformatedCTEs;
    //}
    #endregion not used

    protected internal static void iterateStmt(TCustomSqlStatement stmt)
    {
        // System.out.println(stmt.sqlstatementtype.toString());

        for (int i = 0; i < stmt.tables.size(); i++)
        {
            TTable table = stmt.tables.getTable(i);
            string table_name = table.Name;
            Console.WriteLine("Analyzing: " + table_name + " <- " + stmt.sqlstatementtype);
            columnInfo ciBase = new columnInfo();


            ciBase.strSchemaName = table.TableName.SchemaString.ToUpper().Replace((char)34, (char)32).Trim();
            ciBase.strTableName = table.TableName.TableString.ToUpper().Replace((char)34, (char)32).Trim();
            ciBase.strStatementType = stmt.sqlstatementtype.ToString().ToUpper().Trim();
            ciBase.strColumn = "";
            ciBase.strColumnTable = "";
            if (table.CTE != null)
                ciBase.strCTEName = table.CTE.ToString().ToUpper().Replace((char)34, (char)32).Trim();
            ciList.Add(ciBase);
            for (int j = 0; j < table.LinkedColumns.size(); j++)
            {
                TObjectName objectName = table.LinkedColumns.getObjectName(j);
                columnInfo ciCol = new columnInfo();
                ciCol.strSchemaName = table.TableName.SchemaString.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strTableName = table.TableName.TableString.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strStatementType = stmt.sqlstatementtype.ToString().ToUpper().Trim();
                ciCol.strColumnTable = table_name.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strColumn = objectName.ColumnNameOnly.ToUpper().Replace((char)34, (char)32).Trim();
                if (!objectName.TableDetermined)
                {
                    ciCol.strColumnTable = "";
                }
                ciList.Add(ciCol);
            }
        }

        for (int i = 0; i < stmt.Statements.size(); i++)
        {
            iterateStmt(stmt.Statements.get(i));
        }

    }

    protected internal  void iterateStmt(TCustomSqlStatement stmt, ref string formatedCTEs)
    {
        // System.out.println(stmt.sqlstatementtype.toString());

        for (int i = 0; i < stmt.tables.size(); i++)
        {
            TTable table = stmt.tables.getTable(i);
            string table_name = table.Name;
            Console.WriteLine("Analyzing: " + table_name + " <- " + stmt.sqlstatementtype);
            columnInfo ciBase = new columnInfo();


            ciBase.strSchemaName = table.TableName.SchemaString.ToUpper().Replace((char)34, (char)32).Trim();
            ciBase.strTableName = table.TableName.TableString.ToUpper().Replace((char)34, (char)32).Trim();
            ciBase.strStatementType = stmt.sqlstatementtype.ToString().ToUpper().Trim();
            ciBase.strColumn = "";
            ciBase.strColumnTable = "";

            #region "get CTEs"
            ColumnImpact impact = new ColumnImpact(sqlparser.sqltext, sqlparser.DbVendor, true, true);
            string myformatedCTEs = "";
            impact.iterateStmt_getCTEs(stmt, ref myformatedCTEs);
            ciBase.strCTEName = myformatedCTEs;
            #endregion "get CTEs"

            //if (table.CTE != null)
            //ciBase.strCTEName = table.CTE.ToString().ToUpper().Replace((char)34, (char)32).Trim();
            ciList.Add(ciBase);
            for (int j = 0; j < table.LinkedColumns.size(); j++)
            {
                TObjectName objectName = table.LinkedColumns.getObjectName(j);
                columnInfo ciCol = new columnInfo();
                ciCol.strSchemaName = table.TableName.SchemaString.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strTableName = table.TableName.TableString.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strStatementType = stmt.sqlstatementtype.ToString().ToUpper().Trim();
                ciCol.strColumnTable = table_name.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strColumn = objectName.ColumnNameOnly.ToUpper().Replace((char)34, (char)32).Trim();
                if (!objectName.TableDetermined)
                {
                    ciCol.strColumnTable = "";
                }
                ciList.Add(ciCol);
            }
        }

        for (int i = 0; i < stmt.Statements.size(); i++)
        {
            iterateStmt(stmt.Statements.get(i));
        }

    }


    public override void Input1_ProcessInputRow(Input1Buffer Row)
    {
        var ven = sqlparser.DbVendor;

        qiList.Clear();
        ciList.Clear();
        var blobLength = Convert.ToInt32(Row.QCSRSQL.Length);
        var blobData = Row.QCSRSQL.GetBlobData(0, blobLength);
        var strSTGSQL = System.Text.Encoding.Unicode.GetString(blobData);
        //List<queryinfo> qiList = new List<queryinfo>();
        var myQSRID = Row.QCSRID;

        try
        {
            #region "get CTE column names"
            var QSR_SQL = MyUtil.ReplaceMultipleSpacesToSingleSpace(strSTGSQL);
            ColumnImpact impact = new ColumnImpact(QSR_SQL, ven, true, true);
            impact.CollectColumnInfo = false;
            List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT> lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT = new List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT>();
            //impact.Prepare_QCSO_Name_FromSQLString(QSR_SQL, ven, ref lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT);
            List<string> ColumnNames = new List<string>();
            //impact.getColumnNames_fromSelectQuery(ven, QSR_SQL, ref ColumnNames);
            impact.getColumnNames_fromSelectQuery(ven, QSR_SQL, true, ref ColumnNames);
            for (int j1 = 0; j1 < ColumnNames.Count; j1++)
            {
                DSGTOOLS_QUERY_CTE_SQL_OUTPUT tmpOutput = new DSGTOOLS_QUERY_CTE_SQL_OUTPUT();
                tmpOutput.QCSO_CSR_ID.Add(0); //0 is dummy.  It will be replaced in QCSR_QSR_ID
                tmpOutput.QCSO_NAME.Add(ColumnNames[j1]);
                lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT.Add(tmpOutput);
            }
            #endregion "get CTE column names"

            for (int i = 0; i < lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT.Count; i++)
            {
                //string hashSQL = null;
                //string hashSQLUPPER = null;

                Output1Buffer.AddRow();
                ////col1: QCSR_ID, auto ID
                //var QCSR_ID = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_ID;
                ////col2: QCSR_QSR_ID
                //var QCSR_QSR_ID = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_QSR_ID;
                Output1Buffer.QCSOQCSRID = myQSRID;
                Output1Buffer.QCSOName = lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT[i].QCSO_NAME[0];
                ////col3: QCSR_NAME
                //Output1Buffer.CTEName = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_NAME;
                ////col4: QCSR_SQL
                //var QCSR_SQL = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_SQL;
                //Output1Buffer.RAWCTESQL.AddBlobData(Encoding.Unicode.GetBytes(QCSR_SQL));
                ////Row.RAWCTESQL.AddBlobData(Encoding.Unicode.GetBytes(QCSR_SQL));

                //var strSTGSQLUPPER = QCSR_SQL.ToUpper();
                //using (MD5 md5Hash = MD5.Create())
                //{
                //    hashSQL = GetMd5Hash(md5Hash, QCSR_SQL);
                //    hashSQLUPPER = GetMd5Hash(md5Hash, strSTGSQLUPPER);
                //}

                ////col5: QCSR_SQLHASH
                //Output1Buffer.RAWCTESQLHASH = hashSQL;
                ////col6: QCSR_SQL_UPPER
                //Output1Buffer.RAWCTESQLUPPER.AddBlobData(Encoding.Unicode.GetBytes(strSTGSQLUPPER));
                ////col7: QCSR_SQLHASH_UPPER 
                //Output1Buffer.RAWCTESQLHASHUPPER = hashSQLUPPER.ToUpper();
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message.ToString());
        }

        #region "Old stuff"
        //sqlparser.sqltext = strSTGSQL;

        //int ret = sqlparser.parse();

        //if (ret == 0)
        //{
        //    try
        //    {
        //        for (int i = 0; i < sqlparser.sqlstatements.Count; i++)
        //        {
        //            if (sqlparser.sqlstatements[i] is TCustomSqlStatement)
        //            {
        //                TCustomSqlStatement stmt = (TCustomSqlStatement)sqlparser.sqlstatements[i];
        //                //iterateStmt(stmt);

        //                string myformatedCTEs = "";
        //                iterateStmt(stmt, ref myformatedCTEs);

        //                #region "test"
        //                //string myformatedCTEs = "";
        //                //iterateStmt_getCTEs(stmt, ref myformatedCTEs);
        //                #endregion "test"

        //                //Console.WriteLine("This");

        //                /*
        //                xmlVisitor xv2 = new xmlVisitor();
        //                xv2.run(sqlparser);


        //                // Create the XmlDocument.
        //                XmlDocument doc = new XmlDocument();
        //                doc.LoadXml(xv2.FormattedXml);



        //                doc.PreserveWhitespace = true;
        //                doc.Save("G:\\QSID907.xml");



        //                queryinfo qi = new queryinfo();
        //                qi.strName = "";
        //                qi.strStmt = xv2.FormattedXml.ToString();
        //                qi.strParentID = "";
        //                qi.strID = i.ToString();
        //                qiList.Add(qi);
        //                */

        //                //                            Console.WriteLine(xv2.FormattedXml);
        //                /*
        //                TResultColumnList trc = (TResultColumnList)stmt.ResultColumnList;


        //                queryinfo qi = new queryinfo();

        //                stmt.tables





        //                qi.strName = "";
        //                qi.strStmt = stmt.ToString();
        //                qi.strParentID = "";
        //                qi.strID = i.ToString();
        //                qiList.Add(qi);

        //                if (stmt.CteList != null && stmt.CteList.Count > 0)
        //                {
        //                    TCTEList cteList = stmt.CteList;

        //                    for (int iCTE = 0; iCTE < cteList.Count; iCTE++)
        //                    {
        //                        TCTE cte = cteList.getCTE(iCTE);
        //                        queryinfo qiCTE = new queryinfo();
        //                        qiCTE.strName = cte.TableName.ToString();
        //                        qiCTE.strStmt = getSubStmt(cte.PreparableStmt.ToString());
        //                        qiCTE.strParentID = i.ToString();
        //                        qiCTE.strID = qiCTE.strParentID + '.' + iCTE.ToString();
        //                        qiList.Add(qiCTE);

        //                        getSubQueries(qiCTE.strID, qiCTE.strStmt);

        //                    }
        //                }*/
        //            }
        //        }
        //        for (int iCI = 0; iCI < ciList.Count; iCI++)
        //        {
        //            //Output1Buffer.AddRow();

        //            //Output1Buffer.QSRID = Row.QSRID;
        //            //if (!String.IsNullOrEmpty(ciList[iCI].strCTEName))
        //            //    Output1Buffer.CTEName = ciList[iCI].strCTEName.ToString();
        //            //else
        //            //    Output1Buffer.CTEName = "CTEs Not found";
        //            //Output1Buffer.RAWCTESQL = strSTGSQL;

        //            //var strSTGSQLUPPER = strSTGSQL.ToUpper();
        //            //Output1Buffer.RAWCTESQLHASHUPPER = strSTGSQLUPPER;

        //            //using (MD5 md5Hash = MD5.Create())
        //            //{
        //            //    var hashSQL = GetMd5Hash(md5Hash, strSTGSQL);
        //            //    var hashSQLUPPER = GetMd5Hash(md5Hash, strSTGSQLUPPER);
        //            //    Output1Buffer.RAWCTESQLHASH = hashSQL;
        //            //    Output1Buffer.RAWCTESQLHASHUPPER = hashSQLUPPER;
        //            //}


        //            string hashSQL = null;
        //            string hashSQLUPPER = null;
        //            var strSTGSQLUPPER = strSTGSQL.ToUpper();
        //            Row.QSRID = myQSRID;
        //            if (!String.IsNullOrEmpty(ciList[iCI].strCTEName))
        //                Row.CTEName = ciList[iCI].strCTEName.ToString();
        //            else
        //                Row.CTEName = "CTEs Not found";
        //            Row.RAWCTESQL.AddBlobData(Encoding.Unicode.GetBytes(strSTGSQL));
        //            using (MD5 md5Hash = MD5.Create())
        //            {
        //                hashSQL = GetMd5Hash(md5Hash, strSTGSQL);
        //                hashSQLUPPER = GetMd5Hash(md5Hash, strSTGSQLUPPER);
        //            }

        //            Row.RAWCTESQLHASH = hashSQL;
        //            Row.RAWCTESQLHASHUPPER = hashSQLUPPER.ToUpper();
        //            Row.RAWCTESQLUPPER.AddBlobData(Encoding.Unicode.GetBytes(strSTGSQLUPPER));
        //        }

        //        /*
        //        for (int iQI = 0; iQI < qiList.Count; iQI++)
        //        {
        //            Output1Buffer.AddRow();
        //            Output1Buffer.CteName = qiList[iQI].strName;
        //            Output1Buffer.FormattedSQL.AddBlobData(Encoding.Unicode.GetBytes(qiList[iQI].strStmt.ToString()));
        //            Output1Buffer.FormattedSQLHash = qiList[iQI].strStmt.GetHashCode();
        //            Output1Buffer.ParentID = qiList[iQI].strParentID;
        //            Output1Buffer.SubQueryID = qiList[iQI].strID;
        //            //Output1Buffer.QSIDout = Row.QSID;
        //        }*/
        //    }





        //    catch (Exception ex)
        //    {
        //        Console.WriteLine(ex.Message.ToString());
        //    }
            #endregion "Old stuff"
    }

    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ColumnImpact.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using GetCTEs.DSGTools;

namespace gudusoft.gsqlparser.demos.columnImpact
{
    using Document = System.Xml.Linq.XDocument;
    using Element = System.Xml.Linq.XElement;
    using System.Drawing;
    using System.IO;
    using gudusoft.gsqlparser.demos.util;
    using System.Xml.Linq;
    using System.Text.RegularExpressions;
    using gudusoft.gsqlparser.nodes;
    using gudusoft.gsqlparser.stmt;
    using gudusoft.gsqlparser;
    using System.Linq;
    using GetCTEs.utils;

    public class ColumnImpact
    {
        public ColumnImpact()
        {

        }
        public enum ClauseType
        {
            connectby,
            groupby,
            join,
            orderby,
            select,
            startwith,
            undefine,
            @where
        }

        internal class columnsInExpr : IExpressionVisitor
        {
            private readonly ColumnImpact outerInstance;


            internal IList<TColumn> columns;
            internal TExpression expr;
            internal ColumnImpact impact;
            internal int level;
            internal TCustomSqlStatement stmt;
            internal bool collectExpr;
            internal ClauseType clauseType;
            internal TAlias parentAlias;

            public columnsInExpr(ColumnImpact outerInstance, ColumnImpact impact, TExpression expr, IList<TColumn> columns, TCustomSqlStatement stmt, int level, bool collectExpr, ClauseType clauseType, TAlias parentAlias)
            {
                this.outerInstance = outerInstance;
                this.stmt = stmt;
                this.impact = impact;
                this.expr = expr;
                this.columns = columns;
                this.level = level;
                this.collectExpr = collectExpr;
                this.clauseType = clauseType;
                this.parentAlias = parentAlias;
            }

            internal virtual void addColumnToList(TParseTreeNodeList list, TCustomSqlStatement stmt)
            {
                if (list != null)
                {
                    for (int i = 0; i < list.size(); i++)
                    {
                        IList<TExpression> exprList = new List<TExpression>();
                        object element = list.getElement(i);

                        if (element is TGroupByItem)
                        {
                            if (!outerInstance.traceView && !outerInstance.isColumnLevel)
                            {
                                exprList.Add(((TGroupByItem)element).Expr);
                            }
                        }
                        if (element is TOrderByItem)
                        {
                            if (!outerInstance.traceView && !outerInstance.isColumnLevel)
                            {
                                exprList.Add(((TOrderByItem)element).SortKey);
                            }
                        }
                        else if (element is TExpression)
                        {
                            exprList.Add((TExpression)element);
                        }
                        else if (element is TWhenClauseItem)
                        {
                            if (!outerInstance.traceView && !outerInstance.isColumnLevel)
                            {
                                exprList.Add(((TWhenClauseItem)element).Comparison_expr);
                            }
                            exprList.Add(((TWhenClauseItem)element).Return_expr);
                        }

                        foreach (TExpression expr in exprList)
                        {
                            if (expr != null)
                            {
                                expr.inOrderTraverse(this);
                            }
                        }
                    }
                }
            }

            public virtual bool exprVisit(TParseTreeNode pNode, bool isLeafNode)
            {
                TExpression lcexpr = (TExpression)pNode;
                if (lcexpr.ExpressionType == EExpressionType.simple_object_name_t)
                {
                    columns.Add(impact.attrToColumn(lcexpr, stmt, expr, collectExpr, clauseType, parentAlias));
                }
                else if (lcexpr.ExpressionType == EExpressionType.between_t)
                {
                    columns.Add(impact.attrToColumn(lcexpr.BetweenOperand, stmt, expr, collectExpr, clauseType, parentAlias));
                }
                else if (lcexpr.ExpressionType == EExpressionType.function_t)
                {
                    TFunctionCall func = (TFunctionCall)lcexpr.FunctionCall;
                    if (func.FunctionType == EFunctionType.trim_t)
                    {
                        TTrimArgument args = func.TrimArgument;
                        TExpression expr = args.StringExpression;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        expr = args.TrimCharacter;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                    }
                    else if (func.FunctionType == EFunctionType.cast_t)
                    {
                        TExpression expr = func.Expr1;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                    }
                    else if (func.FunctionType == EFunctionType.convert_t)
                    {
                        TExpression expr = func.Expr1;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        expr = func.Expr2;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        expr = func.Parameter;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                    }
                    else if (func.FunctionType == EFunctionType.contains_t || func.FunctionType == EFunctionType.freetext_t)
                    {
                        TExpression expr = func.Expr1;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        TInExpr inExpr = func.InExpr;
                        if (inExpr.ExprList != null)
                        {
                            for (int k = 0; k < inExpr.ExprList.size(); k++)
                            {
                                expr = inExpr.ExprList.getExpression(k);
                                expr.inOrderTraverse(this);
                            }
                            if (expr != null)
                            {
                                expr.inOrderTraverse(this);
                            }
                        }
                        expr = inExpr.Func_expr;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                    }
                    else if (func.FunctionType == EFunctionType.extractxml_t)
                    {
                        TExpression expr = func.XMLType_Instance;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        expr = func.XPath_String;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        expr = func.Namespace_String;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                    }
                    else if (func.FunctionType == EFunctionType.rank_t)
                    {
                        TOrderByItemList orderByList = func.OrderByList;
                        for (int k = 0; k < orderByList.size(); k++)
                        {
                            TExpression expr = orderByList.getOrderByItem(k).SortKey;
                            if (expr != null)
                            {
                                expr.inOrderTraverse(this);
                            }
                        }
                    }
                    else if (func.Args != null)
                    {
                        for (int k = 0; k < func.Args.size(); k++)
                        {
                            TExpression expr = func.Args.getExpression(k);
                            if (expr != null)
                            {
                                expr.inOrderTraverse(this);
                            }
                        }
                    }
                    if (func.AnalyticFunction != null)
                    {
                        TParseTreeNodeList list = func.AnalyticFunction.PartitionBy_ExprList;
                        addColumnToList(list, stmt);

                        if (func.AnalyticFunction.OrderBy != null)
                        {
                            list = func.AnalyticFunction.OrderBy.Items;
                            addColumnToList(list, stmt);
                        }
                    }
                    else if (func.WindowDef != null)
                    {
                        if (func.WindowDef.PartitionClause != null)
                        {
                            TParseTreeNodeList list = func.WindowDef.PartitionClause.ExpressionList;
                            addColumnToList(list, stmt);
                        }
                        if (func.WindowDef.orderBy != null)
                        {
                            TParseTreeNodeList list = func.WindowDef.orderBy.Items;
                            addColumnToList(list, stmt);
                        }
                    }

                }
                else if (lcexpr.ExpressionType == EExpressionType.subquery_t)
                {
                    impact.impactSqlFromStatement(lcexpr.SubQuery, level + 1);
                }
                else if (lcexpr.ExpressionType == EExpressionType.case_t)
                {
                    TCaseExpression expr = lcexpr.CaseExpression;
                    TExpression conditionExpr = expr.Input_expr;
                    if (conditionExpr != null)
                    {
                        conditionExpr.inOrderTraverse(this);
                    }
                    TExpression defaultExpr = expr.Else_expr;
                    if (defaultExpr != null)
                    {
                        defaultExpr.inOrderTraverse(this);
                    }
                    TWhenClauseItemList list = expr.WhenClauseItemList;
                    addColumnToList(list, stmt);
                }
                return true;
            }

            public virtual void searchColumn()
            {
                this.expr.inOrderTraverse(this);
            }
        }

        internal class Table
        {
            private readonly ColumnImpact outerInstance;

            public Table(ColumnImpact outerInstance)
            {
                this.outerInstance = outerInstance;
            }


            public string prefixName;
            public string tableAlias;
            public string tableName;
        }

        internal class TAlias
        {
            private readonly ColumnImpact outerInstance;

            public TAlias(ColumnImpact outerInstance)
            {
                this.outerInstance = outerInstance;
            }


            public string alias;
            public string column;
            public Point location;
            public TExpression columnExpr;
        }

        private IList<TColumn> columnCollection = new List<TColumn>();

        public class TColumn
        {

            public string viewName;
            public string expression = "";
            public string columnName;
            public string columnPrex;
            public string orignColumn;
            public Tuple<long, long> location;
            public IList<string> tableNames = new List<string>();
            public IList<string> tableFullNames = new List<string>();
            public ClauseType clauseType;
            public string alias;

            internal TColumn(ColumnImpact impact)
            {
                if (impact.CollectColumnInfo)
                {
                    impact.columnCollection.Add(this);
                }
            }

            public virtual string getFullName(string tableName)
            {
                if (!string.ReferenceEquals(tableName, null))
                {
                    return tableName + "." + columnName;
                }
                else
                {
                    return columnName;
                }
            }

            public virtual string OrigName
            {
                get
                {
                    if (!string.ReferenceEquals(columnPrex, null))
                    {
                        return columnPrex + "." + columnName;
                    }
                    else
                    {
                        return columnName;
                    }
                }
            }

        }

        internal class TResultEntry
        {
            private readonly ColumnImpact outerInstance;


            public ClauseType clause;

            public string targetColumn;
            public TTable targetTable;
            public Tuple<long, long> location;
            public TColumn columnObject;

            public TResultEntry(ColumnImpact outerInstance, TTable table, string viewName, string column, ClauseType clause, Tuple<long, long> location)
            {
                this.outerInstance = outerInstance;
                this.targetTable = table;
                this.targetColumn = column;
                this.clause = clause;
                this.location = location;
                columnObject = new TColumn(outerInstance);
                columnObject.columnName = "*";
                columnObject.viewName = viewName;
                updateColumnTableFullName(table, columnObject);
            }

            public TResultEntry(ColumnImpact outerInstance, TTable table, TColumn columnObject, string column, ClauseType clause, Tuple<long, long> location)
            {
                this.outerInstance = outerInstance;
                this.targetTable = table;
                this.targetColumn = column;
                this.clause = clause;
                this.location = location;
                this.columnObject = columnObject;
                updateColumnTableFullName(table, this.columnObject);
            }

            internal virtual void updateColumnTableFullName(TTable table, TColumn column)
            {
                IList<string> fullNames = column.tableFullNames;
                if (fullNames != null)
                {
                    for (int i = 0; i < fullNames.Count; i++)
                    {
                        string tableName = table.Name;
                        string fullName = fullNames[i];
                        if (!string.ReferenceEquals(tableName, null))
                        {
                            fullName = string.ReferenceEquals(fullName, null) ? "" : fullName.Trim();
                            if (!tableName.Equals(fullName, StringComparison.OrdinalIgnoreCase))
                            {
                                if (!fullNames.Contains(table.FullName))
                                {
                                    fullNames.RemoveAt(i);
                                    fullNames.Insert(i, table.FullName);
                                }
                            }
                        }
                    }
                }
            }
        }

        internal class TSourceColumn
        {
            private readonly ColumnImpact outerInstance;

            public TSourceColumn(ColumnImpact outerInstance)
            {
                this.outerInstance = outerInstance;
            }


            public IList<ClauseType> clauses = new List<ClauseType>();
            public string name;
            public string tableName;
            public string tableOwner;
            public LinkedHashMap<ClauseType, IList<Tuple<long, long>>> locations = new LinkedHashMap<ClauseType, IList<Tuple<long, long>>>();
        }

        public static void Main_1(string[] args)
        {
            if (args.Length == 0)
            {
                Console.WriteLine("Usage: ColumnImpact [/f <script file>] [/d]/[/s [/xml] [/c]]/[/v] [/o <output file path>] [/t <database type>]");
                Console.WriteLine("/s: Option, display the analysis result simply.");
                Console.WriteLine("/c: Option, display the analysis result simply in column level.");
                Console.WriteLine("/d: Option, display the analysis result in detail.");
                Console.WriteLine("/xml: Option, export the analysis results to XML format, it's valid only if /s is specified");
                Console.WriteLine("/v: Option, trace data lineage in views.");
                Console.WriteLine("/o: Option, write the output stream to the specified file.");
                Console.WriteLine("/t: Option, set the database type. Support oracle, mysql, mssql and db2, the default type is oracle");
                return;
            }

            string sqltext = @"SELECT e.last_name AS name,
                                e.commission_pct comm,
                                e.salary * 12 ""Annual Salary""
                                FROM scott.employees AS e
                                WHERE e.salary > 1000 or 1=1
                                ORDER BY
                                e.first_name,
                                e.last_name;";

            IList<string> argList = new List<string>(args);

            bool traceView = argList.IndexOf("/v") != -1;

            bool simply = traceView || argList.IndexOf("/s") != -1;

            bool isXML = !traceView && simply && argList.IndexOf("/xml") != -1;

            bool isColumnLevel = !traceView && simply && argList.IndexOf("/c") != -1;

            string outputFile = null;

            int index = argList.IndexOf("/o");

            if (index != -1 && args.Length > index + 1)
            {
                outputFile = args[index + 1];
            }

            System.IO.StreamWriter writer = null;
            if (!string.ReferenceEquals(outputFile, null))
            {
                try
                {
                    writer = new StreamWriter(outputFile);
                    Console.SetOut(writer);
                }
                catch (FileNotFoundException e)
                {
                    Console.WriteLine(e.ToString());
                    Console.Write(e.StackTrace);
                }
            }

            EDbVendor vendor = Common.GetEDbVendor(args);

            FileInfo file = null;

            index = argList.IndexOf("/f");
            if (index != -1 && args.Length > index + 1)
            {
                file = new FileInfo(args[index + 1]);
            }

            ColumnImpact impact = null;
            if (file != null)
            {
                impact = new ColumnImpact(file, vendor, simply, isXML, isColumnLevel, traceView, null);
            }
            else
            {
                impact = new ColumnImpact(sqltext, vendor, simply, isXML, isColumnLevel, traceView, null);
            }
            
            impact.CollectColumnInfo = false;
            impact.impactSQL();
            Console.Write(impact.ImpactResult);

            if (!simply)
            {
                Console.WriteLine("\r\nYou can add /s directive to display the analysis result in a simple format.");
            }

            try
            {
                if (writer != null)
                {
                    writer.Close();
                }
            }
            catch (IOException e)
            {
                Console.WriteLine(e.ToString());
                Console.Write(e.StackTrace);
            }
        } // main

        internal virtual TColumn attrToColumn(TExpression lcexpr, TCustomSqlStatement stmt, TExpression expr, bool collectExpr, ClauseType clause, TAlias parentAlias)
        {
            TColumn column = attrToColumn(lcexpr, stmt, clause, parentAlias);
            if (column == null)
            {
                return null;
            }
            if (collectExpr)
            {
                column.expression = new Regex("\n+").Replace(expr.ToString().Replace("\r\n", "\n"), " ");
                if (column.expression.Trim().Length > 0)
                {
                    List<TParseTreeNode> tokens = expr.startToken.nodesStartFromThisToken;
                    if (tokens != null)
                    {
                        for (int i = 0; i < tokens.Count; i++)
                        {
                            TParseTreeNode node = tokens[i];
                            if (node is TResultColumn)
                            {
                                TResultColumn field = (TResultColumn)node;
                                if (field.AliasClause != null)
                                {
                                    column.alias = field.AliasClause.ToString();
                                }
                            }
                        }
                    }
                }
            }
            return column;
        }

        /* store the relations of alias to column */
        private IList<TAlias> aliases = new List<TAlias>();
        private StringBuilder buffer = new StringBuilder();
        private LinkedHashMap<string, TCustomSqlStatement> cteMap = new LinkedHashMap<string, TCustomSqlStatement>();
        private LinkedHashMap<string, LinkedHashMap<TCustomSqlStatement, bool>> accessMap = new LinkedHashMap<string, LinkedHashMap<TCustomSqlStatement, bool>>();
        private LinkedHashMap<TCustomSqlStatement, ClauseType> currentClauseMap = new LinkedHashMap<TCustomSqlStatement, ClauseType>();
        private string currentSource = null;
        /* store the dependency relations */
        private LinkedHashMap<string, IList<TResultEntry>> dependMap = new LinkedHashMap<string, IList<TResultEntry>>();
        private IMetaDatabase filter;
        private bool isXML = false;
        private bool isColumnLevel = false;
        private bool traceView = false;
        private bool simply = false;
        private int columnNumber = 0;
        private TCustomSqlStatement subquery = null;
        private string viewName;
        private bool collectColumnInfo = true;
        private TGSqlParser sqlparser;
        private List<DSGTOOLS_QUERY_CTE_SQL_RAW> lst_DSGTOOLS_QUERY_CTE_SQL_RAW = new List<DSGTOOLS_QUERY_CTE_SQL_RAW>();
        private List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT> lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT = new List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT>();

        public List<DSGTOOLS_QUERY_CTE_SQL_RAW> prop_lst_DSGTOOLS_QUERY_CTE_SQL_RAW
        {
            get
            {
                return lst_DSGTOOLS_QUERY_CTE_SQL_RAW;
            }
            set
            {
                this.lst_DSGTOOLS_QUERY_CTE_SQL_RAW = value;
            }
        }

        public List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT> prop_lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT
        {
            get
            {
                return lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT;
            }
            set
            {
                this.lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT = value;
            }
        }

        public void Prepare_QCSO_Name_FromSQLString(string strSQL, EDbVendor vendor, ref List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT> prop_lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT)
        {
            vendor = EDbVendor.dbvdb2;
            ColumnImpact impact = new ColumnImpact(strSQL, vendor, true, true);
            impact.CollectColumnInfo = false;
            LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap = new LinkedHashMap<string, TCustomSqlStatement>();
            string ErrMsg_FromSQLParser = "";

            List<string> QCSR_NAMES = new List<string>();
            var lst_endquery_nonCTE_Cols = new List<string>();
            impact.impactSQL(strSQL, ref MyCTEsMap, ref ErrMsg_FromSQLParser, ref QCSR_NAMES, ref lst_endquery_nonCTE_Cols);


            for (int j1 = 0; j1 < QCSR_NAMES.Count; j1++)
            {
                DSGTOOLS_QUERY_CTE_SQL_OUTPUT tmpOutput = new DSGTOOLS_QUERY_CTE_SQL_OUTPUT();
                tmpOutput.QCSO_CSR_ID.Add(0); //0 is dummy.  It will be replaced in QCSR_QSR_ID
                tmpOutput.QCSO_NAME.Add(QCSR_NAMES[j1]);
                lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT.Add(tmpOutput);
            }
            prop_lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT = lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT;
        }

        public void getColumnNames_fromSelectQuery(EDbVendor vendor, string strSQL, ref List<string> ColumnNames)
        {
            ColumnImpact impact = new ColumnImpact(strSQL, vendor, true, true);
            int ret = sqlparser.parse();
            if (ret != 0)
            {
                return;
            }
            else
            {
                for (int k = 0; k < sqlparser.sqlstatements.Count; k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        getColumnNames_For_QCSO_NAME(select, ref ColumnNames);
                    }
                }
            }
        }

        public void getColumnNames_fromSelectQuery(EDbVendor dbVendor, string AllColString, bool bOrigCTESQL, ref List<string> ColumnNames)
        {
            try
            {
                string strOutput = null;
                string inputsql = "";
                if (!bOrigCTESQL)
                    inputsql = "Select " + AllColString + " From X";  //Compose a dummy SQL statement from AllColString
                else
                    inputsql = AllColString;
                inputsql = inputsql.Replace("&gt;", ">");
                inputsql = inputsql.Replace("&lt;", "<");
                inputsql = inputsql.Replace("&amp;", "&");
                inputsql = inputsql.Replace("&#x0d;", Environment.NewLine);

                TGSqlParser parser = new TGSqlParser(dbVendor);
                parser.sqltext = inputsql;
                int ret = parser.parse();
                if (ret == 0)
                {
                    gudusoft.gsqlparser.pp.para.GFmtOpt option = gudusoft.gsqlparser.pp.para.GFmtOptFactory.newInstance();
                    option.selectColumnlistStyle = gudusoft.gsqlparser.pp.para.styleenums.TAlignStyle.AsStacked;
                    option.selectColumnlistComma = gudusoft.gsqlparser.pp.para.styleenums.TLinefeedsCommaOption.LfAfterComma;
                    option.selectItemInNewLine = true;// false; //if true, will new line after "Select"
                    option.alignAliasInSelectList = true;
                    option.treatDistinctAsVirtualColumn = false; // true;
                    option.caseKeywords = gudusoft.gsqlparser.pp.para.styleenums.TCaseOption.CoUppercase;
                    option.fromClauseInNewLine = true;
                    option.selectFromclauseJoinOnInNewline = true;
                    option.wsPaddingParenthesesOfSubQuery = true;
                    option.removeComment = true;
                    option.emptyLines = gudusoft.gsqlparser.pp.para.styleenums.TEmptyLinesOption.EloMergeIntoOne;
                    option.wsPaddingParenthesesInExpression = true;
                    option.insertValuelistStyle = gudusoft.gsqlparser.pp.para.styleenums.TAlignStyle.AsStacked;
                    option.caseWhenThenInSameLine = false;
                    option.andOrUnderWhere = true;
                    string result = gudusoft.gsqlparser.pp.stmtformatter.FormatterFactory.pp(parser, option);
                    strOutput = result;

                    #region get all column names
                    string aLine;
                    System.IO.StringReader strReader = new System.IO.StringReader(/*parser.sqltext*/ strOutput);
                    List<string> cols = new List<string>();
                    while (true)
                    {
                        //aLine = strReader.ReadLine();
                        aLine = MyUtil.ReplaceMultipleSpacesToSingleSpace(strReader.ReadLine()); //some times "SELECT     DISTINCT" has more spaces
                        if (aLine != null)
                        {
                            if (aLine.ToUpper().Trim() == "SELECT" || aLine.ToUpper().Trim() == "SELECT DISTINCT")
                                continue;  //skip "select" line

                            if (aLine.ToUpper().Trim() == "CASE")
                            {
                                while (true)
                                {
                                    aLine = strReader.ReadLine();
                                    if (!aLine.ToUpper().Trim().Contains("END"))
                                        continue;
                                    else //contains "END"
                                    {
                                        aLine = strReader.ReadLine();
                                        if (aLine.ToUpper().Trim() == "CASE")
                                            continue;
                                        else
                                            break;
                                    }
                                }
                            }

                            if (aLine.ToUpper().Trim() == "FROM")
                                break;  //done

                            aLine = aLine.TrimStart().TrimEnd();
                            if (aLine[aLine.Length - 1] == ',')
                                aLine = aLine.Remove(aLine.Length - 1);
                            ColumnNames.Add(MyUtil.ReplaceMultipleSpacesToSingleSpace(aLine));
                        }
                    }
                    #endregion get all column names
                }
                else
                {
                    strOutput = parser.Errormessage;

                }
            }
            catch (Exception ex)
            {

            }
        }

        public virtual bool CollectColumnInfo
        {
            get
            {
                return collectColumnInfo;
            }
            set
            {
                this.collectColumnInfo = value;
            }
        }


        public ColumnImpact(FileInfo file, EDbVendor dbVendor, bool? simply, bool? isXML)
        {
            this.simply = simply.Value;
            this.isXML = isXML.Value;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqlfilename = file.FullName;
        }

        public ColumnImpact(FileInfo file, EDbVendor dbVendor, bool? simply, bool? isXML, IMetaDatabase filter)
        {
            this.simply = simply.Value;
            this.isXML = isXML.Value;
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqlfilename = file.FullName;
        }

        public ColumnImpact(string sql, EDbVendor dbVendor, bool? simply, bool? isXML)
        {
            this.simply = simply.Value;
            this.isXML = isXML.Value;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqltext = sql;
        }

        public ColumnImpact(string sql, EDbVendor dbVendor, bool? simply, bool? isXML, IMetaDatabase filter)
        {
            this.simply = simply.Value;
            this.isXML = isXML.Value;
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqltext = sql;
        }

        public ColumnImpact(FileInfo file, EDbVendor dbVendor, bool simply, bool isXML, bool isColumnLevel, IMetaDatabase filter)
        {
            this.simply = simply;
            this.isXML = isXML;
            this.isColumnLevel = isColumnLevel;
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqlfilename = file.FullName;
        }

        public ColumnImpact(FileInfo file, EDbVendor dbVendor, bool simply, bool isXML, bool isColumnLevel, bool traceView, IMetaDatabase filter)
        {
            if (traceView)
            {
                this.traceView = true;
                this.simply = true;
                this.isColumnLevel = true;
            }
            else
            {
                this.simply = simply;
                this.isXML = isXML;
                this.isColumnLevel = isColumnLevel;
            }
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqlfilename = file.FullName;
        }

        public ColumnImpact(string sql, EDbVendor dbVendor, bool? simply, bool? isXML, bool isColumnLevel, IMetaDatabase filter)
        {
            this.simply = simply.Value;
            this.isXML = isXML.Value;
            this.isColumnLevel = isColumnLevel;
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqltext = sql;
        }

        public ColumnImpact(string sql, EDbVendor dbVendor, bool simply, bool isXML, bool isColumnLevel, bool traceView, IMetaDatabase filter)
        {
            if (traceView)
            {
                this.traceView = true;
                this.simply = true;
                this.isColumnLevel = true;
            }
            else
            {
                this.simply = simply;
                this.isXML = isXML;
                this.isColumnLevel = isColumnLevel;
            }
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqltext = sql;
        }

        private TColumn attrToColumn(TExpression attr, TCustomSqlStatement stmt, ClauseType clauseType, TAlias parentAlias)
        {

            if (sqlparser.DbVendor == EDbVendor.dbvteradata)
            {
                if (clauseType == ClauseType.select && parentAlias != null)
                {
                    string columnName = removeQuote(attr.ObjectOperand.endToken.ToString());
                    TResultColumn resultColumn = getResultColumnByAlias(stmt, columnName);
                    if (resultColumn != null)
                    {
                        if (resultColumn.AliasClause != null && !parentAlias.alias.Equals(resultColumn.ColumnAlias, StringComparison.OrdinalIgnoreCase))
                        {
                            linkFieldToTables(parentAlias, resultColumn, stmt, 0);
                        }
                        return null;
                    }
                }
            }

            TColumn column = new TColumn(this);
            column.clauseType = clauseType;
            if (!string.ReferenceEquals(viewName, null))
            {
                column.viewName = viewName;
            }
            column.columnName = removeQuote(attr.ObjectOperand.endToken.ToString());
            column.location = new Tuple<long, long>(attr.ObjectOperand.endToken.lineNo, attr.endToken.columnNo);

            List<TParseTreeNode> tokens = attr.ObjectOperand.startToken.nodesStartFromThisToken;
            if (tokens != null)
            {
                for (int i = 0; i < tokens.Count; i++)
                {
                    TParseTreeNode node = tokens[i];
                    if (node is TResultColumn)
                    {
                        TResultColumn field = (TResultColumn)node;
                        if (field.AliasClause != null)
                        {
                            column.alias = field.AliasClause.ToString();
                        }
                    }
                }
            }

            if (attr.ToString().IndexOf(".", StringComparison.Ordinal) > 0)
            {
                column.columnPrex = removeQuote(attr.ToString().Substring(0, attr.ToString().LastIndexOf(".", StringComparison.Ordinal)));

                string tableName = removeQuote(column.columnPrex);
                if (tableName.IndexOf(".", StringComparison.Ordinal) > 0)
                {
                    tableName = removeQuote(tableName.Substring(tableName.LastIndexOf(".", StringComparison.Ordinal) + 1));
                }
                if (!column.tableNames.Contains(tableName))
                {
                    column.tableNames.Add(tableName);
                    if (!column.tableFullNames.Contains(tableName))
                    {
                        column.tableFullNames.Add(tableName);
                    }
                }
            }
            else
            {
                TTableList tables = stmt.tables;
                for (int i = 0; i < tables.size(); i++)
                {
                    TTable lztable = tables.getTable(i);
                    Table table = TLzTaleToTable(lztable);
                    if (!column.tableNames.Contains(table.tableName))
                    {
                        column.tableNames.Add(table.tableName);
                        if (!column.tableFullNames.Contains(lztable.FullName))
                        {
                            column.tableFullNames.Add(lztable.FullName);
                        }
                    }
                }
            }

            column.orignColumn = column.columnName;

            return column;
        }

        private TResultColumn getResultColumnByAlias(TCustomSqlStatement stmt, string columnName)
        {
            TResultColumnList columns = stmt.ResultColumnList;
            if (columns != null)
            {
                for (int i = 0; i < columns.size(); i++)
                {
                    TResultColumn column = columns.getResultColumn(i);
                    if (column.AliasClause != null && columnName.Equals(column.AliasClause.ToString(), StringComparison.OrdinalIgnoreCase))
                    {
                        return column;
                    }
                }
            }
            return null;
        }

        private string buildString(string @string, int level)
        {
            StringBuilder buffer = new StringBuilder();
            for (int i = 0; i < level; i++)
            {
                buffer.Append(@string);
            }
            return buffer.ToString();
        }

        private TCustomSqlStatement containClasuse(LinkedHashMap<TCustomSqlStatement, ClauseType> currentClauseMap, TCustomSqlStatement select)
        {
            if (currentClauseMap.ContainsKey(select))
            {
                return select;
            }
            else if (select.ParentStmt is TCustomSqlStatement)
            {
                return containClasuse(currentClauseMap, (TCustomSqlStatement)select.ParentStmt);
            }
            else
            {
                return null;
            }
        }

        private IList<TColumn> exprToColumn(TExpression expr, TCustomSqlStatement stmt, int level, ClauseType clauseType)
        {
            IList<TColumn> columns = new List<TColumn>();

            columnsInExpr c = new columnsInExpr(this, this, expr, columns, stmt, level, false, clauseType, null);
            c.searchColumn();

            return columns;
        }

        private IList<TColumn> exprToColumn(TExpression expr, TCustomSqlStatement stmt, int level, ClauseType clauseType, TAlias parentAlias)
        {
            IList<TColumn> columns = new List<TColumn>();

            columnsInExpr c = new columnsInExpr(this, this, expr, columns, stmt, level, false, clauseType, parentAlias);
            c.searchColumn();

            return columns;
        }

        private IList<TColumn> exprToColumn(TExpression expr, TCustomSqlStatement stmt, int level, bool collectExpr, ClauseType clauseType, TAlias parentAlias)
        {
            IList<TColumn> columns = new List<TColumn>();

            columnsInExpr c = new columnsInExpr(this, this, expr, columns, stmt, level, collectExpr, clauseType, parentAlias);
            c.searchColumn();

            return columns;
        }

        private bool findColumnInSubQuery(TSelectSqlStatement select, string columnName, int level, Tuple<long, long> originLocation)
        {
            bool ret = false;
            if (accessMap.ContainsKey(columnName) && accessMap[columnName] != null && accessMap[columnName].ContainsKey(select))
            {
                return accessMap[columnName][select];
            }
            else
            {
                if (!accessMap.ContainsKey(columnName))
                {
                    accessMap[columnName] = new LinkedHashMap<TCustomSqlStatement, bool>();
                }
                accessMap[columnName][select] = false;
            }
            if (select.SetOperator != TSelectSqlStatement.setOperator_none)
            {
                bool left = findColumnInSubQuery(select.LeftStmt, columnName, level, originLocation);
                bool right = findColumnInSubQuery(select.RightStmt, columnName, level, originLocation);
                ret = left && right;
            }
            else if (select.ResultColumnList != null)
            {
                // check colum name in select list of subquery
                TResultColumn columnField = null;
                if (!"*".Equals(columnName))
                {
                    for (int i = 0; i < select.ResultColumnList.size(); i++)
                    {
                        TResultColumn field = select.ResultColumnList.getResultColumn(i);
                        if (field.AliasClause != null)
                        {
                            if (field.AliasClause.ToString().Equals(columnName, StringComparison.OrdinalIgnoreCase))
                            {
                                columnField = field;
                                break;
                            }
                        }
                        else
                        {
                            if (field.Expr.ExpressionType == EExpressionType.simple_object_name_t)
                            {
                                TColumn column = attrToColumn(field.Expr, select, ClauseType.select, null);
                                if (!string.ReferenceEquals(columnName, null) && columnName.Equals(column.columnName, StringComparison.OrdinalIgnoreCase))
                                {
                                    columnField = field;
                                    break;
                                }
                            }
                        }
                    }
                }
                for (int i = 0; i < select.ResultColumnList.size(); i++)
                {
                    TResultColumn field = select.ResultColumnList.getResultColumn(i);
                    if (columnField != null && !field.Equals(columnField))
                    {
                        continue;
                    }
                    if (field.AliasClause != null)
                    {
                        ret = "*".Equals(columnName) || field.AliasClause.ToString().Equals(columnName, StringComparison.OrdinalIgnoreCase);
                        if (ret)
                        {
                            // let's check where this column come from?
                            if (!simply)
                            {
                                buffer.Append(buildString(" ", level) + "--> " + field.AliasClause.ToString() + "(alias)\r\n");
                            }
                            linkFieldToTables(null, field, select, level);
                        }
                    }
                    else
                    {
                        if (field.Expr.ExpressionType == EExpressionType.simple_object_name_t)
                        {
                            TColumn column = attrToColumn(field.Expr, select, ClauseType.select, null);
                            ret = "*".Equals(columnName) || (!string.ReferenceEquals(columnName, null) && columnName.Equals(column.columnName, StringComparison.OrdinalIgnoreCase));
                            if (ret || "*".Equals(column.columnName))
                            {
                                findColumnInTables(column, select, level, ret == false ? columnName : null, originLocation);
                                findColumnsFromClauses(select, level + 1);
                            }
                        }
                    }

                    if (ret && !"*".Equals(columnName))
                    {
                        break;
                    }
                }
            }

            LinkedHashMap<TCustomSqlStatement, bool> stmts = accessMap[columnName];
            if (stmts != null)
            {
                stmts[select] = ret;
            }

            return ret;
        } // findColumnInSubQuery

        private bool findColumnInTables(TColumn column, TCustomSqlStatement select, int level, string columnName, Tuple<long, long> originLocation)
        {
            bool ret = false;
            foreach (string tableName in column.tableNames)
            {
                if (!string.ReferenceEquals(columnName, null) && filter != null)
                {
                    int dotIndex = tableName.LastIndexOf(".", StringComparison.Ordinal);
                    string tableOwner = null;
                    string tableRealName = null;
                    if (dotIndex >= 0)
                    {
                        tableOwner = tableName.Substring(0, dotIndex);
                        tableRealName = tableName.Replace(tableOwner + ".", "");
                    }
                    else
                    {
                        tableRealName = tableName;
                    }
                    if (filter.checkColumn(null, null, tableOwner, tableRealName, columnName))
                    {
                        column.columnName = columnName;
                        if (originLocation != null)
                        {
                            column.location = originLocation;
                        }
                        // column.orignColumn = "*";
                        ret |= findColumnInTables(column, tableName, select, level);
                    }
                    else
                    {
                        ret |= false;
                    }
                }
                else
                {
                    ret |= findColumnInTables(column, tableName, select, level);
                }
            }
            return ret;
        }

        private bool findColumnInTables(TColumn column, string tableName, TCustomSqlStatement select, int level)
        {
            return findColumnInTables(column, tableName, select, level, ClauseType.undefine);
        }

        private bool findColumnInTables(TColumn column, string tableName, TCustomSqlStatement select, int level, ClauseType clause)
        {
            bool ret = false;
            TTableList tables = select.tables;

            if (tables.size() == 1)
            {
                TTable lzTable = tables.getTable(0);
                // buffer.AppendLine(lzTable.AsText);
                if ((lzTable.TableType == ETableSource.objectname) && (string.ReferenceEquals(tableName, null) || (!string.ReferenceEquals(tableName, null) && lzTable.AliasClause == null && getTableName(lzTable).Equals(tableName, StringComparison.OrdinalIgnoreCase)) || (!string.ReferenceEquals(tableName, null) && lzTable.AliasClause != null && lzTable.AliasClause.ToString().Equals(tableName, StringComparison.OrdinalIgnoreCase))))
                {
                    ret = true;

                    if (!simply)
                    {
                        buffer.Append(buildString(" ", level) + "--> " + getTableName(lzTable) + "." + column.columnName + "\r\n");
                    }
                    if (cteMap.ContainsKey(getTableName(lzTable)))
                    {
                        if (!simply)
                        {
                            buffer.Append(buildString(" ", level) + "--> WITH CTE\r\n");
                        }
                        ret = findColumnInSubQuery((TSelectSqlStatement)cteMap[getTableName(lzTable)], column.columnName, level, column.location);
                    }
                    else
                    {
                        if (!string.ReferenceEquals(currentSource, null) && dependMap.ContainsKey(currentSource))
                        {
                            TCustomSqlStatement stmt = containClasuse(currentClauseMap, select);
                            if (stmt != null)
                            {
                                dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, (ClauseType)currentClauseMap[stmt], column.location));
                            }
                            else if (select is TSelectSqlStatement)
                            {
                                if (ClauseType.undefine.Equals(clause))
                                {
                                    dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, ClauseType.select, column.location));
                                }
                                else
                                {
                                    dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, clause, column.location));
                                }
                            }
                            else
                            {
                                dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, ClauseType.undefine, column.location));
                            }
                        }
                    }
                }
                else if (select.ParentStmt is TSelectSqlStatement)
                {
                    subquery = select;
                    ret = findColumnInTables(column, tableName, select.ParentStmt, level, clause);
                    subquery = null;
                }
            }

            if (ret)
            {
                return ret;
            }

            for (int x = 0; x < tables.size(); x++)
            {
                TTable lzTable = tables.getTable(x);
                switch (lzTable.TableType)
                {
                    case ETableSource.objectname:
                        Table table = TLzTaleToTable(lzTable);
                        string alias = table.tableAlias;
                        if (!string.ReferenceEquals(alias, null))
                        {
                            alias = alias.Trim();
                        }
                        if ((!string.ReferenceEquals(tableName, null)) && ((tableName.Equals(alias, StringComparison.OrdinalIgnoreCase) || tableName.Equals(table.tableName, StringComparison.OrdinalIgnoreCase))))
                        {
                            if (!simply)
                            {
                                buffer.Append(buildString(" ", level) + "--> " + table.tableName + "." + column.columnName + "\r\n");
                            }
                            if (cteMap.ContainsKey(getTableName(lzTable)))
                            {
                                if (!simply)
                                {
                                    buffer.Append(buildString(" ", level) + "--> WITH CTE\r\n");
                                }
                                ret = findColumnInSubQuery((TSelectSqlStatement)cteMap[getTableName(lzTable)], column.columnName, level, column.location);
                            }
                            else
                            {
                                if (dependMap.ContainsKey(currentSource))
                                {
                                    string columnName = column.orignColumn;
                                    if ("*".Equals(columnName))
                                    {
                                        columnName = column.columnName;
                                    }
                                    if (currentClauseMap.ContainsKey(select))
                                    {
                                        dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, columnName, (ClauseType)currentClauseMap[select], column.location));
                                    }
                                    else if (select is TSelectSqlStatement)
                                    {
                                        if (ClauseType.undefine.Equals(clause))
                                        {
                                            dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, ClauseType.select, column.location));
                                        }
                                        else
                                        {
                                            dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, clause, column.location));
                                        }
                                    }
                                    else
                                    {
                                        dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, columnName, ClauseType.undefine, column.location));
                                    }
                                }
                                ret = true;
                            }
                        }
                        break;
                    case ETableSource.subquery:
                        for (int i = 0; i < column.tableNames.Count; i++)
                        {
                            string name = column.tableNames[i];
                            TSelectSqlStatement selectStat = (TSelectSqlStatement)lzTable.Subquery;

                            if (selectStat == subquery)
                            {
                                continue;
                            }

                            if (string.ReferenceEquals(name, null))
                            {
                                ret = findColumnInSubQuery(selectStat, column.columnName, level, column.location);
                                break;
                            }

                            if (lzTable.AliasClause != null && getTableAliasName(lzTable).Equals(name, StringComparison.OrdinalIgnoreCase))
                            {
                                ret = findColumnInSubQuery(selectStat, column.columnName, level, column.location);
                                break;
                            }

                            bool flag = false;
                            for (int j = 0; j < selectStat.tables.size(); j++)
                            {
                                if (selectStat.tables.getTable(j).AliasClause != null)
                                {
                                    if (getTableAliasName(selectStat.tables.getTable(j)).Equals(name, StringComparison.OrdinalIgnoreCase))
                                    {
                                        ret = findColumnInSubQuery(selectStat, column.columnName, level, column.location);
                                        flag = true;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (selectStat.tables.getTable(j).TableName.ToString().Equals(name, StringComparison.OrdinalIgnoreCase))
                                    {
                                        ret = findColumnInSubQuery(selectStat, column.columnName, level, column.location);
                                        flag = true;
                                        break;
                                    }
                                }
                            }
                            if (flag)
                            {
                                break;
                            }
                        }
                        break;
                    default:
                        break;
                }
                if (ret)
                {
                    break;
                }
            }

            if (!ret && select.ParentStmt is TSelectSqlStatement)
            {
                subquery = select;
                ret = findColumnInTables(column, tableName, select.ParentStmt, level, clause);
                subquery = null;
            }

            return ret;
        }

        private string getTableAliasName(TTable lztable)
        {
            return removeQuote(lztable.AliasClause.AliasName.ToString());
        }

        private string getTableName(TTable lzTable)
        {
            return removeQuote(lzTable.Name);
        }



        private void findColumnsFromClauses(TCustomSqlStatement select, int level)
        {
            currentClauseMap[select] = ClauseType.undefine;
            LinkedHashMap<TExpression, ClauseType> clauseTable = new LinkedHashMap<TExpression, ClauseType>();
            if (select is TSelectSqlStatement)
            {

                TSelectSqlStatement statement = (TSelectSqlStatement)select;

                if (statement.OrderbyClause != null)
                {
                    TOrderBy sortList = statement.OrderbyClause;
                    for (int i = 0; i < sortList.Items.size(); i++)
                    {
                        TOrderByItem orderBy = sortList.Items.getOrderByItem(i);
                        TExpression expr = orderBy.SortKey;
                        clauseTable[expr] = ClauseType.orderby;
                    }
                }

                if (statement.WhereClause != null)
                {
                    clauseTable[statement.WhereClause.Condition] = ClauseType.@where;
                }
                if (statement.HierarchicalClause != null && statement.HierarchicalClause.ConnectByList != null)
                {
                    for (int i = 0; i < statement.HierarchicalClause.ConnectByList.Count; i++)
                    {
                        clauseTable[statement.HierarchicalClause.ConnectByList[i].Condition] = ClauseType.connectby;
                    }
                }
                if (statement.HierarchicalClause != null && statement.HierarchicalClause.StartWithClause != null)
                {
                    clauseTable[statement.HierarchicalClause.StartWithClause] = ClauseType.startwith;
                }
                if (statement.joins != null)
                {
                    for (int i = 0; i < statement.joins.size(); i++)
                    {
                        TJoin join = statement.joins.getJoin(i);
                        if (join.JoinItems != null)
                        {
                            for (int j = 0; j < join.JoinItems.size(); j++)
                            {
                                TJoinItem joinItem = join.JoinItems.getJoinItem(j);
                                TExpression expr = joinItem.OnCondition;
                                if (expr != null)
                                {
                                    clauseTable[expr] = ClauseType.join;
                                }
                            }
                        }
                    }
                }
            }
            else if (select is TUpdateSqlStatement)
            {
                TUpdateSqlStatement statement = (TUpdateSqlStatement)select;
                if (statement.OrderByClause != null)
                {
                    TOrderByItemList sortList = statement.OrderByClause.Items;
                    for (int i = 0; i < sortList.size(); i++)
                    {
                        TOrderByItem orderBy = sortList.getOrderByItem(i);
                        TExpression expr = orderBy.SortKey;
                        clauseTable[expr] = ClauseType.orderby;
                    }
                }
                if (statement.WhereClause != null)
                {
                    clauseTable[statement.WhereClause.Condition] = ClauseType.@where;
                }

                if (statement.joins != null)
                {
                    for (int i = 0; i < statement.joins.size(); i++)
                    {
                        TJoin join = statement.joins.getJoin(i);
                        if (join.JoinItems != null)
                        {
                            for (int j = 0; j < join.JoinItems.size(); j++)
                            {
                                TJoinItem joinItem = join.JoinItems.getJoinItem(j);
                                TExpression expr = joinItem.OnCondition;
                                if (expr != null)
                                {
                                    clauseTable[expr] = ClauseType.join;
                                }
                            }
                        }
                    }
                }
            }

            foreach (TExpression expr in clauseTable.Keys)
            {
                currentClauseMap[select] = clauseTable[expr];

                if (!simply)
                {
                    switch ((ClauseType)currentClauseMap[select])
                    {
                        case ClauseType.where:
                            buffer.Append(buildString(" ", level) + "--> Where Clause\r\n");
                            break;
                        case ClauseType.connectby:
                            buffer.Append(buildString(" ", level) + "--> Connect By Clause\r\n");
                            break;
                        case ClauseType.startwith:
                            buffer.Append(buildString(" ", level) + "--> Start With Clause\r\n");
                            break;
                        case ClauseType.orderby:
                            buffer.Append(buildString(" ", level) + "--> Order By Clause\r\n");
                            break;
                        case ClauseType.join:
                            buffer.Append(buildString(" ", level) + "--> Join\r\n");
                            break;
                    }

                }

                IList<TColumn> columns = exprToColumn(expr, select, level, clauseTable[expr]);
                foreach (TColumn column1 in columns)
                {
                    foreach (string tableName in column1.tableNames)
                    {
                        if (!simply)
                        {

                            switch ((ClauseType)currentClauseMap[select])
                            {
                                case ClauseType.where:
                                    buffer.Append(buildString(" ", level + 1) + "--> " + column1.getFullName(tableName) + "(Where)\r\n");
                                    break;
                                case ClauseType.connectby:
                                    buffer.Append(buildString(" ", level + 1) + "--> " + column1.getFullName(tableName) + "(Connect By)\r\n");
                                    break;
                                case ClauseType.startwith:
                                    buffer.Append(buildString(" ", level + 1) + "--> " + column1.getFullName(tableName) + "(Start With)\r\n");
                                    break;
                                case ClauseType.orderby:
                                    buffer.Append(buildString(" ", level + 1) + "--> " + column1.getFullName(tableName) + "(Order By)\r\n");
                                    break;
                                case ClauseType.join:
                                    buffer.Append(buildString(" ", level + 1) + "--> " + column1.getFullName(tableName) + "(Join)\r\n");
                                    break;
                            }

                        }
                        findColumnInTables(column1, tableName, select, level + 2, column1.clauseType);
                    }

                }
            }
            currentClauseMap.Remove(select);

            // check order by clause
            findColumnsFromGroupBy(select, level);
        }

        private void findColumnsFromGroupBy(TCustomSqlStatement select, int level)
        {
            if (select is TSelectSqlStatement && ((TSelectSqlStatement)select).GroupByClause != null)
            {
                for (int j = 0; j < ((TSelectSqlStatement)select).GroupByClause.Items.size(); j++)
                {
                    TGroupByItem i = ((TSelectSqlStatement)select).GroupByClause.Items.getGroupByItem(j);

                    IList<TColumn> columns1;
                    try
                    {
                        if (i.Expr == null)
                        {
                            return;
                        }
                        int index = int.Parse(i.Expr.ToString());
                        columns1 = exprToColumn(select.ResultColumnList.getResultColumn(index - 1).Expr, select, level, ClauseType.groupby);
                    }
                    catch (System.FormatException)
                    {
                        columns1 = exprToColumn(i.Expr, select, level, ClauseType.groupby);
                    }

                    if (columns1.Count > 0)
                    {
                        TColumn column1 = columns1[0];
                        foreach (string tableName in column1.tableNames)
                        {
                            if (!simply)
                            {
                                buffer.Append(buildString(" ", level) + "--> " + column1.getFullName(tableName) + "(group by)\r\n");
                            }
                            findColumnInTables(column1, tableName, select, level + 1, ClauseType.groupby);
                        }
                    }
                }

            }
        }

        private void findColumnsFromList(TCustomSqlStatement select, int level, TParseTreeNodeList list, ClauseType clauseType)
        {
            if (list == null)
            {
                return;
            }

            for (int i = 0; i < list.size(); i++)
            {
                object element = list.getElement(i);
                TExpression lcexpr = null;
                if (element is TGroupByItem)
                {
                    lcexpr = ((TGroupByItem)element).Expr;
                }
                else if (element is TOrderByItem)
                {
                    lcexpr = ((TOrderByItem)element).SortKey;
                }
                else if (element is TExpression)
                {
                    lcexpr = (TExpression)element;
                }

                if (lcexpr != null)
                {
                    IList<TColumn> columns = exprToColumn(lcexpr, select, level, clauseType);
                    foreach (TColumn column1 in columns)
                    {
                        findColumnInTables(column1, select, level + 1, null, null);
                        findColumnsFromClauses(select, level + 2);
                    }
                }
            }
        }

        public virtual string ImpactResult
        {
            get
            {
                return buffer.ToString();
            }
        }

        public virtual IList<TColumn> ColumnInfos
        {
            get
            {
                return columnCollection;
            }
        }

        public virtual bool impactSQL(string strSQL, ref LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap, ref string MyErrormessage, ref List<string> ColumnNames, ref List<string> lst_endquery_nonCTE_Cols)
        {
            bool bParse = false;
            #region Test
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                //10/30/2019: if column QCSR_NAME in DSGTOOLS.QUERY_CTE_SQL_RAW IS "end query non-CTE columns", not parsed, but still have columns
                try
                {
                    if (!string.IsNullOrWhiteSpace(strSQL))
                        ColumnNames = strSQL.Split(',').ToList();
                }
                catch (Exception ex)
                {

                }

                bParse = false;
                buffer.Append(sqlparser.Errormessage + "\r\n");
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
                return bParse;
            }
            else
            {
                bParse = true;
                columnCollection.Clear();

                for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();
                        lst_DSGTOOLS_QUERY_CTE_SQL_RAW = new List<DSGTOOLS_QUERY_CTE_SQL_RAW>();
                        lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT = new List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT>();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        //initCTEMap(select);
                        /*Dictionary<string, List<string>>*/
                        ColumnNames = new List<string>();
                        string endquery_nonCTE_Cols = "";
                        initCTEMap(strSQL, select, ref ColumnNames, ref endquery_nonCTE_Cols);
                        lst_endquery_nonCTE_Cols.Add(endquery_nonCTE_Cols);
                    }
                }
            }

            if (/*bParse==false && */cteMap.Count <= 0)
            {
                //MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
                MyErrormessage = "[CTE not found" + "]";
            }
            else if (bParse == false)
            {
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                MyCTEsMap = cteMap;
            }
            #endregion Test
            //return true;
            return bParse;
        }


        public virtual bool impactSQL(ref LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap)
        {
            #region Test
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage + "\r\n");
                return false;
            }
            else
            {
                columnCollection.Clear();

                for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        initCTEMap(select);
                    }
                }     
            }

            MyCTEsMap = cteMap;
            #endregion Test
            return true;
        }

        public virtual bool impactSQL(ref LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap, ref string MyErrormessage, ref Dictionary<string, List<string>> CTEcolumns, ref List<string> lst_endquery_nonCTE_Cols)
        {
            bool bParse = false;
            #region Test
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                bParse = false;
                buffer.Append(sqlparser.Errormessage + "\r\n");
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
                return bParse;
            }
            else
            {
                bParse = true;
                columnCollection.Clear();

                for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();
                        lst_DSGTOOLS_QUERY_CTE_SQL_RAW = new List<DSGTOOLS_QUERY_CTE_SQL_RAW>();
                        lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT = new List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT>();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        //initCTEMap(select);
                        /*Dictionary<string, List<string>>*/
                        CTEcolumns = new Dictionary<string, List<string>>();
                        string endquery_nonCTE_Cols = "";
                        initCTEMap(select, ref CTEcolumns, ref endquery_nonCTE_Cols);
                        lst_endquery_nonCTE_Cols.Add(endquery_nonCTE_Cols);
                    }
                }
            }

            if (/*bParse==false && */cteMap.Count <= 0)
            {
                //MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
                MyErrormessage = "[CTE not found" + "]";
            }
            else if(bParse == false)
            {
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                MyCTEsMap = cteMap;
            }
            #endregion Test
            //return true;
            return bParse;
        }


        public virtual bool impactSQL(ref LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap, ref string MyErrormessage, ref Dictionary<string, List<string>> CTEcolumns)
        {
            #region Test
            //int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage + "\r\n");
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
                return false;
            }
            else
            {
                columnCollection.Clear();

                for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        //initCTEMap(select);
                        /*Dictionary<string, List<string>>*/
                        CTEcolumns = new Dictionary<string, List<string>>();
                        initCTEMap(select, ref CTEcolumns);
                    }
                }
            }

            if (cteMap.Count <= 0)
            {
                MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                MyCTEsMap = cteMap;
            }
            #endregion Test
            return true;
        }

        public virtual bool impactSQL(ref LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap, ref string MyErrormessage)
        {
            #region Test
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage + "\r\n");
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" +  "]";
                return false;
            }
            else
            {
                columnCollection.Clear();
                int isize = sqlparser.sqlstatements.size();
                for (int k = 0; k < isize; k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        initCTEMap(select);
                    }
                }
            }

            if (cteMap.Count <= 0)
            {
                MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                MyCTEsMap = cteMap;
            }
            #endregion Test
            return true;
        }

        public virtual bool impactSQL()
        {
            #region Test
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            columnCollection.Clear();

            for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
            {
                if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                {
                    dependMap.Clear();
                    aliases.Clear();
                    currentSource = null;
                    cteMap.Clear();
                    currentClauseMap.Clear();
                    accessMap.Clear();

                    TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                    initCTEMap(select);
                }
            }
            #endregion Test

            return true;
        }

        public virtual void iterateStmt_getCTEs(TCustomSqlStatement stmt, ref string formatedCTEs)
        {
            LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap = new LinkedHashMap<string, TCustomSqlStatement>();
            string MyErrormessage = "";
            Dictionary<string, List<string>> CTEcolumns = new Dictionary<string, List<string>>();
            List<string> lst_endquery_nonCTE_Cols = new List<string>();
            string ErrMsg_FromSQLParser = "";

            ColumnImpact impact = new ColumnImpact(sqlparser.sqltext, sqlparser.DbVendor, true, true);
            impact.CollectColumnInfo = false;

            //int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage + "\r\n");
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                columnCollection.Clear();

                //for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                //{
                if (stmt is TCustomSqlStatement)
                {
                    dependMap.Clear();
                    aliases.Clear();
                    currentSource = null;
                    cteMap.Clear();
                    currentClauseMap.Clear();
                    accessMap.Clear();

                    string endquery_nonCTE_Cols = "";
                    initCTEMap(stmt, ref CTEcolumns, ref endquery_nonCTE_Cols);
                    lst_endquery_nonCTE_Cols.Add(endquery_nonCTE_Cols);
                }
                //}
            }

            if (cteMap.Count <= 0)
            {
                MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                MyCTEsMap = cteMap;
            }

            #region if not found from above, try to find from "MyCTEsMap" already found 
            Dictionary<string, List<string>> CTEcolumns_From_myCTEsMap = new Dictionary<string, List<string>>();
            impact.getCTEColumns(MyCTEsMap, ref CTEcolumns_From_myCTEsMap);
            #endregion if not found from above, try to find from "MyCTEsMap" already found

            MyUtil.MergeDictionary(CTEcolumns_From_myCTEsMap, CTEcolumns);
            string myformatedCTEs = "";
            MyUtil.FormatCTEs(CTEcolumns, lst_endquery_nonCTE_Cols, ErrMsg_FromSQLParser, ref myformatedCTEs);
            formatedCTEs = myformatedCTEs;
        }
        public virtual bool impactSQL_orig()
        {
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage + "\r\n");
                return false;
            }
            else
            {
                Document doc = null;
                Element columnImpactResult = null;
                if (simply && isXML)
                {
                    doc = new Document();
                    XDeclaration declaration = new XDeclaration("1.0", "utf-8", "no");
                    doc.Declaration = declaration;
                    columnImpactResult = new XElement("columnImpactResult");
                    doc.Add(columnImpactResult);
                }

                columnCollection.Clear();

                for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        initCTEMap(select);

                        columnNumber = 0;
                        impactSqlFromStatement(select);

                        if (traceView)
                        {
                            if (select is TCreateViewSqlStatement)
                            {
                                TSelectSqlStatement stmt = ((TCreateViewSqlStatement)select).Subquery;
                                if (stmt.WhereClause != null)
                                {
                                    buffer.Append("rt=vWhere\tview=" + viewName + "\twhere=").Append(new Regex("\n+").Replace(stmt.WhereClause.Condition.ToString().Replace("\r\n", "\n"), " ")).AppendLine();
                                }
                                IList<TTable> tableList = new List<TTable>();
                                checkStmtTables(stmt, tableList);
                                if (tableList.Count > 0)
                                {
                                    StringBuilder tableBuffer = new StringBuilder();
                                    IList<string> list = new List<string>();
                                    for (int i = 0; i < tableList.Count; i++)
                                    {
                                        IList<string> tables = new List<string>();
                                        getTableNames(tables, tableList[i]);
                                        if (tables != null)
                                        {
                                            for (int j = 0; j < tables.Count; j++)
                                            {
                                                bool exist = false;
                                                for (int z = 0; z < list.Count; z++)
                                                {
                                                    if (list[z].Equals(tables[j], StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        exist = true;
                                                        break;
                                                    }
                                                }
                                                if (!exist)
                                                {
                                                    list.Add(tables[j]);
                                                }
                                            }
                                        }
                                    }

                                    for (int i = 0; i < list.Count; i++)
                                    {
                                        tableBuffer.Append(list[i]);
                                        if (i < list.Count - 1)
                                        {
                                            tableBuffer.Append(", ");
                                        }
                                    }
                                    buffer.Append("rt=vTable\tview=" + viewName + "\ttables=").Append(tableBuffer.ToString()).AppendLine();

                                }
                                if (stmt.joins != null)
                                {
                                    for (int i = 0; i < stmt.joins.size(); i++)
                                    {
                                        if (stmt.joins.getJoin(i).JoinItems.size() > 0)
                                        {
                                            buffer.Append("rt=vJoin\tview=" + viewName + "\tjoin=").Append(new Regex("\n+").Replace(stmt.joins.getJoin(i).JoinItems.ToString().Replace("\r\n", "\n"), " ")).AppendLine();
                                        }
                                    }
                                }
                            }

                            LinkedHashMap<string, string> bufferMap = new LinkedHashMap<string, string>();
                            LinkedHashMap<string, string> exprMap = new LinkedHashMap<string, string>();

                            TCreateViewSqlStatement createView = null;
                            if (select is TCreateViewSqlStatement)
                            {
                                createView = (TCreateViewSqlStatement)select;
                            }
                            foreach (TAlias alias in aliases)
                            {
                                if (dependMap.ContainsKey(alias.alias))
                                {
                                    IList<TResultEntry> results = (IList<TResultEntry>)dependMap[alias.alias];
                                    IList<string> nullRealColumns = new List<string>();
                                    foreach (TResultEntry result in results)
                                    {
                                        TColumn columnObject = result.columnObject;
                                        if (columnObject == null || string.ReferenceEquals(columnObject.viewName, null))
                                        {
                                            continue;
                                        }

                                        if (result.clause != ClauseType.select)
                                        {
                                            continue;
                                        }

                                        string column = null;

                                        if (!string.ReferenceEquals(result.columnObject.columnName, null))
                                        {
                                            if (result.targetTable.FullName == null)
                                            {
                                                continue;
                                            }
                                            if ("*".Equals(result.targetColumn))
                                            {
                                                column = removeQuote(result.targetTable.FullName.ToLower());
                                            }
                                            else
                                            {
                                                column = removeQuote((result.targetTable.FullName + "." + result.targetColumn).ToLower());
                                            }
                                        }
                                        else
                                        {
                                            if (nullRealColumns.Contains(removeQuote(result.columnObject.expression)))
                                            {
                                                continue;
                                            }
                                            else
                                            {
                                                nullRealColumns.Add(removeQuote(result.columnObject.expression));
                                            }

                                        }

                                        string columnAlias = null;
                                        if (createView != null && createView.ViewAliasClause != null)
                                        {
                                            columnAlias = createView.ViewAliasClause.ViewAliasItemList.getViewAliasItem(aliases.IndexOf(alias)).Alias.ToString();
                                        }
                                        else if (!alias.alias.Equals(alias.column))
                                        {
                                            columnAlias = alias.alias;
                                        }
                                        else
                                        {
                                            columnAlias = alias.column;
                                            if (alias.columnExpr != null)
                                            {
                                                if (alias.columnExpr.ExpressionType == EExpressionType.simple_object_name_t)
                                                {
                                                    if (columnAlias.IndexOf('.') != -1)
                                                    {
                                                        columnAlias = columnAlias.Substring(columnAlias.LastIndexOf('.') + 1);
                                                    }
                                                }
                                            }
                                        }

                                        string temp = ("rt=col\tview=" + columnObject.viewName + "\t" + "column=" + columnAlias + "\t" + (!string.ReferenceEquals(column, null) ? ("source=" + column + "\t") : "") + "expression=");

                                        if (!bufferMap.ContainsKey(temp.ToUpper()))
                                        {
                                            bufferMap[temp.ToUpper()] = temp;
                                        }
                                        if (!string.ReferenceEquals(columnObject.expression, null) && columnObject.expression.Trim().Length > 0)
                                        {
                                            if (!exprMap.ContainsKey(temp.ToUpper()))
                                            {
                                                exprMap[temp.ToUpper()] = columnObject.expression;
                                            }
                                            else
                                            {
                                                string expr = exprMap[temp.ToUpper()];
                                                Regex regex = new Regex(",\\s*" + Regex.Escape(columnObject.expression) + "\\s*,", RegexOptions.IgnoreCase);
                                                if (!regex.Match(("," + expr + ",")).Success)
                                                {
                                                    expr += (", " + columnObject.expression);
                                                }
                                                exprMap[temp.ToUpper()] = expr;
                                            }
                                        }
                                    }
                                }
                            }
                            IEnumerator<string> iter = bufferMap.Keys.GetEnumerator();
                            while (iter.MoveNext())
                            {
                                string temp = bufferMap[iter.Current];
                                buffer.Append(temp);
                                string expr = exprMap[temp.ToUpper()];
                                if (string.ReferenceEquals(expr, null))
                                {
                                    expr = "";
                                }
                                buffer.Append(expr + "\r\n");
                            }
                        }
                        else if (simply)
                        {
                            if (!isXML)
                            {
                                foreach (TAlias alias in aliases)
                                {

                                    buffer.Append(alias.alias + " depends on: ");

                                    IList<string> collections = new List<string>();

                                    if (dependMap.ContainsKey(alias.alias))
                                    {
                                        IList<TResultEntry> results = (IList<TResultEntry>)dependMap[alias.alias];
                                        foreach (TResultEntry result in results)
                                        {
                                            if (result.columnObject == null)
                                            {
                                                continue;
                                            }
                                            if (string.ReferenceEquals(result.columnObject.columnName, null))
                                            {
                                                continue;
                                            }

                                            string column = null;
                                            if (isColumnLevel && result.clause != ClauseType.select)
                                            {
                                                continue;
                                            }
                                            if (result.targetTable.FullName == null)
                                            {
                                                continue;
                                            }

                                            if ("*".Equals(result.targetColumn))
                                            {
                                                if (result.targetTable.FullName == null)
                                                {
                                                    continue;
                                                }
                                                column = removeQuote(result.targetTable.FullName.ToLower());
                                            }
                                            else
                                            {
                                                column = removeQuote((result.targetTable.FullName + "." + result.targetColumn).ToLower());
                                            }
                                            if (!collections.Contains(column))
                                            {
                                                collections.Add(column);
                                            }
                                        }
                                    }

                                    IList<string> list = new List<string>(collections);
                                    for (int i = 0; i < list.Count; i++)
                                    {
                                        if (i < collections.Count - 1)
                                        {
                                            buffer.Append(list[i] + ", ");
                                        }
                                        else
                                        {
                                            buffer.Append(list[i]);
                                        }
                                    }

                                    buffer.AppendLine();

                                }
                            }
                            else
                            {

                                foreach (TAlias alias in aliases)
                                {
                                    Element targetColumn = new Element("targetColumn");
                                    if (!alias.alias.Equals(alias.column))
                                    {
                                        targetColumn.Add(new XAttribute("alias", alias.alias));
                                    }
                                    targetColumn.Add(new XAttribute("coordinate", alias.location.X + "," + alias.location.Y));
                                    targetColumn.Add(new XAttribute("name", alias.column));

                                    columnImpactResult.Add(targetColumn);

                                    LinkedHashMap<string, TSourceColumn> collections = new LinkedHashMap<string, TSourceColumn>();

                                    if (dependMap.ContainsKey(alias.alias))
                                    {
                                        IList<TResultEntry> results = (IList<TResultEntry>)dependMap[alias.alias];
                                        foreach (TResultEntry result in results)
                                        {
                                            if (result.columnObject == null)
                                            {
                                                continue;
                                            }
                                            if (string.ReferenceEquals(result.columnObject.columnName, null))
                                            {
                                                continue;
                                            }

                                            if (isColumnLevel && result.clause != ClauseType.select)
                                            {
                                                continue;
                                            }
                                            if (result.targetTable.FullName == null)
                                            {
                                                continue;
                                            }

                                            string key = null;
                                            if ("*".Equals(result.targetColumn))
                                            {
                                                key = removeQuote(result.targetTable.FullName.ToLower());
                                            }
                                            else
                                            {
                                                key = removeQuote((result.targetTable.FullName.ToLower() + "." + result.targetColumn).ToLower());
                                            }

                                            TSourceColumn sourceColumn = null;
                                            if (collections.ContainsKey(key))
                                            {
                                                sourceColumn = (TSourceColumn)collections[key];
                                                if (!sourceColumn.clauses.Contains(result.clause))
                                                {
                                                    sourceColumn.clauses.Add(result.clause);
                                                }

                                                if (result.location != null)
                                                {
                                                    if (!sourceColumn.locations.ContainsKey(result.clause))
                                                    {
                                                        sourceColumn.locations[result.clause] = new List<Tuple<long, long>>();
                                                    }
                                                    IList<Tuple<long, long>> ys = sourceColumn.locations[result.clause];
                                                    if (!ys.Contains(result.location))
                                                    {
                                                        ys.Add(result.location);
                                                    }
                                                }

                                            }
                                            else
                                            {
                                                sourceColumn = new TSourceColumn(this);
                                                collections[key] = sourceColumn;
                                                sourceColumn.tableOwner = removeQuote(result.targetTable.TableName.SchemaString);
                                                sourceColumn.tableName = removeQuote(result.targetTable.Name);
                                                if (!"*".Equals(result.targetColumn))
                                                {
                                                    sourceColumn.name = result.targetColumn;
                                                }
                                                if (!sourceColumn.clauses.Contains(result.clause))
                                                {
                                                    sourceColumn.clauses.Add(result.clause);
                                                }
                                                if (result.location != null)
                                                {
                                                    if (!sourceColumn.locations.ContainsKey(result.clause))
                                                    {
                                                        sourceColumn.locations[result.clause] = new List<Tuple<long, long>>();
                                                    }
                                                    IList<Tuple<long, long>> ys = sourceColumn.locations[result.clause];
                                                    if (!ys.Contains(result.location))
                                                    {
                                                        ys.Add(result.location);
                                                    }
                                                }
                                            }
                                        }

                                        IEnumerator<string> iter = collections.Keys.GetEnumerator();

                                        while (iter.MoveNext())
                                        {
                                            TSourceColumn sourceColumn = (TSourceColumn)collections[iter.Current];
                                            if (sourceColumn.clauses.Count > 0)
                                            {
                                                for (int j = 0; j < sourceColumn.clauses.Count; j++)
                                                {
                                                    ClauseType clause = sourceColumn.clauses[j];
                                                    Element element = new Element("sourceColumn");
                                                    {
                                                        StringBuilder buffer = new StringBuilder();
                                                        switch (clause)
                                                        {
                                                            case demos.columnImpact.ColumnImpact.ClauseType.@where:
                                                                buffer.Append("where");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.connectby:
                                                                buffer.Append("connect by");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.startwith:
                                                                buffer.Append("start with");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.orderby:
                                                                buffer.Append("order by");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.join:
                                                                buffer.Append("join");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.select:
                                                                buffer.Append("select");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.groupby:
                                                                buffer.Append("group by");
                                                                break;
                                                        }
                                                        if (buffer.ToString().Length != 0)
                                                        {
                                                            element.Add(new XAttribute("clause", buffer.ToString()));
                                                        }
                                                    }
                                                    {
                                                        StringBuilder buffer = new StringBuilder();
                                                        buildLocationString(sourceColumn, clause, buffer);
                                                        if (buffer.ToString().Length != 0)
                                                        {
                                                            element.Add(new XAttribute("coordinate", buffer.ToString()));
                                                        }
                                                    }
                                                    if (!string.ReferenceEquals(sourceColumn.name, null))
                                                    {
                                                        element.Add(new XAttribute("name", sourceColumn.name));
                                                    }
                                                    if (!string.ReferenceEquals(sourceColumn.tableName, null))
                                                    {
                                                        element.Add(new XAttribute("tableName", sourceColumn.tableName));
                                                    }
                                                    if (!string.ReferenceEquals(sourceColumn.tableOwner, null))
                                                    {
                                                        element.Add(new XAttribute("tableOwner", sourceColumn.tableOwner));
                                                    }
                                                    targetColumn.Add(element);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (doc != null)
                {
                    try
                    {
                        StringBuilder xmlBuffer = new StringBuilder();

                        using (StringWriter writer = new Utf8StringWriter(xmlBuffer))
                        {
                            doc.Save(writer, SaveOptions.None);
                        }

                        buffer.Append(xmlBuffer.ToString().Trim());
                    }
                    catch (IOException e)
                    {
                        Console.WriteLine(e.ToString());
                        Console.Write(e.StackTrace);
                    }
                }
            }
            return true;
        }

        internal class Utf8StringWriter : StringWriter
        {
            public Utf8StringWriter(StringBuilder sb) : base(sb) { }

            public override Encoding Encoding { get { return Encoding.UTF8; } }
        }

        private void checkStmtTables(TSelectSqlStatement stmt, IList<TTable> tableList)
        {
            if (stmt.SetOperator != TSelectSqlStatement.setOperator_none)
            {
                checkStmtTables(stmt.LeftStmt, tableList);
                checkStmtTables(stmt.RightStmt, tableList);
            }
            else
            {
                if (stmt.tables != null)
                {
                    for (int i = 0; i < stmt.tables.size(); i++)
                    {
                        TTable table = stmt.tables.getTable(i);
                        if (!tableList.Contains(table))
                        {
                            tableList.Add(table);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Albert
        /// </summary>
        /// <param name="myCTEsMap"></param>
        /// <param name="CTEcolumns"></param>
        public void getCTEColumns(LinkedHashMap<string, TCustomSqlStatement> myCTEsMap, ref Dictionary<string, List<string>> CTEcolumns)
        {
            var lls = myCTEsMap.LLs;
            if (lls != null)
            {
                foreach (var myitem in lls.List)
                {
                    var elmAt = myitem.Item1;
                    if (elmAt != null)
                    {
                        var columns = elmAt.ResultColumnList;
                        string tableName = myitem.Item2.ToString();
                        List<string> myCTEColumns = new List<string>();
                        if (columns != null)
                        {
                            for (int i = 0; i < columns.size(); i++)
                            {
                                TResultColumn column = columns.getResultColumn(i);

                                if (column.AliasClause != null)
                                {
                                    myCTEColumns.Add(column.ColumnAlias);
                                }
                                else
                                {
                                    myCTEColumns.Add(column.ColumnNameOnly);
                                }
                            }
                            CTEcolumns.Add(tableName, myCTEColumns);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Albert
        /// </summary>
        /// <param name="expression"></param>
        /// <param name="CTEcolumns"></param>
        private void getCTEColumns(TCTE expression, ref Dictionary<string, List<string>> CTEcolumns)
        {
            //TResultColumnList columns = expression.Subquery.ResultColumnList;
            var columns = expression.PreparableStmt.ResultColumnList;
            var colList = expression.ColumnList;
            string tableName = expression.TableName.String;
            List<string> myCTEColumns = new List<string>();
            if (columns != null)
            {
                for (int i = 0; i < columns.size(); i++)
                {
                    TResultColumn column = columns.getResultColumn(i);

                    if (column.AliasClause != null)
                    {
                        myCTEColumns.Add(column.ColumnAlias);
                    }
                    else
                    {
                        myCTEColumns.Add(column.ColumnNameOnly);
                    }
                }
                CTEcolumns.Add(tableName, myCTEColumns);
            }
            else if (colList != null)
            {
                myCTEColumns = colList.String.Split(',').ToList();
                CTEcolumns.Add(tableName, myCTEColumns);
            }
        }

        private void getCTEColumns(TCTE expression, ref Dictionary<string, string> CTEcolumns)
        {
            //TResultColumnList columns = expression.Subquery.ResultColumnList;
            var columns = expression.PreparableStmt.ResultColumnList;
            var colList = expression.ColumnList;
            string tableName = expression.TableName.String;
            List<string> myCTEColumns_0 = new List<string>();
            if (columns != null)
            {
                for (int i = 0; i < columns.size(); i++)
                {
                    TResultColumn column = columns.getResultColumn(i);

                    if (column.AliasClause != null)
                    {
                        myCTEColumns_0.Add(column.ColumnAlias);
                    }
                    else
                    {
                        myCTEColumns_0.Add(column.ColumnNameOnly);
                    }
                }
                //CTEcolumns.Add(tableName, myCTEColumns_0);
            }
            else if (colList != null)
            {
                myCTEColumns_0 = colList.String.Split(',').ToList();
                //CTEcolumns.Add(tableName, myCTEColumns_0);
            }

            if (myCTEColumns_0 != null)
            {
                string myCTEColumns_0_array = String.Join(",", myCTEColumns_0.ToArray());
                CTEcolumns.Add(tableName, myCTEColumns_0_array);
            }
        }

        private void getColumnNames_For_QCSO_NAME(TCustomSqlStatement select, ref List<string> ColumnNames)
        {
            //TResultColumnList columns = expression.Subquery.ResultColumnList;
            var columns = select.ResultColumnList;
            //var colList = expression.ColumnList;
            TTableList tableName = select.tables;
            //List<string> myColumns = new List<string>();
            if (columns != null)
            {
                char[] sept = { ',' };
                List<string> strSplits = columns.String.Split(sept).ToList();
                int idx = 0;
                foreach (var item in strSplits)
                {
                    string tmp = item.ToString().Replace(" ", ""); //replace white space
                    //string fstChar = tmp[0].ToString();
                    //string lstChar = tmp[tmp.Length - 1].ToString();
                    string fst3Chars = tmp.Substring(0, 3);  //like '||
                    string lst3Chars = tmp.Substring(tmp.Length - 3, 3); // like ||'

                    if ((fst3Chars != "'||") && (lst3Chars != "||'"))
                    {
                        ColumnNames.Add(item);
                    }
                    else if (lst3Chars == "||'") //last 3 chars are ||', means next part has string concatenation
                    {
                        if (idx + 1 <= strSplits.Count) //if next part idx not out of range
                        {
                            string strConcatenation = tmp + new string(sept) + strSplits[idx + 1];
                            ColumnNames.Add(strConcatenation);
                        }
                    }
                    //ColumnNames.Add(item);

                    idx++;
                }
                //ColumnNames = columns.String.Split(sept).ToList();

                //for (int i = 0; i < columns.size(); i++)
                //{
                //    TResultColumn column = columns.getResultColumn(i);

                //    if (column.AliasClause != null)
                //    {
                //        ColumnNames.Add(column.ColumnAlias);
                //    }
                //    else
                //    {
                //        ColumnNames.Add(column.String /*.ColumnNameOnly*/);
                //    }
                //}
                //ColumnNames.Add(myColumns);
            }
            //else if (colList != null)
            //{
            //myCTEColumns = colList.String.Split(',').ToList();
            //CTEcolumns.Add(tableName, myCTEColumns);
            //}
        }

        private void initCTEMap(string strSQL, TCustomSqlStatement select, ref List<string> ColumnNames, ref string endquery_nonCTE_Cols)
        {

            //find endquery_nonCTE_Cols from "TCustomSqlStatement select"
            if (select.ResultColumnList != null)
            {
                endquery_nonCTE_Cols = select.ResultColumnList.String;

                getColumnNames_For_QCSO_NAME(select, ref ColumnNames);
            }
            else
            {
                //endquery_nonCTE_Cols = "End query non-CTE columns not found";
            }
        }

        private void initCTEMap(TCustomSqlStatement select, ref Dictionary<string, List<string>> CTEcolumns)
        {
            if (select.Statements != null && select.Statements.size() > 0)
            {
                int cntSTMS = select.Statements.size();
                for (int i = 0; i < cntSTMS; i++)
                {
                    //initCTEMap(select.Statements.get(i));
                    //initCTEMap(select.Statements.get(i), ref CTEcolumns);

                    var myCTEList = select.Statements[0].CteList;
                    if (myCTEList != null && myCTEList.size() > 0)
                    {
                        int cntCTEs = myCTEList.size();
                        for (int i1 = 0; i1 < cntCTEs; i1++)
                        {
                            TCTE expression = myCTEList.getCTE(i1);
                            string tblName = removeQuote(expression.TableName.ToString());
                            cteMap[removeQuote(expression.TableName.ToString())] = expression.Subquery;
                            getCTEColumns(expression, ref CTEcolumns);
                        }
                    }
                }
            }
            if (select.CteList != null && select.CteList.size() > 0)
            {
                int cntCTEs = select.CteList.size();
                for (int i = 0; i < cntCTEs; i++)
                {
                    TCTE expression = select.CteList.getCTE(i);
                    string tblName = removeQuote(expression.TableName.ToString());
                    cteMap[removeQuote(expression.TableName.ToString())] = expression.Subquery;

                    //findColumnsFromClauses(expression.Subquery, 1); //test
                    //TResultColumn TRC = getResultColumnByAlias(expression.Subquery, removeQuote(expression.TableName.ToString()));
                    /*Dictionary<string, List<string>>*/
                    //CTEcolumns = new Dictionary<string, List<string>>();
                    getCTEColumns(expression, ref CTEcolumns);
                }
            }
        }

        private void initCTEMap(TCustomSqlStatement select, ref Dictionary<string, List<string>> CTEcolumns, ref string endquery_nonCTE_Cols)
        {
            DSGTOOLS_QUERY_CTE_SQL_RAW tmpRAW = null;
            DSGTOOLS_QUERY_CTE_SQL_OUTPUT tmpOutput = null;

            if (select.Statements != null && select.Statements.size() > 0)
            {
                int cntSTMS = select.Statements.size();
                for (int i = 0; i < cntSTMS; i++)
                {
                    //initCTEMap(select.Statements.get(i));
                    //initCTEMap(select.Statements.get(i), ref CTEcolumns);

                    var myCTEList = select.Statements[i].CteList;
                    if (myCTEList != null && myCTEList.size() > 0)
                    {
                        int cntCTEs = myCTEList.size();
                        for (int i1 = 0; i1 < cntCTEs; i1++)
                        {
                            tmpRAW = new DSGTOOLS_QUERY_CTE_SQL_RAW();
                            //tmpOutput = new DSGTOOLS_QUERY_CTE_SQL_OUTPUT();

                            TCTE expression = myCTEList.getCTE(i1);
                            string tblName = removeQuote(expression.TableName.ToString());
                            cteMap[removeQuote(expression.TableName.ToString())] = expression.Subquery;
                            getCTEColumns(expression, ref CTEcolumns);

                            tmpRAW.QCSR_ID = i; //dummy
                            tmpRAW.QCSR_QSR_ID = i + 1; //dummy
                            tmpRAW.QCSR_NAME = tblName;
                            tmpRAW.QCSR_SQL = expression.Subquery.String.TrimStart('(').TrimEnd(')').Trim();
                            lst_DSGTOOLS_QUERY_CTE_SQL_RAW.Add(tmpRAW);

                            for (int j1 = 0; j1 < CTEcolumns.Count; j1++)
                            {
                                tmpOutput = new DSGTOOLS_QUERY_CTE_SQL_OUTPUT();

                                //string key = CTEcolumns.Keys.ElementAt(j1);
                                var values = CTEcolumns.Values.ElementAt(j1);
                                //var tmpQCSO_CSR_ID = new List<int>();
                                for (int i2 = 0; i2 < values.Count; i2++)
                                {
                                    tmpOutput.QCSO_CSR_ID.Add(tmpRAW.QCSR_QSR_ID);
                                }
                                tmpOutput.QCSO_NAME = values;
                            }
                            lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT.Add(tmpOutput);
                        }
                    }
                }
            }
            if (select.CteList != null && select.CteList.size() > 0)
            {
                int cntCTEs = select.CteList.size();
                for (int i = 0; i < cntCTEs; i++)
                {
                    tmpRAW = new DSGTOOLS_QUERY_CTE_SQL_RAW();                   

                    TCTE expression = select.CteList.getCTE(i);
                    string tblName = removeQuote(expression.TableName.ToString());
                    cteMap[removeQuote(expression.TableName.ToString())] = expression.Subquery;

                    //findColumnsFromClauses(expression.Subquery, 1); //test
                    //TResultColumn TRC = getResultColumnByAlias(expression.Subquery, removeQuote(expression.TableName.ToString()));
                    /*Dictionary<string, List<string>>*/
                    //CTEcolumns = new Dictionary<string, List<string>>();
                    getCTEColumns(expression, ref CTEcolumns);

                    tmpRAW.QCSR_ID = i; //dummy
                    tmpRAW.QCSR_QSR_ID = i + 1; //dummy
                    tmpRAW.QCSR_NAME = tblName;
                    tmpRAW.QCSR_SQL = expression.Subquery.String.TrimStart('(').TrimEnd(')').Trim();
                    lst_DSGTOOLS_QUERY_CTE_SQL_RAW.Add(tmpRAW);


                    for (int i1 = 0; i1 < CTEcolumns.Count; i1++)
                    {
                        tmpOutput = new DSGTOOLS_QUERY_CTE_SQL_OUTPUT();

                        //string key = CTEcolumns.Keys.ElementAt(i1);
                        var values = CTEcolumns.Values.ElementAt(i1);
                        //var tmpQCSO_CSR_ID = new List<int>();
                        for (int i2 = 0; i2 < values.Count; i2++)
                        {
                            tmpOutput.QCSO_CSR_ID.Add(tmpRAW.QCSR_QSR_ID);
                        }
                        tmpOutput.QCSO_NAME = values;
                    }
                    lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT.Add(tmpOutput);
                }
            }

            //find endquery_nonCTE_Cols from "TCustomSqlStatement select"
            if (select.ResultColumnList != null)
            {
                endquery_nonCTE_Cols = select.ResultColumnList.String;
            }
            else
            {
                //endquery_nonCTE_Cols = "End query non-CTE columns not found";
            }

            #region append endquery_nonCTE_Cols to lst_DSGTOOLS_QUERY_CTE_SQL_RAW
            tmpRAW = new DSGTOOLS_QUERY_CTE_SQL_RAW();
            tmpRAW.QCSR_ID = lst_DSGTOOLS_QUERY_CTE_SQL_RAW.Count;
            tmpRAW.QCSR_QSR_ID = tmpRAW.QCSR_ID + 1;
            tmpRAW.QCSR_NAME = "end query non-CTE columns";
            if(!String.IsNullOrWhiteSpace(endquery_nonCTE_Cols))
                tmpRAW.QCSR_SQL = endquery_nonCTE_Cols;
            lst_DSGTOOLS_QUERY_CTE_SQL_RAW.Add(tmpRAW);
            #endregion append endquery_nonCTE_Cols to lst_DSGTOOLS_QUERY_CTE_SQL_RAW

            #region append endquery_nonCTE_Cols to lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT
            tmpOutput = new DSGTOOLS_QUERY_CTE_SQL_OUTPUT();
            if (!String.IsNullOrWhiteSpace(endquery_nonCTE_Cols))
            {
                string[] sept = new string[] { "," };
                var values= endquery_nonCTE_Cols.Split(sept, StringSplitOptions.RemoveEmptyEntries).ToList();
                for (int i2 = 0; i2 < values.Count; i2++)
                {
                    tmpOutput.QCSO_CSR_ID.Add(tmpRAW.QCSR_QSR_ID);
                }
                tmpOutput.QCSO_NAME = values.Select(s=>s.Trim()).ToList();
            }
            lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT.Add(tmpOutput);
            #endregion append endquery_nonCTE_Cols to lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT
        }

        private void initCTEMap(TCustomSqlStatement select)
        {
            if (select.Statements != null && select.Statements.size() > 0)
            {
                for (int i = 0; i < select.Statements.size(); i++)
                {
                    initCTEMap(select.Statements.get(i));
                }
            }
            if (select.CteList != null && select.CteList.size() > 0)
            {
                for (int i = 0; i < select.CteList.size(); i++)
                {
                    TCTE expression = select.CteList.getCTE(i);
                    cteMap[removeQuote(expression.TableName.ToString())] = expression.Subquery;
                }
            }
        }

        private void getTableNames(IList<string> tableNames, TTable table)
        {
            if (table.Subquery != null)
            {
                for (int i = 0; i < table.Subquery.tables.size(); i++)
                {
                    getTableNames(tableNames, table.Subquery.tables.getTable(i));
                }
            }
            else
            {
                tableNames.Add(removeQuote(table.FullName));
            }
        }

        private void buildLocationString(TSourceColumn sourceColumn, ClauseType clauseType, StringBuilder locationBuffer)
        {
            IList<Tuple<long, long>> ys = sourceColumn.locations[clauseType];
            if (ys != null)
            {
                for (int z = 0; z < ys.Count; z++)
                {
                    locationBuffer.Append(ys[z].Item1 + "," + ys[z].Item2);
                    if (z < ys.Count - 1)
                    {
                        locationBuffer.Append(";");
                    }
                }
            }
        }

        private void impactSqlFromStatement(TCustomSqlStatement select, int baseLevel)
        {
            if (select is TSelectSqlStatement)
            {
                TSelectSqlStatement stmt = (TSelectSqlStatement)select;
                if (stmt.SetOperator != TSelectSqlStatement.setOperator_none)
                {
                    impactSqlFromStatement(stmt.LeftStmt, baseLevel);
                    impactSqlFromStatement(stmt.RightStmt, baseLevel);
                }
                else
                {
                    for (int i = 0; i < select.ResultColumnList.size(); i++)
                    {
                        linkFieldToTables(null, select.ResultColumnList.getResultColumn(i), select, baseLevel);
                    }
                }
            }
            else if (select is TInsertSqlStatement && ((TInsertSqlStatement)select).SubQuery != null)
            {
                impactSqlFromStatement(((TInsertSqlStatement)select).SubQuery, baseLevel);
            }
            else if (select is TCreateViewSqlStatement)
            {
                viewName = ((TCreateViewSqlStatement)select).ViewName.ToString();
                impactSqlFromStatement(((TCreateViewSqlStatement)select).Subquery, baseLevel);
            }
            else
            {
                if (select.ResultColumnList != null)
                {
                    for (int i = 0; i < select.ResultColumnList.size(); i++)
                    {
                        linkFieldToTables(null, select.ResultColumnList.getResultColumn(i), select, baseLevel);
                    }
                }
            }
        }

        private void impactSqlFromStatement(TCustomSqlStatement select)
        {
            if (select is TSelectSqlStatement)
            {
                TSelectSqlStatement stmt = (TSelectSqlStatement)select;
                if (stmt.SetOperator != TSelectSqlStatement.setOperator_none)
                {
                    impactSqlFromStatement(stmt.LeftStmt);
                    impactSqlFromStatement(stmt.RightStmt);
                }
                else
                {
                    for (int i = 0; i < select.ResultColumnList.size(); i++)
                    {
                        linkFieldToTables(null, select.ResultColumnList.getResultColumn(i), select, 0);
                    }
                }
            }
            else if (select is TInsertSqlStatement && ((TInsertSqlStatement)select).SubQuery != null)
            {
                impactSqlFromStatement(((TInsertSqlStatement)select).SubQuery);
            }
            else if (select is TCreateViewSqlStatement)
            {
                viewName = ((TCreateViewSqlStatement)select).ViewName.ToString();
                impactSqlFromStatement(((TCreateViewSqlStatement)select).Subquery);
            }
            else if (select.ResultColumnList != null)
            {
                for (int i = 0; i < select.ResultColumnList.size(); i++)
                {
                    linkFieldToTables(null, select.ResultColumnList.getResultColumn(i), select, 0);
                }
            }
            else if (select.Statements != null)
            {
                for (int i = 0; i < select.Statements.size(); i++)
                {
                    impactSqlFromStatement(select.Statements.get(i));
                }
            }
        }

        private bool isPseudocolumn(string column)
        {
            if (string.ReferenceEquals(column, null))
            {
                return false;
            }
            if ("rownum".Equals(column.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            else if ("rowid".Equals(column.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            else if ("nextval".Equals(column.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            else if ("sysdate".Equals(column.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            return false;
        }

        private bool linkFieldToTables(TAlias parentAlias, TResultColumn field, TCustomSqlStatement select, int level)
        {
            if (level == 0)
            {
                accessMap.Clear();
            }
            bool ret = false;
            // all items in select list was represented by a TLzField Objects
            switch (field.Expr.ExpressionType)
            {
                case EExpressionType.simple_object_name_t:
                    TColumn column = attrToColumn(field.Expr, select, ClauseType.select, parentAlias);
                    bool isPseudocolumn = select.dbvendor == EDbVendor.dbvoracle && this.isPseudocolumn(column.columnName);
                    if (level == 0 || parentAlias != null)
                    {
                        TAlias columnAlias = null;
                        if (parentAlias != null)
                        {
                            columnAlias = parentAlias;
                        }
                        else
                        {
                            columnAlias = new TAlias(this);
                            columnAlias.column = removeQuote(field.ToString());
                            columnAlias.columnExpr = field.Expr;
                            columnAlias.alias = removeQuote(field.ToString());
                            columnAlias.location = new Point((int)field.startToken.lineNo, (int)field.startToken.columnNo);
                            if (field.AliasClause != null)
                            {
                                columnAlias.alias = removeQuote(field.AliasClause.ToString());
                                columnAlias.column = removeQuote(field.ToString());
                                columnAlias.columnExpr = field.Expr;
                                TSourceToken startToken = field.AliasClause.AliasName.startToken;
                                columnAlias.location = new Point((int)startToken.lineNo, (int)startToken.columnNo);
                            }
                            aliases.Add(columnAlias);
                        }
                        currentSource = columnAlias.alias;
                        if (!dependMap.ContainsKey(currentSource))
                        {
                            dependMap[currentSource] = new List<TResultEntry>();
                        }

                        if (!simply && parentAlias == null)
                        {
                            if (!columnAlias.alias.Equals(column.OrigName, StringComparison.OrdinalIgnoreCase))
                            {
                                buffer.Append("\r\nSearch " + columnAlias.alias + (level == 0 ? (" <<column_" + (++columnNumber) + ">>") : "") + "\r\n");
                                buffer.Append("--> " + column.OrigName + (!isPseudocolumn && column.tableNames.Count > 1 ? (" <<GUESS>>") : "") + "\r\n");
                            }
                            else
                            {
                                buffer.Append("\r\nSearch " + column.OrigName + (level == 0 ? (" <<column_" + (++columnNumber) + ">>") : "") + (!isPseudocolumn && column.tableNames.Count > 1 ? (" <<GUESS>>") : "") + "\r\n");
                                level -= 1;
                            }
                        }

                    }
                    if (isPseudocolumn)
                    {
                        break;
                    }
                    ret = findColumnInTables(column, select, level + 1, null, null);
                    findColumnsFromClauses(select, level + 2);
                    break;
                case EExpressionType.subquery_t:
                    TAlias alias1 = new TAlias(this);
                    alias1.column = removeQuote(field.ToString());
                    alias1.columnExpr = field.Expr;
                    alias1.alias = removeQuote(field.ToString());
                    alias1.location = new Point((int)field.startToken.lineNo, (int)field.startToken.columnNo);
                    if (field.AliasClause != null)
                    {
                        alias1.alias = removeQuote(field.AliasClause.ToString());
                        TSourceToken startToken = field.AliasClause.AliasName.startToken;
                        alias1.column = removeQuote(field.ToString());
                        alias1.columnExpr = field.Expr;
                        alias1.location = new Point((int)startToken.lineNo, (int)startToken.columnNo);
                    }

                    if (level == 0)
                    {
                        aliases.Add(alias1);
                        if (!simply)
                        {
                            buffer.Append("\r\nSearch " + alias1.alias + (level == 0 ? (" <<column_" + (++columnNumber) + ">>") : "") + "\r\n");
                            // buffer.append( "--> "
                            // + field.getExpr( ).getSubQuery( )
                            // + "\r\n" );
                        }
                    }
                    TSelectSqlStatement stmt = (TSelectSqlStatement)field.Expr.SubQuery;
                    IList<TSelectSqlStatement> stmtList = new List<TSelectSqlStatement>();
                    getSelectSqlStatements(stmt, stmtList);
                    for (int i = 0; i < stmtList.Count; i++)
                    {
                        linkFieldToTables(alias1, stmtList[i].ResultColumnList.getResultColumn(0), stmtList[i], level - 1 < 0 ? 0 : level - 1);
                    }
                    break;
                default:
                    TAlias alias = parentAlias;
                    if (level == 0)
                    {
                        alias = new TAlias(this);

                        if (select is TUpdateSqlStatement)
                        {
                            TExpression expression = field.Expr.LeftOperand;
                            alias.column = removeQuote(expression.ToString());
                            alias.columnExpr = expression;
                            alias.alias = alias.column;
                            alias.location = new Point((int)expression.startToken.lineNo, (int)expression.startToken.columnNo);
                        }
                        else
                        {
                            alias.column = removeQuote(field.ToString());
                            alias.columnExpr = field.Expr;
                            alias.alias = alias.column;
                            alias.location = new Point((int)field.startToken.lineNo, (int)field.startToken.columnNo);

                        }
                        if (alias != null && parentAlias == null)
                        {
                            if (field.AliasClause != null)
                            {
                                alias.alias = removeQuote(field.AliasClause.ToString());
                                alias.column = removeQuote(field.ToString());
                                alias.columnExpr = field.Expr;
                                TSourceToken startToken = field.AliasClause.AliasName.startToken;
                                alias.location = new Point((int)startToken.lineNo, (int)startToken.columnNo);
                            }
                            aliases.Add(alias);
                            if (!simply)
                            {
                                buffer.Append("\r\n" + "Search " + alias.alias + (level == 0 ? (" <<column_" + (++columnNumber) + ">>") : "") + "\r\n");
                            }

                            currentSource = alias.alias;
                            if (!dependMap.ContainsKey(currentSource))
                            {
                                dependMap[currentSource] = new List<TResultEntry>();
                            }
                        }
                    }

                    IList<TColumn> columns = exprToColumn(field.Expr, select, level, true, ClauseType.select, alias);
                    if (columns.Count == 0 && traceView)
                    {
                        TColumn nullColumn = new TColumn(this);
                        nullColumn.expression = field.Expr.ToString();
                        nullColumn.viewName = this.viewName;
                        TTableList tables = select.tables;
                        for (int i = 0; i < tables.size(); i++)
                        {
                            TTable lztable = tables.getTable(i);
                            Table table = TLzTaleToTable(lztable);
                            if (!nullColumn.tableNames.Contains(table.tableName))
                            {
                                nullColumn.tableNames.Add(table.tableName);
                                if (!nullColumn.tableFullNames.Contains(lztable.FullName))
                                {
                                    nullColumn.tableFullNames.Add(lztable.FullName);
                                }
                            }
                        }
                        columns.Add(nullColumn);
                    }
                    if (select is TUpdateSqlStatement)
                    {
                        while (columns.Count > 1)
                        {
                            columns.RemoveAt(columns.Count - 1);
                        }
                    }
                    if (!simply)
                    {
                        foreach (TColumn column1 in columns)
                        {
                            if (column1 == null)
                            {
                                continue;
                            }
                            if (level == 0)
                            {
                                buffer.Append(buildString(" ", level) + "--> " + column1.OrigName + "\r\n");
                            }
                        }
                    }

                    foreach (TColumn column1 in columns)
                    {
                        if (column1 == null)
                        {
                            continue;
                        }

                        if (level == 0)
                        {
                            if (!simply)
                            {
                                buffer.Append("\r\n" + "Search " + column1.OrigName + "\r\n");
                            }
                        }
                        if (!(select is TUpdateSqlStatement))
                        {
                            findColumnInTables(column1, select, level + 1, null, null);
                        }
                        findColumnsFromClauses(select, level + 2);
                    }

                    if (field.Expr.ExpressionType == EExpressionType.function_t)
                    {
                        TFunctionCall func = (TFunctionCall)field.Expr.FunctionCall;
                        // buffer.AppendLine("function name {0}",
                        // func.funcname.AsText);
                        if (func.FunctionName.ToString().Equals("count", StringComparison.OrdinalIgnoreCase) || func.FunctionName.ToString().Equals("sum", StringComparison.OrdinalIgnoreCase) || func.FunctionName.ToString().Equals("row_number", StringComparison.OrdinalIgnoreCase))
                        {
                            if (!simply)
                            {
                                buffer.Append(buildString(" ", level + 1) + "--> aggregate function " + func.ToString() + "\r\n");
                                for (int i = 0; i < select.tables.size(); i++)
                                {
                                    if (select.tables.getTable(i).Subquery == null)
                                    {
                                        buffer.Append(buildString(" ", level + 1) + "--> table " + removeQuote(select.tables.getTable(i).FullNameWithAliasString) + "\r\n");
                                    }
                                    else
                                    {
                                        buffer.Append(buildString(" ", level + 1) + "--> table " + select.tables.getTable(i).ToString() + (select.tables.getTable(i).AliasClause != null ? (" " + select.tables.getTable(i).AliasClause.ToString()) : "") + "\r\n");
                                    }
                                }
                            }
                            // check column in function arguments
                            int argCount = 0;
                            if (func.Args != null)
                            {
                                for (int k = 0; k < func.Args.size(); k++)
                                {
                                    TExpression expr = func.Args.getExpression(k);
                                    if (expr.ToString().Trim().Equals("*"))
                                    {
                                        continue;
                                    }
                                    IList<TColumn> columns1 = exprToColumn(expr, select, level + 1, ClauseType.select, parentAlias);
                                    foreach (TColumn column1 in columns1)
                                    {
                                        findColumnInTables(column1, select, level + 1, null, null);
                                        findColumnsFromClauses(select, level + 2);
                                    }
                                    argCount++;
                                }
                            }

                            if (argCount == 0 && !"ROW_NUMBER".Equals(func.FunctionName.ToString(), StringComparison.OrdinalIgnoreCase))
                            {

                                Tuple<long, long> point = new Tuple<long, long>(func.endToken.lineNo, func.endToken.columnNo);
                                if (func.Args != null && func.Args.size() > 0)
                                {
                                    for (int k = 0; k < func.Args.size(); k++)
                                    {
                                        TExpression expr = func.Args.getExpression(k);
                                        if (expr.ToString().Trim().Equals("*"))
                                        {
                                            point = new Tuple<long, long>(expr.startToken.lineNo, expr.startToken.columnNo);
                                            break;
                                        }
                                    }
                                }
                                if (dependMap.ContainsKey(currentSource))
                                {

                                    if (currentClauseMap.ContainsKey(select))
                                    {
                                        dependMap[currentSource].Add(new TResultEntry(this, select.tables.getTable(0), viewName, "*", (ClauseType)currentClauseMap[select], point));
                                    }
                                    else if (select is TSelectSqlStatement)
                                    {
                                        dependMap[currentSource].Add(new TResultEntry(this, select.tables.getTable(0), viewName, "*", ClauseType.select, point));
                                    }
                                    else
                                    {
                                        dependMap[currentSource].Add(new TResultEntry(this, select.tables.getTable(0), viewName, "*", ClauseType.undefine, point));
                                    }
                                }
                            }

                            if (func.AnalyticFunction != null)
                            {
                                TParseTreeNodeList list = func.AnalyticFunction.PartitionBy_ExprList;
                                findColumnsFromList(select, level + 1, list, ClauseType.select);

                                if (func.AnalyticFunction.OrderBy != null)
                                {
                                    list = func.AnalyticFunction.OrderBy.Items;
                                    findColumnsFromList(select, level + 1, list, ClauseType.select);
                                }
                            }

                            findColumnsFromClauses(select, level + 2);

                        }
                    }
                    break;
            }

            return ret;
        }

        private void getSelectSqlStatements(TSelectSqlStatement select, IList<TSelectSqlStatement> stmtList)
        {
            if (select.SetOperator != TSelectSqlStatement.setOperator_none)
            {
                getSelectSqlStatements(select.LeftStmt, stmtList);
                getSelectSqlStatements(select.RightStmt, stmtList);
            }
            else
            {
                stmtList.Add(select);
            }
        }

        private Table TLzTaleToTable(TTable lztable)
        {
            Table table = new Table(this);
            if (lztable.Subquery == null && lztable.TableName != null)
            {
                table.tableName = removeQuote(getTableName(lztable));
                if (lztable.TableName.ToString().IndexOf(".", StringComparison.Ordinal) > 0)
                {
                    table.prefixName = removeQuote(lztable.TableName.ToString().Substring(0, lztable.FullName.IndexOf('.')));
                }
            }

            if (lztable.AliasClause != null)
            {
                table.tableAlias = removeQuote(lztable.AliasClause.ToString());
            }
            return table;
        }

        private string removeQuote(string @string)
        {
            if (string.ReferenceEquals(@string, null))
            {
                return @string;
            }

            if (@string.IndexOf('.') != -1
                && @string.Length < 128)
            {
                IList<string> splits = parseNames(@string);
                StringBuilder buffer = new StringBuilder();
                for (int i = 0; i < splits.Count; i++)
                {
                    buffer.Append(splits[i]);
                    if (i < splits.Count - 1)
                    {
                        buffer.Append(".");
                    }
                }
                @string = buffer.ToString();
            }
            else
            {
                if (@string.StartsWith("\"", StringComparison.Ordinal) && @string.EndsWith("\"", StringComparison.Ordinal))
                {
                    return @string.Substring(1, (@string.Length - 1) - 1);
                }

                if (@string.StartsWith("[", StringComparison.Ordinal) && @string.EndsWith("]", StringComparison.Ordinal))
                {
                    return @string.Substring(1, (@string.Length - 1) - 1);
                }
            }
            return @string;
        }

        public static IList<string> parseNames(string nameString)
        {
            String name = nameString.Trim();
            List<String> names = new List<String>();
            string[] splits = nameString.ToUpper().Split(new char[] { '.' });
            if ((name.StartsWith("\"") && name.EndsWith("\""))
                    || (name.StartsWith("[") && name.EndsWith("]")))
            {
                for (int i = 0; i < splits.Length; i++)
                {
                    string split = splits[i].Trim();
                    if (split.StartsWith("[", StringComparison.Ordinal) && !split.EndsWith("]", StringComparison.Ordinal))
                    {
                        StringBuilder buffer = new StringBuilder();
                        buffer.Append(splits[i]);
                        while (!(split = splits[++i].Trim()).EndsWith("]", StringComparison.Ordinal))
                        {
                            buffer.Append(".");
                            buffer.Append(splits[i]);
                        }

                        buffer.Append(".");
                        buffer.Append(splits[i]);

                        names.Add(buffer.ToString());
                        continue;
                    }
                    if (split.StartsWith("\"", StringComparison.Ordinal) && !split.EndsWith("\"", StringComparison.Ordinal))
                    {
                        StringBuilder buffer = new StringBuilder();
                        buffer.Append(splits[i]);
                        while (!(split = splits[++i].Trim()).EndsWith("\"", StringComparison.Ordinal))
                        {
                            buffer.Append(".");
                            buffer.Append(splits[i]);
                        }

                        buffer.Append(".");
                        buffer.Append(splits[i]);

                        names.Add(buffer.ToString());
                        continue;
                    }
                    names.Add(splits[i]);
                }
            }
            else
            {
                names.AddRange(splits);
            }
            return names;
        }
    }

}]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[utils\MyUtil.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GetCTEs.utils
{
    public class MyUtil
    {
        public static string ConvertListString_To_String(string sept, List<string> lstStr)
        {
            string ret = string.Join(sept, lstStr);
            return ret;
        }

        public static string ConvertDictStringList_To_String(string sept, Dictionary<string, List<string>> dict_str_list)
        {
            string ret = "";
            var lststr = dict_str_list.Select(kvp => kvp.Value).ToList();
            foreach (var lst in lststr)
            {
                ret = string.Join(sept, lst);
            }

            return ret;
        }

        public static void Fillin_richTextBox(RichTextBox richTextBox1, Dictionary<string, List<string>> CTEcolumns_0)
        {
            richTextBox1.Clear();
            for (int i = 0; i < CTEcolumns_0.Count; i++)
            {
                //richTextBox1.SelectionLength = 0;
                //richTextBox1.SelectionStart = richTextBox1.TextLength;
                string key = CTEcolumns_0.Keys.ElementAt(i);
                var values = CTEcolumns_0.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);
                string display = key + ", columns (" + CTECols + ")";
                richTextBox1.AppendText(display);
                richTextBox1.AppendText(Environment.NewLine);
                richTextBox1.SelectAll();
                richTextBox1.SelectionFont = new Font("Verdana", 10, FontStyle.Bold);
                richTextBox1.SelectionColor = Color.Red;
            }
        }

        public static void Fillin_richTextBox(RichTextBox richTextBox1, Dictionary<string, List<string>> CTEcolumns_0, string errorMsg)
        {
            richTextBox1.Clear();
            if (CTEcolumns_0.Count == 0 || !string.IsNullOrEmpty(errorMsg))
            {
                richTextBox1.AppendText(errorMsg);
            }
            for (int i = 0; i < CTEcolumns_0.Count; i++)
            {
                //richTextBox1.SelectionLength = 0;
                //richTextBox1.SelectionStart = richTextBox1.TextLength;
                string key = CTEcolumns_0.Keys.ElementAt(i);
                var values = CTEcolumns_0.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);
                string display = key + ", columns (" + CTECols + ")";
                richTextBox1.AppendText(display);
                richTextBox1.AppendText(Environment.NewLine);
                richTextBox1.SelectAll();
                richTextBox1.SelectionFont = new Font("Verdana", 10, FontStyle.Bold);
                richTextBox1.SelectionColor = Color.Red;
            }
        }


        public static void Fillin_DataGridView(DataGridView dgv_CTECols, Dictionary<string, List<string>> CTEcolumns_0, params string[] ColName)
        {
            Clear_DataGridView(dgv_CTECols); //first clear contents

            dgv_CTECols.ColumnCount = ColName.Length;
            dgv_CTECols.ColumnHeadersVisible = true;
            // Set the column header style.
            DataGridViewCellStyle columnHeaderStyle = new DataGridViewCellStyle();
            columnHeaderStyle.BackColor = Color.Beige;
            columnHeaderStyle.Font = new Font("Verdana", 10, FontStyle.Bold);
            dgv_CTECols.ColumnHeadersDefaultCellStyle = columnHeaderStyle;
            //dgv_CTECols.Columns[0].Name = "CTE name";
            //dgv_CTECols.Columns[1].Name = "CTE columns";
            for (int i = 0; i < ColName.Length; i++)
            {
                dgv_CTECols.Columns[i].Name = ColName[i];
            }
            for (int i = 0; i < CTEcolumns_0.Count; i++)
            {
                string key = CTEcolumns_0.Keys.ElementAt(i);
                var values = CTEcolumns_0.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);
                DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                row.Cells[0].Value = key;
                row.Cells[1].Value = CTECols;
                dgv_CTECols.Rows.Add(row);
            }
            dgv_CTECols.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells; //auto size columns
        }

        #region not used
        //public static void Fillin_DataGridView(DataGridView dgv_CTECols, Dictionary<string, List<string>> CTEcolumns_0, string errorMsg, params string[] ColName)
        //{
        //    Clear_DataGridView(dgv_CTECols); //first clear contents

        //    dgv_CTECols.ColumnCount = ColName.Length;
        //    dgv_CTECols.ColumnHeadersVisible = true;
        //    // Set the column header style.
        //    DataGridViewCellStyle columnHeaderStyle = new DataGridViewCellStyle();
        //    columnHeaderStyle.BackColor = Color.Beige;
        //    columnHeaderStyle.Font = new Font("Verdana", 10, FontStyle.Bold);
        //    dgv_CTECols.ColumnHeadersDefaultCellStyle = columnHeaderStyle;
        //    //dgv_CTECols.Columns[0].Name = "CTE name";
        //    //dgv_CTECols.Columns[1].Name = "CTE columns";
        //    for (int i = 0; i < ColName.Length; i++)
        //    {
        //        dgv_CTECols.Columns[i].Name = ColName[i];
        //    }

        //    if(CTEcolumns_0.Count==0 || !string.IsNullOrEmpty(errorMsg))
        //    {
        //        dgv_CTECols.Rows[0].Cells[0].Value = errorMsg;
        //    }
        //    for (int i = 0; i < CTEcolumns_0.Count; i++)
        //    {
        //        string key = CTEcolumns_0.Keys.ElementAt(i);
        //        var values = CTEcolumns_0.Values.ElementAt(i);
        //        var CTECols = MyUtil.ConvertListString_To_String(",", values);
        //        DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
        //        row.Cells[0].Value = key;
        //        row.Cells[1].Value = CTECols;
        //        dgv_CTECols.Rows.Add(row);
        //    }
        //    dgv_CTECols.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells; //auto size columns
        //}

        //public static void Fillin_DataGridView(DataGridView dgv_CTECols, Dictionary<string, List<string>> CTEcolumns_0, List<string> endquery_nonCTEs = null, params string[] ColName)
        //{
        //    Clear_DataGridView(dgv_CTECols); //first clear contents

        //    dgv_CTECols.ColumnCount = ColName.Length;
        //    dgv_CTECols.ColumnHeadersVisible = true;
        //    // Set the column header style.
        //    DataGridViewCellStyle columnHeaderStyle = new DataGridViewCellStyle();
        //    columnHeaderStyle.BackColor = Color.Beige;
        //    columnHeaderStyle.Font = new Font("Verdana", 10, FontStyle.Bold);
        //    dgv_CTECols.ColumnHeadersDefaultCellStyle = columnHeaderStyle;
        //    //dgv_CTECols.Columns[0].Name = "CTE name";
        //    //dgv_CTECols.Columns[1].Name = "CTE columns";
        //    for (int i = 0; i < ColName.Length; i++)
        //    {
        //        dgv_CTECols.Columns[i].Name = ColName[i];
        //    }
        //    for (int i = 0; i < CTEcolumns_0.Count; i++)
        //    {
        //        string key = CTEcolumns_0.Keys.ElementAt(i);
        //        var values = CTEcolumns_0.Values.ElementAt(i);
        //        var CTECols = MyUtil.ConvertListString_To_String(",", values);
        //        DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
        //        row.Cells[0].Value = key;
        //        row.Cells[1].Value = CTECols;
        //        dgv_CTECols.Rows.Add(row);
        //    }

        //    if (endquery_nonCTEs.Count != 0)
        //    {
        //        for (int i = 0; i < endquery_nonCTEs.Count; i++)
        //        {
        //            string key = "endquery_nonCTE";
        //            //var values = endquery_nonCTEs[i];
        //            var CTECols = MyUtil.ConvertListString_To_String(",", endquery_nonCTEs);
        //            DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
        //            row.Cells[0].Value = key;
        //            row.Cells[1].Value = CTECols;
        //            dgv_CTECols.Rows.Add(row);
        //        }
        //    }
        //}
        #endregion not used

        public static void Fillin_DataGridView(DataGridView dgv_CTECols, Dictionary<string, List<string>> CTEcolumns_0, string errMsg = "", params string[] ColName)
        {
            Clear_DataGridView(dgv_CTECols); //first clear contents

            dgv_CTECols.ColumnCount = ColName.Length;
            dgv_CTECols.ColumnHeadersVisible = true;
            // Set the column header style.
            DataGridViewCellStyle columnHeaderStyle = new DataGridViewCellStyle();
            columnHeaderStyle.BackColor = Color.Beige;
            columnHeaderStyle.Font = new Font("Verdana", 10, FontStyle.Bold);
            dgv_CTECols.ColumnHeadersDefaultCellStyle = columnHeaderStyle;
            //dgv_CTECols.Columns[0].Name = "CTE name";
            //dgv_CTECols.Columns[1].Name = "CTE columns";
            for (int i = 0; i < ColName.Length; i++)
            {
                dgv_CTECols.Columns[i].Name = ColName[i];
            }
            if (CTEcolumns_0.Count != 0)
            {
                for (int i = 0; i < CTEcolumns_0.Count; i++)
                {
                    string key = CTEcolumns_0.Keys.ElementAt(i);
                    var values = CTEcolumns_0.Values.ElementAt(i);
                    var CTECols = MyUtil.ConvertListString_To_String(",", values);
                    DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                    row.Cells[0].Value = key;
                    row.Cells[1].Value = CTECols;
                    dgv_CTECols.Rows.Add(row);
                }
            }
            else
            {
                DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                row.Cells[0].Value = errMsg;
                dgv_CTECols.Rows.Add(row);
            }
            dgv_CTECols.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells; //auto size columns
        }

        public static void Fillin_DataGridView(DataGridView dgv_CTECols, Dictionary<string, List<string>> CTEcolumns_0, string errMsg = "", List<string> endquery_nonCTEs = null, params string[] ColName)
        {
            Clear_DataGridView(dgv_CTECols); //first clear contents

            dgv_CTECols.ColumnCount = ColName.Length;
            dgv_CTECols.ColumnHeadersVisible = true;
            // Set the column header style.
            DataGridViewCellStyle columnHeaderStyle = new DataGridViewCellStyle();
            columnHeaderStyle.BackColor = Color.Beige;
            columnHeaderStyle.Font = new Font("Verdana", 10, FontStyle.Bold);
            dgv_CTECols.ColumnHeadersDefaultCellStyle = columnHeaderStyle;
            //dgv_CTECols.Columns[0].Name = "CTE name";
            //dgv_CTECols.Columns[1].Name = "CTE columns";
            for (int i = 0; i < ColName.Length; i++)
            {
                dgv_CTECols.Columns[i].Name = ColName[i];
            }
            for (int i = 0; i < CTEcolumns_0.Count; i++)
            {
                string key = CTEcolumns_0.Keys.ElementAt(i);
                var values = CTEcolumns_0.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);
                DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                row.Cells[0].Value = key;
                row.Cells[1].Value = CTECols;
                dgv_CTECols.Rows.Add(row);
            }

            if (errMsg != "")
            {
                string key = errMsg;
                var CTECols = "";
                DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                row.Cells[0].Value = key;
                row.Cells[1].Value = CTECols;
                dgv_CTECols.Rows.Add(row);
            }

            if (endquery_nonCTEs.Count != 0)
            {
                for (int i = 0; i < endquery_nonCTEs.Count; i++)
                {
                    string key = "endquery_nonCTE";
                    //var values = endquery_nonCTEs[i];
                    var CTECols = MyUtil.ConvertListString_To_String(",", endquery_nonCTEs);
                    DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                    row.Cells[0].Value = key;
                    row.Cells[1].Value = CTECols;
                    dgv_CTECols.Rows.Add(row);
                }
            }

            dgv_CTECols.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells; //auto size columns
        }


        public static void FormatCTEs(Dictionary<string, List<string>> CTEcolumns, string errorMsg, ref string formatedCTEs)
        {
            if (CTEcolumns.Count == 0 || !string.IsNullOrEmpty(errorMsg))
            {
                formatedCTEs = errorMsg;
            }
            for (int i = 0; i < CTEcolumns.Count; i++)
            {
                string key = CTEcolumns.Keys.ElementAt(i);
                var values = CTEcolumns.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);

                if (i < CTEcolumns.Count - 1)
                {
                    formatedCTEs += key + ", columns (" + CTECols + ")" + "; ";
                }

                else if (i == CTEcolumns.Count - 1)
                {
                    formatedCTEs += key + ", columns (" + CTECols + ")";
                }
            }
        }

        public static void FormatCTEs(Dictionary<string, List<string>> CTEcolumns, List<string> endQuery_nonCTECols, string errMsg, ref string formatedCTEs)
        {
            string display = "";

            //if (CTEcolumns.Count == 0 || !string.IsNullOrEmpty(errorMsg))
            //{
            //    formatedCTEs = errorMsg;
            //}
            if (CTEcolumns.Count != 0)
            {
                for (int i = 0; i < CTEcolumns.Count; i++)
                {
                    string key = CTEcolumns.Keys.ElementAt(i);
                    var values = CTEcolumns.Values.ElementAt(i);
                    var CTECols = MyUtil.ConvertListString_To_String(",", values);
                    var tmpdisplay = key + ", columns (" + CTECols + ")";

                    if (i < CTEcolumns.Count - 1)
                    {
                        display += tmpdisplay + "; ";
                    }

                    else if (i == CTEcolumns.Count - 1)
                    {
                        display += tmpdisplay;
                    }
                }
            }
            if (errMsg != "")
            {
                display += errMsg;
            }

            if (endQuery_nonCTECols.Count != 0)
            {
                string tmp_endQuery_nonCTECols = ConvertListString_To_String(",", endQuery_nonCTECols);
                if(display!="")
                    display += " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
                else
                    display += "end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
            }

            formatedCTEs = display;
        }

        public static void FormatCTEs(Dictionary<string, List<string>> CTEcolumns, string errorMsg, ref string formatedCTEs, List<string> endQuery_nonCTECols)
        {
            if (CTEcolumns.Count == 0 || !string.IsNullOrEmpty(errorMsg))
            {
                formatedCTEs = errorMsg;
            }
            for (int i = 0; i < CTEcolumns.Count; i++)
            {
                string key = CTEcolumns.Keys.ElementAt(i);
                var values = CTEcolumns.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);
                var tmpdisplay = key + ", columns (" + CTECols + ")";

                if (i < CTEcolumns.Count - 1)
                {
                    formatedCTEs += tmpdisplay + "; ";
                }

                else if (i == CTEcolumns.Count - 1)
                {
                    formatedCTEs += tmpdisplay;
                }
            }

            string tmp_endQuery_nonCTECols = ConvertListString_To_String(",", endQuery_nonCTECols);
            formatedCTEs += " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
        }
        public static void Fillin_dgv_GetCTEs(DataGridView dgv_GetCTEs, Dictionary<string, List<string>> CTEcolumns, int idx)
        {
            if (CTEcolumns.Count != 0)
            {
                for (int i = 0; i < CTEcolumns.Count; i++)
                {
                    string key = CTEcolumns.Keys.ElementAt(i);
                    var values = CTEcolumns.Values.ElementAt(i);
                    var CTECols = MyUtil.ConvertListString_To_String(",", values);
                    string display = key + ", columns (" + CTECols + ")";
                    //dgv_GetCTEs[1, idx].Value = display;

                    if (i < CTEcolumns.Count - 1)
                    {
                        dgv_GetCTEs[1, idx].Value += display + "; ";
                    }

                    else if (i == CTEcolumns.Count - 1)
                    {
                        dgv_GetCTEs[1, idx].Value += display;
                    }
                }
            }
        }

        public static void Fillin_dgv_GetCTEs(DataGridView dgv_GetCTEs, Dictionary<string, List<string>> CTEcolumns, List<string> endQuery_nonCTECols, int idx)
        {
            string display = "";

            string tmp_endQuery_nonCTECols = ConvertListString_To_String(",", endQuery_nonCTECols);

            if (CTEcolumns.Count != 0)
            {
                for (int i = 0; i < CTEcolumns.Count; i++)
                {
                    string key = CTEcolumns.Keys.ElementAt(i);
                    var values = CTEcolumns.Values.ElementAt(i);
                    var CTECols = MyUtil.ConvertListString_To_String(",", values);
                    var tmpdisplay = key + ", columns (" + CTECols + ")";
                    //display = key + ", columns (" + CTECols + ")" + " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
                    //dgv_GetCTEs[1, idx].Value = display;

                    if (i < CTEcolumns.Count - 1)
                    {
                        //dgv_GetCTEs[1, idx].Value += display + "; ";
                        display += tmpdisplay + "; ";
                    }

                    else if (i == CTEcolumns.Count - 1)
                    {
                        //dgv_GetCTEs[1, idx].Value += display;
                        display += tmpdisplay;
                    }
                }
                display += " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
                dgv_GetCTEs[1, idx].Value = display;
            }
        }

        public static void Fillin_dgv_GetCTEs(DataGridView dgv_GetCTEs, Dictionary<string, List<string>> CTEcolumns, List<string> endQuery_nonCTECols, int idx, string errMsg = "")
        {
            string display = "";

            if (CTEcolumns.Count != 0)
            {
                for (int i = 0; i < CTEcolumns.Count; i++)
                {
                    string key = CTEcolumns.Keys.ElementAt(i);
                    var values = CTEcolumns.Values.ElementAt(i);
                    var CTECols = MyUtil.ConvertListString_To_String(",", values);
                    var tmpdisplay = key + ", columns (" + CTECols + ")";
                    //display = key + ", columns (" + CTECols + ")" + " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
                    //dgv_GetCTEs[1, idx].Value = display;

                    if (i < CTEcolumns.Count - 1)
                    {
                        //dgv_GetCTEs[1, idx].Value += display + "; ";
                        display += tmpdisplay + "; ";
                    }

                    else if (i == CTEcolumns.Count - 1)
                    {
                        //dgv_GetCTEs[1, idx].Value += display;
                        display += tmpdisplay;
                    }
                }
            }

            if (errMsg != "")
            {
                display += errMsg;
            }

            if (endQuery_nonCTECols.Count != 0)
            {
                string tmp_endQuery_nonCTECols = ConvertListString_To_String(",", endQuery_nonCTECols);
                display += " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
            }

            dgv_GetCTEs[1, idx].Value = display;
        }


        public static void Clear_DataGridView(DataGridView dgv)
        {
            dgv.DataSource = null;
            dgv.Rows.Clear();
            dgv.Refresh();
        }

        public static string ReplaceMultipleSpacesToSingleSpace(string strMultipleSpaces)
        {
            return Regex.Replace(strMultipleSpaces, @"\s+", " ", RegexOptions.Multiline);
        }

        /// <summary>
        /// Default KeyValuePair can't change value (get only). 
        /// where clause is used to specify constraints, such that the type parameter T implements the IEquatable interface
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <param name="list"></param>
        /// <param name="item"></param>
        public static void addOrReplaceKVP<T, U>(List<KeyValuePair<T, U>> list, KeyValuePair<T, U> item) where T : IEquatable<T>
        {
            var target_idx = list.FindIndex(n => n.Key.Equals(item.Key));
            if (target_idx != -1)
            {
                list[target_idx] = item;
            }
            else
            {
                list.Add(item);
            }
        }

        public static void ChangeKVPValue<T, U>(Dictionary<T, U> kvp, T theKey, U value)
        {
            //var removeIndex = kvp.FindIndex(kp => kp.Key == "fahrzeugA");
            //kvp.RemoveAt(removeIndex);
            //tempList.Add(new KeyValuePair<string, string>("fahrzeugA", "s"));
            kvp[theKey] = value;
        }

        public static void MergeDictionary(IDictionary InDict,  IDictionary OutDict)
        {
            foreach (object key in InDict.Keys)
            {
                if (!OutDict.Contains(key))
                    OutDict.Add(key, InDict[key]);
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0914537a7993438d8447a617ce441b8a.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[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
FxEZe1gAAASiJRhyhxAAcKIlGREboiUacpkQAHCiJRsRGi0HcuEAAHArEXKdEABwERpymRAAcCg7
AAAKoiUccq0QAHCiKLMAAAoTHBEFERxvRgAACm96AQAKLRARBREcb0YAAAoRHG97AQAKERl7WQAA
BDmxAAAAERl7WQAABG9IAAAKb/gAAAoWPpoAAAARBhEcb0YAAApvegEACi0XEQYRHG9GAAAKERl7
WQAABG97AQAKK3MRBhEcb0YAAApvfAEAChMdcsUQAHARGXtZAAAEKH0BAApyzxAAcCg7AAAKF3Ms
AAAKcjACAHARHXIwAgBwKDsAAApvLQAACm9+AQAKLRURHXIJEABwERl7WQAABCg7AAAKEx0RBhEc
b0YAAAoRHW97AQAKERdvywAACjo6/f//3gwRFywHERdvkQAACtwRFG/LAAAKOtv8///eDBEULAcR
FG+RAAAK3BEFb38BAApvgAEACow4AAAbEwgrUREFEQhvKAEACm98AQAKEx4Cex4AAAQRHm9sAAAK
JhEGER5vRgAACm98AQAKEx8RHy0HcuEAAHATHwJ7HgAABBEfcmkMAHAotAAACm9sAAAKJhEIb8sA
AAotpjiNBwAAAnsoAAAEOYIHAAACeyUAAAQ63wEAAAJ7HQAABG9vAQAKExQ4sAEAABEUb3ABAAoT
IAJ7HgAABBEge1QAAARy2RAAcCi0AAAKb2wAAAomc14AAAoTIQJ7IwAABBEge1QAAARvLAEACjn+
AAAAAnsjAAAEESB7VAAABG8tAQAKb3EBAAoTFzjGAAAAERdvcgEAChMjESN7ZwAABDmxAAAAESN7
ZwAABHtaAAAEOaAAAAAUEyQCeyYAAAQsDREje2MAAAQaQIgAAAARI3tlAAAEbxQBAAosenIXDQBw
ESN7ZAAABCgjAQAKLCkRI3tlAAAEbxQBAAosWQIRI3tlAAAEbxQBAApv5QAACiiUAAAGEyQrKgIR
I3tlAAAEbxQBAApyuwAAcBEje2QAAAQoOwAACm/lAAAKKJQAAAYTJBEhESRvEgEACi0JESERJG8T
AQAKERdvywAACjou////3gwRFywHERdvkQAACtwRIXPNAAAKEyIWEyUrSRElESFvMQEAChdZLyEC
ex4AAAQRIhElbzABAApyCRAAcCi0AAAKb2wAAAomKxUCex4AAAQRIhElbzABAApvbAAACiYRJRdY
EyURJREibzEBAAoyrAJ7HgAABG9qAQAKJhEUb8sAAAo6RP7//92kBQAAERQsBxEUb5EAAArcAnsd
AAAEb28BAAoTFDhsBQAAERRvcAEAChMmcvUQAHAoZgEACnNnAQAKEycRJntUAAAEESZ7VQAABG8j
AQAKLR0RJ3IPEQBwKGYBAAoRJntUAAAEc4EBAApvaAEAChEnchsRAHAoZgEAChEmfFYAAAQoggEA
Cox1AAABcjACAHARJnxWAAAEKIMBAAqMdQAAASi3AAAKc4EBAApvaAEAChEncjERAHAoZgEAChEm
e1UAAARzgQEACm9oAQAKBxEnb2gBAApzhAEAChMoAnsjAAAEESZ7VAAABG8sAQAKOZsEAAACeyMA
AAQRJntUAAAEby0BAApvcQEAChMXOGACAAARF29yAQAKEyoRKntnAAAEOUsCAAARKntnAAAEe1oA
AAQ5OgIAAAJ7JgAABCwNESp7YwAABBpAJQIAABEqe2UAAARvFAEACjkUAgAAFBMrchcNAHARKntk
AAAEKCMBAAosGwIRKntlAAAEbxQBAApv5QAACiiUAAAGEysrLwIRKntlAAAEbxQBAApv5QAACnK7
AABwESp7ZAAABCg7AAAKb+UAAAoolAAABhMrFBMsESgRK2+FAQAKOacAAAARKBErb4YBAAoTLBEs
e2kAAAQRKntjAAAEb4cBAAotExEse2kAAAQRKntjAAAEb4gBAAoRKntmAAAEOWQBAAARLHttAAAE
ESp7YwAABG+JAQAKLRgRLHttAAAEESp7YwAABHOKAQAKb4sBAAoRLHttAAAEESp7YwAABG+MAQAK
Ey0RLREqe2YAAARvjQEACjoPAQAAES0RKntmAAAEb44BAAo4/AAAAAJzvQAABhMsESgRKxEsb48B
AAoRLAIRKntlAAAEb0QAAApvRQAACiiUAAAGfWwAAAQRLAIRKntlAAAEb0AAAAoolAAABn1rAAAE
chcNAHARKntkAAAEKCMBAAotDhEsESp7ZAAABH1qAAAEESx7aQAABBEqe2MAAARvhwEACi0TESx7
aQAABBEqe2MAAARviAEAChEqe2YAAAQsYBEse20AAAQRKntjAAAEb4kBAAotGBEse20AAAQRKntj
AAAEc4oBAApviwEAChEse20AAAQRKntjAAAEb4wBAAoTLhEuESp7ZgAABG+NAQAKLQ4RLhEqe2YA
AARvjgEAChEXb8sAAAo6lP3//94MERcsBxEXb5EAAArcEShvkAEACm+RAQAKjD8AABsTKTjfAQAA
ESgRKW8oAQAKb4YBAAoTLxEve2kAAARvkgEAChY+vQEAABYTMDiiAQAAES97aQAABBEwb5MBAAoT
MXI7EQBwKGYBAApzZwEAChMyc2oAAAoTMxExRQgAAAARAAAAXAAAAD4AAAAvAAAATQAAACAAAABp
AAAAAgAAACtnETNyVREAcG9sAAAKJitYETNyYREAcG9sAAAKJitJETNydxEAcG9sAAAKJis6ETNy
jREAcG9sAAAKJisrETNynxEAcG9sAAAKJiscETNyqREAcG9sAAAKJisNETNytxEAcG9sAAAKJhEz
bzEAAApv+AAACiwdETJyyREAcChmAQAKETNvMQAACnOBAQAKb2gBAApzagAAChM0AhEvETERNCiN
AAAGETRvMQAACm/4AAAKLB0RMnIbEQBwKGYBAAoRNG8xAAAKc4EBAApvaAEAChEve2oAAAQsHREy
cjERAHAoZgEAChEve2oAAARzgQEACm9oAQAKES97awAABCwdETJy1xEAcChmAQAKES97awAABHOB
AQAKb2gBAAoRL3tsAAAELB0RMnLrEQBwKGYBAAoRL3tsAAAEc4EBAApvaAEAChEnETJvaAEAChEw
F1gTMBEwES97aQAABG+SAQAKP0v+//8RKW/LAAAKOhX+//8RFG/LAAAKOoj6///eDBEULAcRFG+R
AAAK3AkXWA0JAnstAAAEbzUAAApvUgAACj+L8f//BixYc2oAAAoTNRE1c74AAAYTNgYRNhZvlAEA
Ct4METYsBxE2b5EAAArcAnseAAAEETVvMQAACm9IAAAKb2wAAAom3hclbzEAAAooQwAACm/xAAAK
KPIAAAreABcqAAAAQcQAAAIAAAACBAAAzQIAAM8GAAAMAAAAAAAAAAIAAAC9AwAALAMAAOkGAAAM
AAAAAAAAAAIAAADuBwAA2QAAAMcIAAAMAAAAAAAAAAIAAACMBwAAxgEAAFIJAAAMAAAAAAAAAAIA
AABaCgAAcwIAAM0MAAAMAAAAAAAAAAIAAABrCQAAfwUAAOoOAAAMAAAAAAAAAAIAAAAjDwAACwAA
AC4PAAAMAAAAAAAAAAAAAAATDwAAQQAAAFQPAAAXAAAAQQAAARMwAwBfAAAAKwAAEQNvIAEACiwb
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
BgA2DwEXBgAXDwEXBgD5DwEXBgCKDwEXBgCjDwEXBgDjDgEXBgD+DvkQCgC+D1MLDgBVG2obBgBV
AaMEBgB9KQEXBgDVInoUBgAIIHoUDgBFJVUEDgAZJGobDgDRB68eDgBdCq8eDgD+G2obBgCaGHoU
BgD7AVwpBgBGGu4nBgBnDiweCgCUGlMLEgB2GlMLCgBYGVMLEgAsFVMLCgDlJFMLFgBWAAQbBgCC
DvodBgCsGkweBgDVGOwWGgA1DrwSGgCzDrwSGgCmDNcWBgDUAaMEPwBlHAAAHgCzKLAgHgA7KLAg
BgDlD3oUHgC8CLAgHgB4KLAgBgASAXoUBgDFAaMEBgCgKYUhBgBWHIUhBgAtCHoUBgCmAXoUBgBT
DwEXGgDoAKMEBgCtAXoUGgBPAaMEowDCFwAABgBHAaMEDgDKDGobIgCeJPoZIgDxI/oZBgCvGyQD
BgDMGCQDBgBkGCQDBgBYGCQDDgAXFq8eDgBmB68eDgDXFa8eBgAuGiQDBgD5AHoUDgC1Ja8eDgCl
Jq8eDgAtJNgjBgA5AaMEDgATB2obDgDyKK8eDgARFa8eDgAFJNgjDgBnJq8e5wBlHAAADgA9FK8e
BgCUGHoUDgCiJa8eIgC6FvoZDgBVJNgjBgCiGyQD4wBlHAAADgC+Aq8eDgDKJa8eDgCQJa8eDgDF
C2obDgCyFGobDgAgE68eBgCUFHoUDgCNHK8eDgCpHK8eDgD0Ja8eJgAKJTISBgDwEO4nBgD1FHoU
BgDSGnoUBgAhEnoUBgB+EiQDDgBDKlUEDgDSCMUgDgAkGMUgDgA6GMUgDgBGGMUgDgAyKs4bGgCi
KFwhGgDDIVwhGgBRElwhGgCYF1whGgDwGVwhGgCeDFwhDgBFJ2obBgCIAXoUDgAHDGobBgCMCHoU
BgCAJXoUBgCBFFwpBgBHEHoUBgB6GHoUBgCrGHoUKgABACwbKgAaACwbKgA9ACwbBgA+DHoUBgBa
CHoUBgAEAaMELgAiCAoaHgC+DLAgowAfFwAABgCSJHoUJgAmJTISJgDeCDISJgBQHDISHgBKF7Ag
HgD1FbAgHgCoF7AgHgArBrAgHgAvF7AgHgBnE7AgHgBGB7AgHgDPE7AgBgAfAXoUBgATF4UhBgAh
CIUhBgCUCHoUDgBKDWobBgC8GyQDDgCXDa8eDgB6Da8eBgA7GiQDBgAcGnoUBgDhGCQDBgArAaME
DgBZFK8eDgACDa8eDgCuEq8eDgD1Da8eDgCMJq8eDgAfJq8eDgAHFK8eDgDSKK8eDgBWJq8eIgA+
CfoZIgDmGvoZDgCsDa8eDgAtJq8eDgAdFK8eIgBcDvoZIgCkIfoZBgCwIXoUBgD1AXoUDgBBJNgj
DgDMJq8eDgDfF68eDgD3E68eDgDoC2obDgCoJK8eDgDEEK8eDgBVDa8eDgAjFq8eAAAAAAwCAAAA
AAEAAQABABAA6hQAABQAAQABAAEAEABbGgAAcQAFAA0AAQAQAGgaAABxAAUAFAABABAAxyQAAIEA
BQAcAAEAEACYIQAARQAJACQAAQAQADsfAABFAAoAJgAAABAAUx7XHkUACwAnAAABEAD2H9cenQAN
ACsAAQAQAPASJSBFAA4ALgABABAAhyB2IEUADgBBAAEAEADsA3YgRQAOAEIAAQAQAJcDdiBFABIA
QwABABAA8wJ2IEUAFABEAAEAEACkGPcSRQAaAEUAAQAQALUB9xJFABoASAABABAAYCMyIUUAHABS
AAEAEACUIqEiRQAcAFUAAgAQADkZAABFADAAlgACABAALhkAAEUANACfAAMhEACfBAAARQA6AKwA
AwEQAI4BAABFADwArwACAQAArwsAAHkBPQCxAAUAEAC8HAAARQBGALEABQAQABsIAABFAE8AtQAF
ABAApR0AAEUAUwC2AAIAEAAkFQAARQBYALcABQAQAFIqAABFAGIAugAFABAANxUAAEUAaAC9AAUA
EACeGwAAWQFuAL4AAyEQAJ8EAABFAG4AwAABAHQbgw4WAO0lhw4WAOYljw4WAJQDlw4GAJghnw4G
ADsfow4GAGgapw4BAMoEqw4BANUkrg4BANUkrg4RAJkUsw4RAI4MuA4RAOgGvQ4GAC8Cqw4GAEMC
qw4GALQCwQ4GAAoDwQ4GADcCxA4GAKoCyw4GAC8Cqw4GAEMCqw4GALQCwQ4GAAoDwQ4GADcCqw4G
AKoCyw4BAJUC2AQBANICKwUBAGcX0g4BAJYf2w4BAKEa5A4BAHcZ6A4BAJIZ8Q4BAGYZ/w4BACAH
wQ4BAE4ZCQ8BAMcbFw8BANUCXgABANwSXgABAEgoXgABAJkpXgABACEaqw4BACkqHA8BAI4KwQ4B
ABwZXgABAHQbgw4BAOgDIA8BAHIDlw4BAK4FwQ4BAAQGwQ4BAAEFwQ4BABgFwQ4BAHEFwQ4BAJAF
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
hhiAHAYAGQE6lQAAAACRGIYcyw8ZAbcqAAAAAIYYgBwGABkBRpUAAAAAgwB4AF4UGQG3KgAAAACG
GIAcBgAaAVCVAAAAAIMAvgA/BBoBgJUAAAAAhhiAHHEUGwHYlQAAAADDA+8mixQkARSXAAAAAMYB
LiOUFCYBDJsAAAAAxgFSFQYAKAEamwAAAACGGIAcnBQoASmbAAAAAIYYgBycFCkBOJsAAAAAgxiA
HJwUKgF1mwAAAADGAfUJrgErAZKbAAAAAMYJwQk/ACwBvJsAAAAAhhiAHKIULAEsnAAAAACGGIAc
tRQyAXycAAAAAMMD2wnJFDgB85wAAAAAhhiAHJwUOgEYnQAAAACGGIAcMQ47ASGdAAAAAMYI7BDR
FDwBKJ0AAAAAkRiGHMsPPAG3KgAAAACGGIAcBgA8ATSdAAAAAIMAqgCuATwBAAABAFQaAAACABkg
AAABAGEbAAABAI8jAAABAPUkAAACAI8jAAABAOwjAAABAOwjAAACAE0dAAABAIQoAAABAGISAAAC
ANMnAAABAJoaAAACANEfAAADAJwZAAABAJoaAAACANEfAAADAJwZAAABAG8QAAABAG8QAAABAG8Q
AAABAG8QAAABAIMCAAACAHcKAAADAJoaAAAEAJwZAAABAEciAAACAEMdAAADAPUhAAAEAJwZAAAB
AJoaAAABAIQoAAABAOskAAABAOskAAABAG8QAAABAE0lAAACADcdAAABAE0lAAACAHYnAAABAHAB
AAACANQAAAABAHABAAACANQAAAADAEESAAABAD0gAAACANQAAAADAAEKAAABAD0gAAACANQAEBAD
AEoSAAAEAAEKAAABAD0gAAACANQAEBADAEoSEBAEAFodAAAFAAEKAAABACchAAACAEESAAADAE0d
AAABACchAAACAEkgAAADAEoSAAAEAE0dAAABACchAAACAEESAAADAE0dAAAEAEkgAAABAH0dAAAC
ACchAAADAJQoAAABAH0dAAACACchAAADAEkgAAAEAJQoAAABAH0dAAACACchAAADAEkgAAAEAJQo
EBAFAEoSAAABAB0oAAABABoeAAABAH8nAAACAHUUAAABAPYZAAACAD0pAAADAG8QAAABAOoiAAAC
APEiAAABABkgAAABABkgAAACAB4cAAABALwEAAABALwEAAACAG8QAAABAKwSAAABAKwSAAABAL0K
AAABAOwjAAABABkgAAABADAdAAACAOwjAAADADIdAAAEANUcAAAFABgOAAAGANEdAAABAG8QAAAB
AG8QAAABABMDAAACAC4cAAADAG0DAAABAC4cAAACABMDAAADAH8fAAABABUcAAACANgRAAADANsC
AAAEAH8fAAABAG8QAAABAIcIAAACABUcAAADAJkpAAAEANUCAAABAIcIAAACABUcAAADAJkpAAAE
ANUCAAAFAMcbAAABAOETAAACABUcAAADAJkpAAAEANUCAAABAOETAAACABUcAAADAJkpAAAEANUC
AAAFAMcbAAABAIcIAAACABUcAAADAJkpAAAEANUCAAAFANwSAAAGAMcbAAABAIcIAAACABUcAAAD
AJkpAAAEANUCAAAFANwSAAAGAEgoAAAHAMcbAAABAOETAAACABUcAAADAJkpAAAEANUCAAAFANwS
AAAGAMcbAAABAOETAAACABUcAAADAJkpAAAEANUCAAAFANwSAAAGAEgoAAAHAMcbAAABAD4dAAAC
AOwjAAADALoLAAAEANEdAAABAOwjAAACAAkKAAABACsSAAACAOoSAAABAGYZAAACAOMiAAABADId
AAACAOwjAAADAOoSAAAEALoLAAABADIdAAACAOwjAAADAOoSAAAEALoLAAAFANEdAAABADIdAAAC
AOwjAAADAOoSAAAEANUcAAAFALoLAAAGANEdAAABAOMiAAACAAkKAAADAOoSAAAEAKIWAAABABAW
AAACAOMiAAADAOoSAAAEAAkKAAAFAKIWAAABABAWAAACALcJAAADAOMiAAAEAOoSAAABABAWAAAC
ALcJAAADAOMiAAAEAOoSAAAFABgOAAABADkIAAABABkIAAABAOMiAAACAOoSAAABAOMiAAACAOoS
AAABAOMiAAACAOoSAAADAH8nAAAEALoLAAABABMDAAACAH4ZAAADAK8HAAAEAH8fAAAFAF0gAAAB
AH4ZAAABAH4ZAAACAK8HAAADACchAAAEAF0gAAABAH4ZAAACAK8HAAADACchAAABAH4ZAAACAK8H
AAABAOwjAAACAE0dAAABAOwjAAACAMAlAAABAIgZAAACACchAAABAIoWAAACACchAAABAIoWAAAC
ACchAAABAOMiAAACAH8fAAABABMDAAACAOMiAAADAH8fAAAEAGEgAAABAOMiAAACACchAAABAOMi
AAACACchAAADAGEgAAABAOMiAAABAFofAAACADsIAAABAEUVAAACALoLAAADAIUaAAABAOMiAAAC
ANISAAABAOMiAAABABAWAAABANEdAAACAB0GAAADAOMiAAAEAOoSAAABAOMiAAACADwnAAABADkI
AAABACsSAAABAM0RAAABAG8QAAABAG8QAAABAG8QAAABAG8QAAABAG8QAAABAG8QAAABAG8QAAAB
AG8QAAABAG8QAAABAG8QAAABAPYZAAABALoYAAABANoGAAACAMgiAAADADIdAAAEAFQhAAAFAOwj
AAAGAOoSAAAHANUcAAAIALoLAAAJANEdAAABAH8nAAACAOwjAAABAIAHAAACAHUHAAABANoGAAAB
ANoGAAABAMgiAAABALcJAAABANoGAAACADsIAAADAI4KAAAEABAWAAAFABgOAAAGALEWAAABANoG
AAACADsIAAADAM8iAAAEABAWAAAFABgOAAAGALEWAAABADsIAAACABAWAAABANoGAAABAJwEAAAB
AHMiGAB9AQkAgBwBABEAgBwGABkAgBwKACkAgBwQADEAgBwQADkAgBwQAEEAgBwQAEkAgBwQAFEA
gBwQAFkAgBwQAGEAgBwQAGkAgBwGANkAgBwGABEBgBwGADEBgBwVAGEBgBwGAKkBgBwQAAEBMBAG
ACED/xQsACkDgBwyACEDehA4AJEARAk/ADED7CBDADkDQgtIAIEAfghOAAEBOxAGAEED+AZZAJkA
hCReAJkA/QhhAJkAPwRmAJkALgteAJkAJSdeAJkAaxVeAJkADR5rAJkAGgteAJkAdAteAJkAySle
AJkAix9wAJkAWxZeAJkA6AhhAJkA7QpeAJkAVAxeAGkD7Rl1AHEDgBx9AHEDURKFAIED4CGMAIkD
5ROSAJkDWxA/AIkA+RE/AHEAgBymAHEAESgQAHEA7AysAHEALyKwAKED5RO2AKEARR+8ADkCEAjB
AKkAoQvHAKkD+RE/ADEDjSLNAKkAPQo/AKkAHCrUABwAvgThAJkCsxCsAKkARAk/AKEAQwz2ADED
jSL7ALkDBAsBAakAegkGAbEAoBE/ADED/Bo/ADEDeAYLATEDjxQ/ALEAvRE/AKkAwwIRASQAvgTh
AKkAFSEeAckCaQokAbEAhik/ALEA7QQqAaEACSKwAKED+SK2AKEDsxCsAHEABSg/AHEACBw+ASwA
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
awBgDmEGawBgDmQGgwBgDoEGawBgDqEGawBgDsEGawBgDuEGawBgDgEHawBgDgQHgwBgDiEHawBg
DsASawBgDuASawBgDgATawBgDiATawBgDkATawBgDmATawBgDoATawBgDqATawBgDuATawBgDgAU
awBgDiAUawBgDkAUawBgDmAUawBgDoAUawBgDqAUawBgDsAUawBgDuAUawBgDgAVawBgDiAVawBg
DkAVawBgDlQAmQDnAC4BSgGZAe4BMgLGAjUDkQOmA8kD2gPnAwgEHwSNBLMEuARtBY0FlQXnBQ8G
RgZeBmQGgAbABtcG4gbsBhsHSgdwB4UIxQjdCPQI+wgjCQALBguSC6ULzgv0CxMMWAxgDH0MhQyO
DDANNQ1BDV4NeQ27DR4OAwABAAQABQAGAAkACAAKAAkADAAQAA0AEgARABMAFgAUABoAGwAgAB4A
IQAAACgC1xQAAJIT2xQAAOsC3xQAAKQT2xQAADUJ5BQAALcT2xQAABkC1xQAAHwT2xQAANQX6BQA
AKwa7hQAAJYM9BQAADwj+hQAAHAU/xQAAD8l1xQAAHAiBhUAAKEdHhUAAOMDLxUAAG0DOBUAAAoZ
2xQAAEgj5BQAANQhQRUAADUK5BQAAKYj5BQAAF0C5BQAAHcC5BQAAGwJ5BQAAJ0J5BQAADIM5BQA
AO8H5BQAAMAV5BQAACYJ5BQAAMUJ5BQAAPAQSxUCAA4AAwACAA8ABQACABAABwACABEACQABABUA
CwABABYADQABABcADwABABgAEQACACUAEwACACgAFQACACkAFwABACoAFwACACsAGQACAEgAGwAB
AEkAGwACAE4AHQACAE8AHwACAFAAIQACAFgAIwABAFkAIwACAFoAJQABAFsAJQACAF8AJwABAGAA
JwACAHkAKQACAHoAKwACAJYALQABAJcALQACAJgALwABAJkALwACAJoAMQABAJsAMQACAJwAMwAB
AJ0AMwACAJ8ANQABAKAANQACAKEANwABAKIANwACAKMAOQABAKQAOQACAKUAOwABAKYAOwACAKcA
PQABAKgAPQACAKkAPwABAKoAPwACALkAQQACAL8AQwAcACQA2gAXAUMBgAGHAY0BRQKiArYC0QIr
BEwEWwR7BM8E7wQMBRsFOwWnBa4FtQW9BcoF0wXgBQEGOAajBrkGBwcpBzoHaAfNBwAIOQhdCHUI
fQi1CL0I7Aj5CQAKCAoQChcKHwonCi8KQwpcCm8KigqSCpoKrQq5CsYK2gruCksLYwt7C4kLxgvn
C0sMcAz2DP0MBQ0ODVINYw1tDXYNkQ2ZDaINqw0qDgSAAAABAAAAAAAAAAAAAAAAABsEAAAEAAAA
AAAAAAAAAAA3DpMEAAAAAAwAAAAAAAAAAAAAAEAOUiUAAAAAAAAAAAAAAAAAAAAASQ5qGwAAAAAM
AAAAAAAAAAAAAABADoQnAAAAAAwAAAAAAAAAAAAAAEAOphkAAAAABAAAAAAAAAAAAAAANw56FAAA
AAAEAAAAAAAAAAAAAAA3DrAgAAAAAAQAAAAAAAAAAAAAADcO+hkAAAAABAAAAAAAAAAAAAAAUg4y
EgAAAAAMAAAAAAAAAAAAAABADskZAAAAAAQAAAAAAAAAAAAAADcOagwAAAAAAAAAAAEAAABdHgAA
EwACABQAAgAVAAoAFgAKABcAEgAYABIAGQASABoAEgAbABIAHAASAB0AEgAeABIAHwASAAAAAAAg
ALMDAQAAACAAtQMAAAAALACzAwEAAAAsALUDAAAAAHsAswMBAAAAewC1AwAAAAB9ALMDAQAAAH0A
tQMZAXYCGwGaAikB9wIpAZoCrQFmBRsB9wIZAVMMAwAKAAUABgAAAABJRFRTQ29tcG9uZW50TWV0
YURhdGExMDAASURUU1J1bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbjEwMABJRFRTUnVudGltZUNv
bm5lY3Rpb24xMDAASURUU0Nvbm5lY3Rpb25NYW5hZ2VyMTAwADw+OV9fMV8wADxDb252ZXJ0RGlj
dFN0cmluZ0xpc3RfVG9fU3RyaW5nPmJfXzFfMAA8PjlfXzg2XzAAPGluaXRDVEVNYXA+Yl9fODZf
MAA8YWRkT3JSZXBsYWNlS1ZQPmJfXzAAQ1RFY29sdW1uc18wAE1haW5fMQBMaW5rZWRMaXN0Tm9k
ZWAxAE51bGxhYmxlYDEASUVudW1lcmFibGVgMQBJRXF1YXRhYmxlYDEAUHJlZGljYXRlYDEASUNv
bGxlY3Rpb25gMQBJRW51bWVyYXRvcmAxAElMaXN0YDEATGlua2VkTGlzdGAxAGdldF9JdGVtMQBn
ZXRfRXhwcjEAcmljaFRleHRCb3gxAFRvSW50MzIAR2V0SW50MzIAPD5jX19EaXNwbGF5Q2xhc3Mx
NV8wYDIARnVuY2AyAFR1cGxlYDIATGlua2VkSGFzaE1hcGAyAEtleVZhbHVlUGFpcmAyAERpY3Rp
b25hcnlgMgBnZXRfSXRlbTIAZ2V0X0V4cHIyAEludDY0AE1ENQBnZXRfVVRGOAA8PjkAPE1vZHVs
ZT4Ac2V0X1FDU09RQ1NSSUQAZ2V0X1FDU1JJRABRQ1NSX0lEAFFDU09fQ1NSX0lEAFFDU1JfUVNS
X0lEAGdldF9zdHJJRABzZXRfc3RySUQAZ2V0X3N0clBhcmVudElEAHNldF9zdHJQYXJlbnRJRABJ
bnB1dElEAEdldE91dHB1dElEAGdldENvbHVtbk5hbWVzX0Zvcl9RQ1NPX05BTUUAUUNTUl9OQU1F
AFRDVEUAZ2V0X0NURQBnZXRDVEUATEwAaXNYTUwAYk9yaWdDVEVTUUwAZ2V0X1FDU1JTUUwARFNH
VE9PTFNfUVVFUllfQ1RFX1NRTABRQ1NSX1NRTABzdHJTUUwAaW1wYWN0U1FMAFN5c3RlbS5JTwBh
ZGRPclJlcGxhY2VLVlAAZ2V0X3Byb3BfbHN0X0RTR1RPT0xTX1FVRVJZX0NURV9TUUxfT1VUUFVU
AHNldF9wcm9wX2xzdF9EU0dUT09MU19RVUVSWV9DVEVfU1FMX09VVFBVVABsc3REU0dUT09MU19R
VUVSWV9DVEVfU1FMX09VVFBVVABVAGdldF9wcm9wX2xzdF9EU0dUT09MU19RVUVSWV9DVEVfU1FM
X1JBVwBzZXRfcHJvcF9sc3RfRFNHVE9PTFNfUVVFUllfQ1RFX1NRTF9SQVcAZ2V0X1gAZ2V0X1kA
dmFsdWVfXwBTQ18wOTE0NTM3YTc5OTM0MzhkODQ0N2E2MTdjZTQ0MWI4YQBzZWxlY3RDb2x1bW5s
aXN0Q29tbWEAZ3VkdXNvZnQuZ3NxbHBhcnNlci5wcC5wYXJhAGdldF9Db21wb25lbnRNZXRhRGF0
YQBHZXRCbG9iRGF0YQBtc2NvcmxpYgBzYgA8PmMAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMA
QWRkAGdldF9SZWQASW5wdXRzRmluaXNoZWQATWFya091dHB1dHNGaW5pc2hlZABnZXRfVGFibGVE
ZXRlcm1pbmVkADxzdHJJRD5rX19CYWNraW5nRmllbGQAPHN0clBhcmVudElEPmtfX0JhY2tpbmdG
aWVsZAA8c3RyQ29sdW1uVGFibGU+a19fQmFja2luZ0ZpZWxkADxzdHJDVEVOYW1lPmtfX0JhY2tp
bmdGaWVsZAA8c3RyU2NoZW1hTmFtZT5rX19CYWNraW5nRmllbGQAPHN0clRhYmxlTmFtZT5rX19C
YWNraW5nRmllbGQAPHN0ck5hbWU+a19fQmFja2luZ0ZpZWxkADxzdHJTdGF0ZW1lbnRUeXBlPmtf
X0JhY2tpbmdGaWVsZAA8c3RyQ29sdW1uPmtfX0JhY2tpbmdGaWVsZAA8c3RyU3RtdD5rX19CYWNr
aW5nRmllbGQAZmllbGQAVHJpbUVuZABEYXRhR3JpZFZpZXdCYW5kAGdldF9CZXR3ZWVuT3BlcmFu
ZABnZXRfT2JqZWN0T3BlcmFuZABnZXRfTGVmdE9wZXJhbmQAQXBwZW5kAFJlcGxhY2UAUmVwbGFj
ZU11bHRpcGxlU3BhY2VzVG9TaW5nbGVTcGFjZQBJc051bGxPcldoaXRlU3BhY2UAZ2V0X1N0YWNr
VHJhY2UAZ2V0X1hNTFR5cGVfSW5zdGFuY2UAb3V0ZXJJbnN0YW5jZQBkZWZhdWx0SW5zdGFuY2UA
bmV3SW5zdGFuY2UAc2V0X0RhdGFTb3VyY2UARVRhYmxlU291cmNlAGN1cnJlbnRTb3VyY2UAc2V0
X0F1dG9TaXplQ29sdW1uc01vZGUARGF0YUdyaWRWaWV3QXV0b1NpemVDb2x1bW5zTW9kZQBUUGFy
c2VUcmVlTm9kZQBpc0xlYWZOb2RlAHBOb2RlAGdldF9Vbmljb2RlAGdldF9NZXNzYWdlAGdldF9F
cnJvcm1lc3NhZ2UATXlFcnJvcm1lc3NhZ2UAZ2V0X0JlaWdlAEFkZFJhbmdlAFRUYWJsZQBnZXRf
c3RyQ29sdW1uVGFibGUAc2V0X3N0ckNvbHVtblRhYmxlAFRMelRhbGVUb1RhYmxlAHRhcmdldFRh
YmxlAGx6VGFibGUASUVudW1lcmFibGUASURpc3Bvc2FibGUAbHp0YWJsZQBzZXRfQ29sdW1uSGVh
ZGVyc1Zpc2libGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUATG9hZEZpbGUA
ZmlsZQBDb25zb2xlAFR1cGxlAHNldF9Db2x1bW5IZWFkZXJzRGVmYXVsdENlbGxTdHlsZQBEYXRh
R3JpZFZpZXdDZWxsU3R5bGUAVEFsaWduU3R5bGUARm9udFN0eWxlAGluc2VydFZhbHVlbGlzdFN0
eWxlAHNlbGVjdENvbHVtbmxpc3RTdHlsZQBnZXRfc3RyQ1RFTmFtZQBzZXRfc3RyQ1RFTmFtZQBz
ZXRfUUNTT05hbWUAWE5hbWUAZ2V0X05hbWUAc2V0X05hbWUAZ2V0X3N0clNjaGVtYU5hbWUAc2V0
X3N0clNjaGVtYU5hbWUAZ2V0X1RhYmxlTmFtZQBnZXRfc3RyVGFibGVOYW1lAHNldF9zdHJUYWJs
ZU5hbWUAZ2V0VGFibGVOYW1lAHRhYmxlTmFtZQBnZXRfT3JpZ05hbWUAZ2V0X0Z1bGxOYW1lAHVw
ZGF0ZUNvbHVtblRhYmxlRnVsbE5hbWUAZ2V0RnVsbE5hbWUAQ29sTmFtZQBjb2x1bW5OYW1lAGdl
dF9GdW5jdGlvbk5hbWUAZ2V0X3N0ck5hbWUAc2V0X3N0ck5hbWUAZ2V0X0FsaWFzTmFtZQBnZXRU
YWJsZUFsaWFzTmFtZQBUT2JqZWN0TmFtZQBnZXRPYmplY3ROYW1lAElucHV0TmFtZQBnZXRfVmll
d05hbWUAdmlld05hbWUAcHJlZml4TmFtZQBHZXRSdW50aW1lQ29ubmVjdGlvbkJ5TmFtZQBzcWxG
aWxlbmFtZQBzZXRfc3FsZmlsZW5hbWUAUmVhZExpbmUAQXBwZW5kTGluZQBjYXNlV2hlblRoZW5J
blNhbWVMaW5lAFdyaXRlTGluZQBnZXRfTmV3TGluZQBmcm9tQ2xhdXNlSW5OZXdMaW5lAHNlbGVj
dEl0ZW1Jbk5ld0xpbmUAQ29tYmluZQB1bmRlZmluZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5Q
aXBlbGluZQBzZWxlY3RGcm9tY2xhdXNlSm9pbk9uSW5OZXdsaW5lAENsb25lAEVzY2FwZQBnZXRf
VGFibGVUeXBlAENsYXVzZVR5cGUAY2xhdXNlVHlwZQBFRXhwcmVzc2lvblR5cGUAZ2V0X0V4cHJl
c3Npb25UeXBlAEVGdW5jdGlvblR5cGUAZ2V0X0Z1bmN0aW9uVHlwZQBFU3FsU3RhdGVtZW50VHlw
ZQBnZXRfc3RyU3RhdGVtZW50VHlwZQBzZXRfc3RyU3RhdGVtZW50VHlwZQBzcWxzdGF0ZW1lbnR0
eXBlAGFuZE9yVW5kZXJXaGVyZQB3aGVyZQBTeXN0ZW0uQ29yZQBnZXRfQ3VsdHVyZQBzZXRfQ3Vs
dHVyZQByZXNvdXJjZUN1bHR1cmUAQ2FwdHVyZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBUZXh0
Qm94QmFzZQBJTWV0YURhdGFiYXNlAENsb3NlAERpc3Bvc2UAUGFyc2UAcGFyc2UAaW5PcmRlclRy
YXZlcnNlAFRXaGVyZUNsYXVzZQBnZXRfV2hlcmVDbGF1c2UAZ2V0X1N0YXJ0V2l0aENsYXVzZQBn
ZXRfSGllcmFyY2hpY2FsQ2xhdXNlAEVTcWxDbGF1c2UAVFBhcnRpdGlvbkNsYXVzZQBnZXRfUGFy
dGl0aW9uQ2xhdXNlAFRBbGlhc0NsYXVzZQBnZXRfQWxpYXNDbGF1c2UAVE5vZGVXaXRoQWxpYXND
bGF1c2UAVFZpZXdBbGlhc0NsYXVzZQBnZXRfVmlld0FsaWFzQ2xhdXNlAGdldF9Hcm91cEJ5Q2xh
dXNlAGdldF9PcmRlckJ5Q2xhdXNlAFRDb25uZWN0QnlDbGF1c2UAZ2V0X09yZGVyYnlDbGF1c2UA
Y2xhdXNlAGNvbnRhaW5DbGFzdXNlAENyZWF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBXcml0ZQBy
ZW1vdmVRdW90ZQBYQXR0cmlidXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2Vy
Tm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVB
dHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0
ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRl
AEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUARGVmYXVsdE1lbWJlckF0dHJpYnV0ZQBDb21w
aWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3Nl
bWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJp
YnV0ZQBQYXJhbUFycmF5QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1l
Q29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAEJ5dGUAQ2hhbmdl
S1ZQVmFsdWUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQB2YWx1ZQBTYXZlAGFkZF9Bc3NlbWJseVJlc29s
dmUAQ3VycmVudERvbWFpbl9Bc3NlbWJseVJlc29sdmUAUmVtb3ZlAHNpemUATGFzdEluZGV4T2YA
VFdpbmRvd0RlZgBnZXRfV2luZG93RGVmAGltcGFjdFNRTF9vcmlnAGdldF9FbmNvZGluZwBTeXN0
ZW0uUnVudGltZS5WZXJzaW9uaW5nAFByZXBhcmVfUUNTT19OYW1lX0Zyb21TUUxTdHJpbmcAZ2V0
X05hbWVzcGFjZV9TdHJpbmcAZ2V0X1hQYXRoX1N0cmluZwBDb252ZXJ0TGlzdFN0cmluZ19Ub19T
dHJpbmcAQ29udmVydERpY3RTdHJpbmdMaXN0X1RvX1N0cmluZwBnZXRfU3RyaW5nAGdldF9TY2hl
bWFTdHJpbmcAYnVpbGRTdHJpbmcAZ2V0X1RhYmxlU3RyaW5nAG5hbWVTdHJpbmcAQWxsQ29sU3Ry
aW5nAGJ1aWxkTG9jYXRpb25TdHJpbmcAVG9TdHJpbmcAZ2V0X0Z1bGxOYW1lV2l0aEFsaWFzU3Ry
aW5nAEdldFN0cmluZwBTdWJzdHJpbmcAU3lzdGVtLkRyYXdpbmcAZXJyb3JNc2cAZXJyTXNnAE1h
dGNoAEdldE1kNUhhc2gAbWQ1SGFzaABDb21wdXRlSGFzaABSZWZyZXNoAFBhdGgAZ2V0X0xlbmd0
aABFbmRzV2l0aABTdGFydHNXaXRoAHN0YXJ0d2l0aABrAFRIaWVyYXJjaGljYWwAU3lzdGVtLkNv
bXBvbmVudE1vZGVsAGJhc2VMZXZlbABpc0NvbHVtbkxldmVsAGxldmVsAE15VXRpbABndWR1c29m
dC5nc3FscGFyc2VyLmRlbW9zLnV0aWwAU2VsZWN0QWxsAFRGdW5jdGlvbkNhbGwAZ2V0X0Z1bmN0
aW9uQ2FsbABTQ18wOTE0NTM3YTc5OTM0MzhkODQ0N2E2MTdjZTQ0MWI4YS5kbGwARGF0YUdyaWRW
aWV3Q2VsbABzZXRfUUNTT1FDU1JJRF9Jc051bGwAZ2V0X1FDU1JJRF9Jc051bGwAZ2V0X1FDU1JT
UUxfSXNOdWxsAHNldF9RQ1NPTmFtZV9Jc051bGwAU2V0TnVsbABDb250cm9sAEZvcm1hdFNxbABz
cWwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AVFdoZW5DbGF1c2VJdGVtAFRKb2luSXRlbQBnZXRKb2luSXRl
bQBUVmlld0FsaWFzSXRlbQBnZXRWaWV3QWxpYXNJdGVtAFRHcm91cEJ5SXRlbQBnZXRHcm91cEJ5
SXRlbQBUT3JkZXJCeUl0ZW0AZ2V0T3JkZXJCeUl0ZW0AaXRlbQBTeXN0ZW0ASGFzaEFsZ29yaXRo
bQBUcmltAEVudW0AcmVzb3VyY2VNYW4AZ2V0X2VuZFRva2VuAFRTb3VyY2VUb2tlbgBnZXRfbm9k
ZXNTdGFydEZyb21UaGlzVG9rZW4AZ2V0X3N0YXJ0VG9rZW4AU2NyaXB0TWFpbgBBcHBEb21haW4A
Z2V0X0N1cnJlbnREb21haW4AVEpvaW4AZ2V0Sm9pbgBqb2luAFRDb2x1bW4AQmxvYkNvbHVtbgBU
U291cmNlQ29sdW1uAHNvdXJjZUNvbHVtbgBzZWFyY2hDb2x1bW4AY2hlY2tDb2x1bW4AdHJlYXRE
aXN0aW5jdEFzVmlydHVhbENvbHVtbgBvcmlnbkNvbHVtbgBleHByVG9Db2x1bW4AYXR0clRvQ29s
dW1uAGdldF9zdHJDb2x1bW4Ac2V0X3N0ckNvbHVtbgB0YXJnZXRDb2x1bW4AVFJlc3VsdENvbHVt
bgBnZXRSZXN1bHRDb2x1bW4ARGF0YUdyaWRWaWV3Q29sdW1uAGlzUHNldWRvY29sdW1uAFRFeHBy
ZXNzaW9uAFRDYXNlRXhwcmVzc2lvbgBnZXRfQ2FzZUV4cHJlc3Npb24AZ2V0X1N0cmluZ0V4cHJl
c3Npb24Ad3NQYWRkaW5nUGFyZW50aGVzZXNJbkV4cHJlc3Npb24AZ2V0RXhwcmVzc2lvbgBleHBy
ZXNzaW9uAGdldF9Mb2NhdGlvbgBvcmlnaW5Mb2NhdGlvbgBsb2NhdGlvbgBYRGVjbGFyYXRpb24A
c2V0X0RlY2xhcmF0aW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9u
AFN5c3RlbS5SZWZsZWN0aW9uAElDb2xsZWN0aW9uAFZhbHVlQ29sbGVjdGlvbgBEYXRhR3JpZFZp
ZXdDZWxsQ29sbGVjdGlvbgBEYXRhR3JpZFZpZXdDb2x1bW5Db2xsZWN0aW9uAGNvbHVtbkNvbGxl
Y3Rpb24AZ2V0X1J1bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbgBHcm91cENvbGxlY3Rpb24ARGF0
YUdyaWRWaWV3Um93Q29sbGVjdGlvbgBLZXlDb2xsZWN0aW9uAGdldF9Db25uZWN0aW9uAFRBbmFs
eXRpY0Z1bmN0aW9uAGdldF9BbmFseXRpY0Z1bmN0aW9uAGdldF9Db25kaXRpb24AZ2V0X09uQ29u
ZGl0aW9uAFRMaW5lZmVlZHNDb21tYU9wdGlvbgBUQ2FzZU9wdGlvbgBURW1wdHlMaW5lc09wdGlv
bgBJT0V4Y2VwdGlvbgBGaWxlTm90Rm91bmRFeGNlcHRpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2Vw
dGlvbgBGb3JtYXRFeGNlcHRpb24AQ29tbW9uAFN0cmluZ0NvbXBhcmlzb24AbGluZU5vAGNvbHVt
bk5vAEZpbGVJbmZvAEN1bHR1cmVJbmZvAEZpbGVTeXN0ZW1JbmZvAGdldF9Db2xsZWN0Q29sdW1u
SW5mbwBzZXRfQ29sbGVjdENvbHVtbkluZm8AY29sbGVjdENvbHVtbkluZm8AY29sdW1uSW5mbwBx
dWVyeWluZm8AaW5pdENURU1hcABkZXBlbmRNYXAAT3V0cHV0TmFtZU1hcABjdXJyZW50Q2xhdXNl
TWFwAGN0ZU1hcABNeUNURXNNYXAAbXlDVEVzTWFwAGFjY2Vzc01hcABPdXRwdXRNYXAATWljcm9z
b2Z0LlNxbFNlcnZlci5EVFNSdW50aW1lV3JhcABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1BpcGVs
aW5lV3JhcABwcABHcm91cABrdnAAU3lzdGVtLlhtbC5MaW5xAFN5c3RlbS5MaW5xAENsZWFyAENo
YXIAY29sdW1uTnVtYmVyAFN0cmluZ1JlYWRlcgBUZXh0UmVhZGVyAFN0cmluZ0J1aWxkZXIAc2Vu
ZGVyAElucHV0MUJ1ZmZlcgBPdXRwdXQxQnVmZmVyAFBpcGVsaW5lQnVmZmVyAGxvY2F0aW9uQnVm
ZmVyAFNjcmlwdEJ1ZmZlcgBidWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ29ubmVjdGlv
bk1hbmFnZXIAUmVzb2x2ZUV2ZW50SGFuZGxlcgBYQ29udGFpbmVyAHRhYmxlT3duZXIAVG9VcHBl
cgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIATWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlcgBUR1NxbFBhcnNlcgBpblBhcnNlcgBndWR1c29mdC5n
c3FscGFyc2VyAGdldF9UcmltQ2hhcmFjdGVyAGdldF9QYXJhbWV0ZXIAVXRmOFN0cmluZ1dyaXRl
cgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBmaWx0ZXIAZ3VkdXNvZnQuZ3NxbHBhcnNlci5wcC5z
dG10Zm9ybWF0dGVyAFRvTG93ZXIAR2V0RURiVmVuZG9yAGdldF9EYlZlbmRvcgBkYlZlbmRvcgBk
ZWZhdWx0VmVuZG9yAGRidmVuZG9yAHNldF9CYWNrQ29sb3IAc2V0X1NlbGVjdGlvbkNvbG9yAElF
bnVtZXJhdG9yAEdldEVudW1lcmF0b3IAZ2V0X1NldE9wZXJhdG9yAC5jdG9yAC5jY3RvcgBJRXhw
cmVzc2lvblZpc2l0b3IAZ2V0X0V4cHIAVEluRXhwcgBnZXRfSW5FeHByAGNvbHVtbnNJbkV4cHIA
Y29sdW1uRXhwcgBjb2xsZWN0RXhwcgBnZXRfRnVuY19leHByAGdldF9FbHNlX2V4cHIAZ2V0X0Nv
bXBhcmlzb25fZXhwcgBnZXRfUmV0dXJuX2V4cHIAZ2V0X0lucHV0X2V4cHIAbGNleHByAGxzdFN0
cgBhdHRyAE91dHB1dElEcwBmb3JtYXRlZENURXMAZW5kcXVlcnlfbm9uQ1RFcwBGb3JtYXRDVEVz
AEZpbGxpbl9kZ3ZfR2V0Q1RFcwBpdGVyYXRlU3RtdF9nZXRDVEVzAGdldF9MTHMAVEFsaWFzAGdl
dF9BbGlhcwB0YWJsZUFsaWFzAGdldF9Db2x1bW5BbGlhcwBwYXJlbnRBbGlhcwBnZXRSZXN1bHRD
b2x1bW5CeUFsaWFzAGFsaWFzAFN5c3RlbS5EaWFnbm9zdGljcwBjYXNlS2V5d29yZHMAc3RyTXVs
dGlwbGVTcGFjZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3Vy
Y2VzAFNDXzA5MTQ1MzdhNzk5MzQzOGQ4NDQ3YTYxN2NlNDQxYjhhLlByb3BlcnRpZXMuUmVzb3Vy
Y2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBndWR1c29mdC5nc3FscGFyc2VyLm5vZGVzAGdl
dFN1YlF1ZXJpZXMAU0NfMDkxNDUzN2E3OTkzNDM4ZDg0NDdhNjE3Y2U0NDFiOGEuUHJvcGVydGll
cwBmaW5kQ29sdW1uSW5UYWJsZXMAbGlua0ZpZWxkVG9UYWJsZXMAY2hlY2tTdG10VGFibGVzAFZh
cmlhYmxlcwB0YWJsZXMAZ2V0VGFibGVOYW1lcwB0YWJsZU5hbWVzAHBhcnNlTmFtZXMAdGFibGVG
dWxsTmFtZXMAQ29sdW1uTmFtZXMAZW1wdHlMaW5lcwBhbGlhc2VzAGZpbmRDb2x1bW5zRnJvbUNs
YXVzZXMAY2xhdXNlcwBHZXRCeXRlcwBnZXRfVmFsdWVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0
Q29sdW1uSW5kZXhlcwBTZXR0aW5ncwBnZXRfQXJncwBSZXNvbHZlRXZlbnRBcmdzAGFyZ3MARXF1
YWxzAEdldENURXMudXRpbHMAZ2V0X0NlbGxzAGRndl9DVEVDb2xzAGVuZFF1ZXJ5X25vbkNURUNv
bHMAbHN0X2VuZHF1ZXJ5X25vbkNURV9Db2xzAEdldENURXMuRFNHVG9vbHMAR2V0Q1RFc19EU0dU
b29scwBnZXRfSXRlbXMAZ2V0X0pvaW5JdGVtcwBTeXN0ZW0uV2luZG93cy5Gb3JtcwBndWR1c29m
dC5nc3FscGFyc2VyLnBwLnBhcmEuc3R5bGVlbnVtcwBDb250YWlucwBqb2lucwBnZXRDVEVDb2x1
bW5zAGdldF9Db2x1bW5zAGdldF9MaW5rZWRDb2x1bW5zAENURWNvbHVtbnMAZ3VkdXNvZnQuZ3Nx
bHBhcnNlci5kZW1vcy5nZXR0YWJsZWNvbHVtbnMAU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Np
b25zAGxvY2F0aW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAQ29ubmVjdGlvbnMAU2F2ZU9wdGlvbnMA
U3RyaW5nU3BsaXRPcHRpb25zAFJlZ2V4T3B0aW9ucwBnZXRfQ29sdW1uSW5mb3MAZ2V0X0dyb3Vw
cwBnZXRfQ2hhcnMAQnVmZmVycwBnZXRfU3VjY2VzcwBnZXRfU3RhdGVtZW50cwBnZXRTZWxlY3RT
cWxTdGF0ZW1lbnRzAGdldF9zcWxzdGF0ZW1lbnRzAEZpbmlzaE91dHB1dHMAZ2V0X1Jvd3MAQ3Jl
YXRlTmV3T3V0cHV0Um93cwBnZXRfS2V5cwBSZW1vdmVBdABFbGVtZW50QXQAZG9JdABDb25jYXQA
Q29sdW1uSW1wYWN0AGd1ZHVzb2Z0LmdzcWxwYXJzZXIuZGVtb3MuY29sdW1uSW1wYWN0AGltcGFj
dABjb2x1bW5PYmplY3QAU2VsZWN0AHNlbGVjdABJbkRpY3QAT3V0RGljdABnZXQAZ2V0X0VuZE9m
Um93c2V0AFNldEVuZE9mUm93c2V0AG9wX0ltcGxpY2l0AFNwbGl0AGV4cHJWaXNpdABnZXRfRGVm
YXVsdABnZXRfSW1wYWN0UmVzdWx0AGdldFN1YlN0bXQAY29sdW1uVGFibGVTdG10AGdldF9QcmVw
YXJhYmxlU3RtdABpdGVyYXRlU3RtdABpblN0bXQAZ2V0X3N0clN0bXQAc2V0X3N0clN0bXQAZ2V0
X0xlZnRTdG10AGdldF9SaWdodFN0bXQAZ2V0X1BhcmVudFN0bXQAZ3VkdXNvZnQuZ3NxbHBhcnNl
ci5zdG10AFhFbGVtZW50AGdldEVsZW1lbnQAVFVwZGF0ZVNxbFN0YXRlbWVudABUQ3VzdG9tU3Fs
U3RhdGVtZW50AFRTZWxlY3RTcWxTdGF0ZW1lbnQAVEluc2VydFNxbFN0YXRlbWVudABUQ3JlYXRl
Vmlld1NxbFN0YXRlbWVudABpbXBhY3RTcWxGcm9tU3RhdGVtZW50AHJlbW92ZUNvbW1lbnQARW52
aXJvbm1lbnQAWERvY3VtZW50AFRUcmltQXJndW1lbnQAZ2V0X1RyaW1Bcmd1bWVudABVc2VyQ29t
cG9uZW50AFBhcmVudENvbXBvbmVudABTY3JpcHRDb21wb25lbnQAaW5QYXJlbnQAZ2V0X0N1cnJl
bnQAUG9pbnQAc2V0X0ZvbnQAc2V0X1NlbGVjdGlvbkZvbnQAZ2V0X0NvdW50AHNldF9Db2x1bW5D
b3VudABHRm10T3B0AHNlcHQATWljcm9zb2Z0LlNxbFNlcnZlci5UeFNjcmlwdABUcmltU3RhcnQA
SW5zZXJ0AENvbnZlcnQAQWRkTGFzdABUQ1RFTGlzdABnZXRfTGlzdABUUGFyc2VUcmVlTm9kZUxp
c3QAVFRhYmxlTGlzdAB0YWJsZUxpc3QAVE9iamVjdE5hbWVMaXN0AGdldF9DdGVMaXN0AGNpTGlz
dABxaUxpc3QAVFdoZW5DbGF1c2VJdGVtTGlzdABnZXRfV2hlbkNsYXVzZUl0ZW1MaXN0AFRKb2lu
SXRlbUxpc3QAVFZpZXdBbGlhc0l0ZW1MaXN0AGdldF9WaWV3QWxpYXNJdGVtTGlzdABUR3JvdXBC
eUl0ZW1MaXN0AFRPcmRlckJ5SXRlbUxpc3QAZmluZENvbHVtbnNGcm9tTGlzdABUSm9pbkxpc3QA
Z2V0X0NvbHVtbkxpc3QAVFJlc3VsdENvbHVtbkxpc3QAZ2V0X1Jlc3VsdENvbHVtbkxpc3QAVEV4
cHJlc3Npb25MaXN0AGdldF9FeHByZXNzaW9uTGlzdABhZGRDb2x1bW5Ub0xpc3QAZ2V0X0V4cHJM
aXN0AGdldF9QYXJ0aXRpb25CeV9FeHByTGlzdABhbGlnbkFsaWFzSW5TZWxlY3RMaXN0AHN0bXRM
aXN0AFRTdGF0ZW1lbnRMaXN0AGdldF9PcmRlckJ5TGlzdABnZXRfQ29ubmVjdEJ5TGlzdABkaWN0
X3N0cl9saXN0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxpbmVIb3N0AGdldF9GaXJzdABQb3BG
aXJzdABTZXRPdXQASW5wdXQxX1Byb2Nlc3NJbnB1dABpbnB1dABQcmltZU91dHB1dABNb3ZlTmV4
dABTeXN0ZW0uVGV4dABBcHBlbmRUZXh0AGdldF9zcWx0ZXh0AHNldF9zcWx0ZXh0AGRndgBGaWxs
aW5fRGF0YUdyaWRWaWV3AENsZWFyX0RhdGFHcmlkVmlldwB0cmFjZVZpZXcAQWRkUm93AElucHV0
MV9Qcm9jZXNzSW5wdXRSb3cATmV4dFJvdwBEYXRhR3JpZFZpZXdSb3cAY2hlY2tTeW50YXgAaWR4
AEZpbmRJbmRleABSZWdleABjb2x1bW5QcmV4AFJpY2hUZXh0Qm94AEZpbGxpbl9yaWNoVGV4dEJv
eABUR3JvdXBCeQBmaW5kQ29sdW1uc0Zyb21Hcm91cEJ5AFRPcmRlckJ5AGdldF9PcmRlckJ5AGdl
dF9vcmRlckJ5AFRvQXJyYXkAZ3JvdXBieQBvcmRlcmJ5AGNvbm5lY3RieQBnZXRfS2V5AHRoZUtl
eQBDb250YWluc0tleQBnZXRfU29ydEtleQBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5AGdl
dF9Bc3NlbWJseQBnZXRfQ29sdW1uTmFtZU9ubHkAc2ltcGx5AElEaWN0aW9uYXJ5AE1lcmdlRGlj
dGlvbmFyeQBnZXRfU3ViUXVlcnkAd3NQYWRkaW5nUGFyZW50aGVzZXNPZlN1YlF1ZXJ5AGZpbmRD
b2x1bW5JblN1YlF1ZXJ5AGdldENvbHVtbk5hbWVzX2Zyb21TZWxlY3RRdWVyeQBnZXRfU3VicXVl
cnkAc3VicXVlcnkARm9ybWF0dGVyRmFjdG9yeQBHRm10T3B0RmFjdG9yeQBUUmVzdWx0RW50cnkA
b3BfRXF1YWxpdHkAb3BfSW5lcXVhbGl0eQBJc051bGxPckVtcHR5AAAAFWcAcwBxAGwAcABhAHIA
cwBlAHIAAF1DADoAXABXAGkAbgBkAG8AdwBzAFwATQBpAGMAcgBvAHMAbwBmAHQALgBOAEUAVABc
AEYAcgBhAG0AZQB3AG8AcgBrAFwAdgA0AC4AMAAuADMAMAAzADEAOQBcAAAvZwB1AGQAdQBzAG8A
ZgB0AC4AZwBzAHEAbABwAGEAcgBzAGUAcgAuAGQAbABsAAAVXgBcACgAKAAuACoAKQBcACkAJAAA
Ay4AABdBAG4AYQBsAHkAegBpAG4AZwA6ACAAAAkgADwALQAgAAEBAAV4ADIAAICbSQBzAE4AdQBs
AGwAIABwAHIAbwBwAGUAcgB0AHkAIABjAGEAbgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAA
RgBhAGwAcwBlAC4AIABBAHMAcwBpAGcAbgAgAGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAg
AGMAbwBsAHUAbQBuACAAaQBuAHMAdABlAGEAZAAuAAAPSQBuAHAAdQB0ACAAMQAAEU8AdQB0AHAA
dQB0ACAAMQAAFUMAbwBuAG4AZQBjAHQAaQBvAG4AAHFTAEMAXwAwADkAMQA0ADUAMwA3AGEANwA5
ADkAMwA0ADMAOABkADgANAA0ADcAYQA2ADEANwBjAGUANAA0ADEAYgA4AGEALgBQAHIAbwBwAGUA
cgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAMsAAAXLAAgAGMAbwBsAHUAbQBuAHMAIAAo
AAADKQAAD1YAZQByAGQAYQBuAGEAAB9lAG4AZABxAHUAZQByAHkAXwBuAG8AbgBDAFQARQAABykA
OwAgAAAFOwAgAAA9IAAsACAAZQBuAGQAIABxAHUAZQByAHkAIABuAG8AbgAtAEMAVABFACAAYwBv
AGwAdQBtAG4AcwAgAFsAAQNdAAA3ZQBuAGQAIABxAHUAZQByAHkAIABuAG8AbgAtAEMAVABFACAA
YwBvAGwAdQBtAG4AcwAgAFsAAQdcAHMAKwAAAyAAAAUvAHQAAAttAHMAcwBxAGwAAAdkAGIAMgAA
C20AeQBzAHEAbAAAD24AZQB0AGUAegB6AGEAABF0AGUAcgBhAGQAYQB0AGEAAA1vAHIAYQBjAGwA
ZQAAEWkAbgBmAG8AcgBtAGkAeAAADXMAeQBiAGEAcwBlAAAVcABvAHMAdABnAHIAZQBzAHEAbAAA
CWgAaQB2AGUAABNnAHIAZQBlAG4AcABsAHUAbQAAEXIAZQBkAHMAaABpAGYAdAAAB20AZAB4AAAt
UwBlAGwAZQBjAHQAZQBkACAAUwBRAEwAIABkAGkAYQBsAGUAYwB0ADoAIAAABT8ALgAACSAAaQBu
ACAAAIDdVQBzAGEAZwBlADoAIABDAG8AbAB1AG0AbgBJAG0AcABhAGMAdAAgAFsALwBmACAAPABz
AGMAcgBpAHAAdAAgAGYAaQBsAGUAPgBdACAAWwAvAGQAXQAvAFsALwBzACAAWwAvAHgAbQBsAF0A
IABbAC8AYwBdAF0ALwBbAC8AdgBdACAAWwAvAG8AIAA8AG8AdQB0AHAAdQB0ACAAZgBpAGwAZQAg
AHAAYQB0AGgAPgBdACAAWwAvAHQAIAA8AGQAYQB0AGEAYgBhAHMAZQAgAHQAeQBwAGUAPgBdAABf
LwBzADoAIABPAHAAdABpAG8AbgAsACAAZABpAHMAcABsAGEAeQAgAHQAaABlACAAYQBuAGEAbAB5
AHMAaQBzACAAcgBlAHMAdQBsAHQAIABzAGkAbQBwAGwAeQAuAAB/LwBjADoAIABPAHAAdABpAG8A
bgAsACAAZABpAHMAcABsAGEAeQAgAHQAaABlACAAYQBuAGEAbAB5AHMAaQBzACAAcgBlAHMAdQBs
AHQAIABzAGkAbQBwAGwAeQAgAGkAbgAgAGMAbwBsAHUAbQBuACAAbABlAHYAZQBsAC4AAGUvAGQA
OgAgAE8AcAB0AGkAbwBuACwAIABkAGkAcwBwAGwAYQB5ACAAdABoAGUAIABhAG4AYQBsAHkAcwBp
AHMAIAByAGUAcwB1AGwAdAAgAGkAbgAgAGQAZQB0AGEAaQBsAC4AAIC3LwB4AG0AbAA6ACAATwBw
AHQAaQBvAG4ALAAgAGUAeABwAG8AcgB0ACAAdABoAGUAIABhAG4AYQBsAHkAcwBpAHMAIAByAGUA
cwB1AGwAdABzACAAdABvACAAWABNAEwAIABmAG8AcgBtAGEAdAAsACAAaQB0ACcAcwAgAHYAYQBs
AGkAZAAgAG8AbgBsAHkAIABpAGYAIAAvAHMAIABpAHMAIABzAHAAZQBjAGkAZgBpAGUAZAABUS8A
dgA6ACAATwBwAHQAaQBvAG4ALAAgAHQAcgBhAGMAZQAgAGQAYQB0AGEAIABsAGkAbgBlAGEAZwBl
ACAAaQBuACAAdgBpAGUAdwBzAC4AAHUvAG8AOgAgAE8AcAB0AGkAbwBuACwAIAB3AHIAaQB0AGUA
IAB0AGgAZQAgAG8AdQB0AHAAdQB0ACAAcwB0AHIAZQBhAG0AIAB0AG8AIAB0AGgAZQAgAHMAcABl
AGMAaQBmAGkAZQBkACAAZgBpAGwAZQAuAACAxy8AdAA6ACAATwBwAHQAaQBvAG4ALAAgAHMAZQB0
ACAAdABoAGUAIABkAGEAdABhAGIAYQBzAGUAIAB0AHkAcABlAC4AIABTAHUAcABwAG8AcgB0ACAA
bwByAGEAYwBsAGUALAAgAG0AeQBzAHEAbAAsACAAbQBzAHMAcQBsACAAYQBuAGQAIABkAGIAMgAs
ACAAdABoAGUAIABkAGUAZgBhAHUAbAB0ACAAdAB5AHAAZQAgAGkAcwAgAG8AcgBhAGMAbABlAACD
F1MARQBMAEUAQwBUACAAZQAuAGwAYQBzAHQAXwBuAGEAbQBlACAAQQBTACAAbgBhAG0AZQAsAAoA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgAGUALgBjAG8AbQBtAGkAcwBzAGkAbwBuAF8AcABjAHQAIABjAG8AbQBtACwACgAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAZQAuAHMAYQBsAGEAcgB5ACAAKgAgADEAMgAgACIAQQBuAG4AdQBhAGwAIABTAGEAbABhAHIA
eQAiAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgAEYAUgBPAE0AIABzAGMAbwB0AHQALgBlAG0AcABsAG8AeQBlAGUAcwAgAEEA
UwAgAGUACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAVwBIAEUAUgBFACAAZQAuAHMAYQBsAGEAcgB5ACAAPgAgADEAMAAwADAA
IABvAHIAIAAxAD0AMQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIABPAFIARABFAFIAIABCAFkACgAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAZQAuAGYAaQBy
AHMAdABfAG4AYQBtAGUALAAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIABlAC4AbABhAHMAdABfAG4AYQBtAGUAOwAABS8AdgAA
BS8AcwAACS8AeABtAGwAAAUvAGMAAAUvAG8AAAUvAGYAAICbDQAKAFkAbwB1ACAAYwBhAG4AIABh
AGQAZAAgAC8AcwAgAGQAaQByAGUAYwB0AGkAdgBlACAAdABvACAAZABpAHMAcABsAGEAeQAgAHQA
aABlACAAYQBuAGEAbAB5AHMAaQBzACAAcgBlAHMAdQBsAHQAIABpAG4AIABhACAAcwBpAG0AcABs
AGUAIABmAG8AcgBtAGEAdAAuAAAFCgArAAAFDQAKAAADCgAAD1MAZQBsAGUAYwB0ACAAAA8gAEYA
cgBvAG0AIABYAAAJJgBnAHQAOwAAAz4AAAkmAGwAdAA7AAADPAAACyYAYQBtAHAAOwAAAyYAAA0m
ACMAeAAwAGQAOwAADVMARQBMAEUAQwBUAAAfUwBFAEwARQBDAFQAIABEAEkAUwBUAEkATgBDAFQA
AAlDAEEAUwBFAAAHRQBOAEQAAAlGAFIATwBNAAADKgAACS0ALQA+ACAAARMoAGEAbABpAGEAcwAp
AA0ACgAAHS0ALQA+ACAAVwBJAFQASAAgAEMAVABFAA0ACgABJS0ALQA+ACAAVwBoAGUAcgBlACAA
QwBsAGEAdQBzAGUADQAKAAEvLQAtAD4AIABDAG8AbgBuAGUAYwB0ACAAQgB5ACAAQwBsAGEAdQBz
AGUADQAKAAEvLQAtAD4AIABTAHQAYQByAHQAIABXAGkAdABoACAAQwBsAGEAdQBzAGUADQAKAAEr
LQAtAD4AIABPAHIAZABlAHIAIABCAHkAIABDAGwAYQB1AHMAZQANAAoAARUtAC0APgAgAEoAbwBp
AG4ADQAKAAETKABXAGgAZQByAGUAKQANAAoAAB0oAEMAbwBuAG4AZQBjAHQAIABCAHkAKQANAAoA
AB0oAFMAdABhAHIAdAAgAFcAaQB0AGgAKQANAAoAABkoAE8AcgBkAGUAcgAgAEIAeQApAA0ACgAA
ESgASgBvAGkAbgApAA0ACgAAGSgAZwByAG8AdQBwACAAYgB5ACkADQAKAABvIABbAGcAdQBkAHUA
cwBvAGYAdAAgAGMAYQBuACcAdAAgAHAAYQByAHMAZQAgAHEAdQBlAHIAeQAgAGkAbgAgAFEAUwBS
AF8AUwBRAEwALAAgAEMAVABFACAAbgBvAHQAIABmAG8AdQBuAGQAXQABH1sAQwBUAEUAIABuAG8A
dAAgAGYAbwB1AG4AZABdAABTWwBJAG4AdgBhAGwAaQBkACAAcQB1AGUAcgB5ACAAaQBuACAAUQBT
AFIAXwBTAFEATAAsACAAQwBUAEUAIABuAG8AdAAgAGYAbwB1AG4AZABdAAAHMQAuADAAAAt1AHQA
ZgAtADgAAQVuAG8AACVjAG8AbAB1AG0AbgBJAG0AcABhAGMAdABSAGUAcwB1AGwAdAAAH3IAdAA9
AHYAVwBoAGUAcgBlAAkAdgBpAGUAdwA9AAAPCQB3AGgAZQByAGUAPQAABSwAIAAAH3IAdAA9AHYA
VABhAGIAbABlAAkAdgBpAGUAdwA9AAARCQB0AGEAYgBsAGUAcwA9AAAdcgB0AD0AdgBKAG8AaQBu
AAkAdgBpAGUAdwA9AAANCQBqAG8AaQBuAD0AABlyAHQAPQBjAG8AbAAJAHYAaQBlAHcAPQAAEQkA
YwBvAGwAdQBtAG4APQAAAwkAAA9zAG8AdQByAGMAZQA9AAAXZQB4AHAAcgBlAHMAcwBpAG8AbgA9
AAAJLABcAHMAKgAACVwAcwAqACwAABsgAGQAZQBwAGUAbgBkAHMAIABvAG4AOgAgAAAZdABhAHIA
ZwBlAHQAQwBvAGwAdQBtAG4AAAthAGwAaQBhAHMAABVjAG8AbwByAGQAaQBuAGEAdABlAAAJbgBh
AG0AZQAAGXMAbwB1AHIAYwBlAEMAbwBsAHUAbQBuAAALdwBoAGUAcgBlAAAVYwBvAG4AbgBlAGMA
dAAgAGIAeQAAFXMAdABhAHIAdAAgAHcAaQB0AGgAABFvAHIAZABlAHIAIABiAHkAAAlqAG8AaQBu
AAANcwBlAGwAZQBjAHQAABFnAHIAbwB1AHAAIABiAHkAAA1jAGwAYQB1AHMAZQAAE3QAYQBiAGwA
ZQBOAGEAbQBlAAAVdABhAGIAbABlAE8AdwBuAGUAcgAABycAfAB8AAEHfAB8ACcAATNlAG4AZAAg
AHEAdQBlAHIAeQAgAG4AbwBuAC0AQwBUAEUAIABjAG8AbAB1AG0AbgBzAAEDOwAADXIAbwB3AG4A
dQBtAAALcgBvAHcAaQBkAAAPbgBlAHgAdAB2AGEAbAAAD3MAeQBzAGQAYQB0AGUAABMNAAoAUwBl
AGEAcgBjAGgAIAAAFSAAPAA8AGMAbwBsAHUAbQBuAF8AAAU+AD4AABUgADwAPABHAFUARQBTAFMA
PgA+AAALYwBvAHUAbgB0AAAHcwB1AG0AABVyAG8AdwBfAG4AdQBtAGIAZQByAAAvLQAtAD4AIABh
AGcAZwByAGUAZwBhAHQAZQAgAGYAdQBuAGMAdABpAG8AbgAgAAEVLQAtAD4AIAB0AGEAYgBsAGUA
IAABFVIATwBXAF8ATgBVAE0AQgBFAFIAAAMiAAADWwAAACVBvK/bCdlMtPHzSjpLO6kABCABAQgD
IAABBSABARERBCABAQ4GIAEBEYCVBxUSgL0BHgAHFRKAvQETAAUAABKBkQUgAgEcGAYgAQESgZUD
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
N2NlNDQxYjhhAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTkAAEcBABouTkVURnJhbWV3b3Jr
LFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNAkB
AARJdGVtAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRl
ciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlU
b2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0
AgAAAAAAAAAAAAAAUEFEUEFEULQAAADcHwEAAAAAAAAAAAD2HwEAACAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA6B8BAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
QAEA7AMAAAAAAAAAAAAA7AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBEwDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACgDAAABADAAMAAwADAAMAA0
AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4A
YQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBD
AF8AMAA5ADEANAA1ADMANwBhADcAOQA5ADMANAAzADgAZAA4ADQANAA3AGEANgAxADcAYwBlADQA
NAAxAGIAOABhAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAw
AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwAwADkAMQA0ADUAMwA3AGEA
NwA5ADkAMwA0ADMAOABkADgANAA0ADcAYQA2ADEANwBjAGUANAA0ADEAYgA4AGEALgBkAGwAbAAA
AEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAA
QAAgACAAMgAwADEAOQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAA
AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfADAAOQAxADQA
NQAzADcAYQA3ADkAOQAzADQAMwA4AGQAOAA0ADQANwBhADYAMQA3AGMAZQA0ADQAMQBiADgAYQAu
AGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwAwADkAMQA0ADUA
MwA3AGEANwA5ADkAMwA0ADMAOABkADgANAA0ADcAYQA2ADEANwBjAGUANAA0ADEAYgA4AGEAAAA0
AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAOAAIAAEA
QQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAEADAAAAAgwAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_0914537a7993438d8447a617ce441b8a</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="4">
                        <arrayElement
                          dataType="System.String">&lt;SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
&lt;SOAP-ENV:Body&gt;
&lt;a1:ScriptBreakpointInfo id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/Microsoft.SqlServer.VSTAHosting/Microsoft.SqlServer.VSTAScriptingLib%2C%20Version%3D12.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D89845dcd8080cc91"&gt;
&lt;Enabled&gt;true&lt;/Enabled&gt;
&lt;File id="ref-3"&gt;ComponentWrapper.cs&lt;/File&gt;
&lt;FileLine&gt;81&lt;/FileLine&gt;
&lt;FileColumn&gt;9&lt;/FileColumn&gt;
&lt;/a1:ScriptBreakpointInfo&gt;
&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</arrayElement>
                        <arrayElement
                          dataType="System.String">&lt;SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
&lt;SOAP-ENV:Body&gt;
&lt;a1:ScriptBreakpointInfo id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/Microsoft.SqlServer.VSTAHosting/Microsoft.SqlServer.VSTAScriptingLib%2C%20Version%3D12.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D89845dcd8080cc91"&gt;
&lt;Enabled&gt;true&lt;/Enabled&gt;
&lt;File id="ref-3"&gt;ComponentWrapper.cs&lt;/File&gt;
&lt;FileLine&gt;63&lt;/FileLine&gt;
&lt;FileColumn&gt;12&lt;/FileColumn&gt;
&lt;/a1:ScriptBreakpointInfo&gt;
&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</arrayElement>
                        <arrayElement
                          dataType="System.String">&lt;SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
&lt;SOAP-ENV:Body&gt;
&lt;a1:ScriptBreakpointInfo id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/Microsoft.SqlServer.VSTAHosting/Microsoft.SqlServer.VSTAScriptingLib%2C%20Version%3D12.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D89845dcd8080cc91"&gt;
&lt;Enabled&gt;true&lt;/Enabled&gt;
&lt;File id="ref-3"&gt;main.cs&lt;/File&gt;
&lt;FileLine&gt;399&lt;/FileLine&gt;
&lt;FileColumn&gt;9&lt;/FileColumn&gt;
&lt;/a1:ScriptBreakpointInfo&gt;
&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</arrayElement>
                        <arrayElement
                          dataType="System.String">&lt;SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
&lt;SOAP-ENV:Body&gt;
&lt;a1:ScriptBreakpointInfo id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/Microsoft.SqlServer.VSTAHosting/Microsoft.SqlServer.VSTAScriptingLib%2C%20Version%3D12.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D89845dcd8080cc91"&gt;
&lt;Enabled&gt;true&lt;/Enabled&gt;
&lt;File id="ref-3"&gt;main.cs&lt;/File&gt;
&lt;FileLine&gt;412&lt;/FileLine&gt;
&lt;FileColumn&gt;13&lt;/FileColumn&gt;
&lt;/a1:ScriptBreakpointInfo&gt;
&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">1d440976a4bb8dcd62e3529e1ac1fb91</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">9ac41d706b78090a10478228125c6e6e6605d1f0</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Connections[Connection]"
                      connectionManagerID="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      connectionManagerRefId="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      name="Connection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Inputs[Input 1]"
                      hasSideEffects="true"
                      name="Input 1">
                      <inputColumns>
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Inputs[Input 1].Columns[QCSR_ID]"
                          cachedDataType="i4"
                          cachedName="QCSR_ID"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QCSR_ID]" />
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Inputs[Input 1].Columns[QCSR_SQL]"
                          cachedDataType="nText"
                          cachedName="QCSR_SQL"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QCSR_SQL]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Outputs[Output 1]"
                      hasSideEffects="true"
                      name="Output 1">
                      <outputColumns>
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Outputs[Output 1].Columns[QCSO_Name]"
                          dataType="wstr"
                          length="128"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Outputs[Output 1].Columns[QCSO_Name]"
                          name="QCSO_Name" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Outputs[Output 1].Columns[QCSO_QCSR_ID]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Outputs[Output 1].Columns[QCSO_QCSR_ID]"
                          name="QCSO_QCSR_ID" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="SRC_OLEDB_SQLRaw"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset"></property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">Select QCSR_ID,QCSR_SQL from DSGTOOLS.QUERY_CTE_SQL_RAW where cast(QCSR_MODIFIED_DT as date) = current date</property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">2</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping">"Parameter0:Input",{8B232BAE-D7C7-444F-8EC9-6956B5A3D3FF};</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      connectionManagerRefId="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QCSR_ID]"
                          dataType="i4"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].ExternalColumns[QCSR_ID]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QCSR_ID]"
                          name="QCSR_ID"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QCSR_SQL]"
                          dataType="nText"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].ExternalColumns[QCSR_SQL]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QCSR_SQL]"
                          name="QCSR_SQL"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].ExternalColumns[QCSR_ID]"
                          dataType="i4"
                          name="QCSR_ID" />
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].ExternalColumns[QCSR_SQL]"
                          dataType="nText"
                          name="QCSR_SQL" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[QCSR_ID]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[QCSR_ID]"
                          name="QCSR_ID" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[QCSR_SQL]"
                          dataType="nText"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[QCSR_SQL]"
                          name="QCSR_SQL" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT.Paths[OLE DB Source Output]"
                  endId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Inputs[Input 1]"
                  name="OLE DB Source Output"
                  startId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output]" />
                <path
                  refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT.Paths[Output 1]"
                  endId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT.Inputs[OLE DB Destination Input]"
                  name="Output 1"
                  startId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns.Outputs[Output 1]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\EST_LOAD_QUERY_CTE_SQL_OUTPUT"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{8B2F05AC-CAEF-4238-9861-B0036BE67B1B}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="EST_LOAD_QUERY_CTE_SQL_OUTPUT"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{3B45F8B9-DB8E-4026-A831-03E4C0EBD40D}"
              SQLTask:SqlStatementSource="call dsgtools.query_cte_sql_output_update()" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\EST_Trunacte_DSGTools_QUERY_CTE_SQL_OUTPUT"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:Disabled="True"
          DTS:DTSID="{F41D1DC4-695B-4408-8537-5800390FA100}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="EST_Trunacte_DSGTools_QUERY_CTE_SQL_OUTPUT"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0"
            DTS:LoggingMode="2" />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{3B45F8B9-DB8E-4026-A831-03E4C0EBD40D}"
              SQLTask:SqlStatementSource="TRUNCATE TABLE DSGTOOLS.QUERY_CTE_SQL_OUTPUT  IMMEDIATE" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\EST_TRUNCATE_QUERY_STAGING_CTE_SQL_OUTPUT"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{34849F19-5A21-41E1-B506-8C37A87BFE15}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="EST_TRUNCATE_QUERY_STAGING_CTE_SQL_OUTPUT"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{3B45F8B9-DB8E-4026-A831-03E4C0EBD40D}"
              SQLTask:SqlStatementSource="Truncate dsgtools.query_staging_cte_sql_output IMMEDIATE" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{2CB0C354-4F93-413A-91AA-FF644D6892E1}"
          DTS:From="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\EST_TRUNCATE_QUERY_STAGING_CTE_SQL_OUTPUT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{466056B8-1EC8-4FC2-8BA8-380238D46D6E}"
          DTS:From="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\EST_LOAD_QUERY_CTE_SQL_OUTPUT" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{F17ADE22-4D39-43AC-8A5B-9CD739CC5AC5}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="SQC_DSGTools_QUERY_CTE_SQL_RAW">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{FA930EEC-64B5-48EC-989D-723CAE0F60CF}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0"
            DTS:LoggingMode="2" />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">"DSGTOOLS"."QUERY_STAGING_CTE_SQL_RAW"</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">insert into DSGTOOLS.QUERY_CTE_SQL_RAW_test(QCSR_QSR_ID,QCSR_NAME,QCSR_SQL,QCSR_SQLHASH,QCSR_SQL_UPPER,QCSR_SQLHASH_UPPER,QCSR_CREATED_BY,QCSR_MODIFIED_BY)
 values(123, 'The name of the CTE','The SQL of the CTE', 'The MD5 hash of QCSR_SQL ', 'Upper-case of QCSR_SQL', 'The MD5 hash of upper-case QCSR_SQL', current user,current user)</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      connectionManagerRefId="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].Columns[QCSR_QSR_ID]"
                          cachedDataType="i4"
                          cachedName="QCSR_QSR_ID"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_QSR_ID]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[QCSR_QSR_ID]" />
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].Columns[CTEName]"
                          cachedDataType="wstr"
                          cachedLength="128"
                          cachedName="CTEName"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_NAME]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[CTEName]" />
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].Columns[RAWCTESQL]"
                          cachedDataType="nText"
                          cachedName="RAWCTESQL"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_SQL]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQL]" />
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].Columns[RAWCTESQLHASH]"
                          cachedDataType="wstr"
                          cachedLength="128"
                          cachedName="RAWCTESQLHASH"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_SQLHASH]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQLHASH]" />
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].Columns[RAWCTESQLUPPER]"
                          cachedDataType="nText"
                          cachedName="RAWCTESQLUPPER"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_SQL_UPPER]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQLUPPER]" />
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].Columns[RAWCTESQLHASHUPPER]"
                          cachedDataType="wstr"
                          cachedLength="128"
                          cachedName="RAWCTESQLHASHUPPER"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_SQLHASH_UPPER]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQLHASHUPPER]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_QSR_ID]"
                          dataType="i4"
                          name="STG_QSR_ID" />
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_NAME]"
                          dataType="wstr"
                          length="255"
                          name="STG_NAME" />
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_SQL]"
                          dataType="nText"
                          name="STG_SQL" />
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_SQLHASH]"
                          dataType="wstr"
                          length="128"
                          name="STG_SQLHASH" />
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_SQL_UPPER]"
                          dataType="nText"
                          name="STG_SQL_UPPER" />
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input].ExternalColumns[STG_SQLHASH_UPPER]"
                          dataType="wstr"
                          length="128"
                          name="STG_SQLHASH_UPPER" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="SC_GetTablesColumns"
                  version="9">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="54">
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[columnTableStmt.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace gudusoft.gsqlparser.demos.gettablecolumns
{

    using System.IO;
    using EDbVendor = gudusoft.gsqlparser.EDbVendor;
    using TCustomSqlStatement = gudusoft.gsqlparser.TCustomSqlStatement;
    using TGSqlParser = gudusoft.gsqlparser.TGSqlParser;
    using TObjectName = gudusoft.gsqlparser.nodes.TObjectName;
    using TTable = gudusoft.gsqlparser.nodes.TTable;



    public class columnTableStmt
	{

		public static void doIt(String sqlFilename)
		{

            EDbVendor dbVendor = EDbVendor.dbvmssql;
			Console.WriteLine("Selected SQL dialect: " + dbVendor.ToString());


			TGSqlParser sqlparser = new TGSqlParser(dbVendor);
			sqlparser.sqlfilename = sqlFilename;

			int ret = sqlparser.parse();
			if (ret == 0)
			{
				for (int i = 0;i < sqlparser.sqlstatements.size();i++)
				{
					iterateStmt(sqlparser.sqlstatements.get(i));
				}
			}
			else
			{
				Console.WriteLine(sqlparser.Errormessage);
			}
		}

		protected internal static void iterateStmt(TCustomSqlStatement stmt)
		{
		   // System.out.println(stmt.sqlstatementtype.toString());

			for (int i = 0;i < stmt.tables.size();i++)
			{
				TTable table = stmt.tables.getTable(i);
				string table_name = table.Name;
				Console.WriteLine("Analyzing: " + table_name + " <- " + stmt.sqlstatementtype);
				for (int j = 0; j < table.LinkedColumns.size(); j++)
				{
				  TObjectName objectName = table.LinkedColumns.getObjectName(j);
				  string column_name = table_name + "." + objectName.ColumnNameOnly.ToLower();
				  if (!objectName.TableDetermined)
				  {
					 column_name = "?." + objectName.ColumnNameOnly.ToLower();
				  }
				  Console.WriteLine("Analyzing: " + column_name + " in " + stmt.sqlstatementtype + " " + objectName.Location);
				}
			}

			for (int i = 0;i < stmt.Statements.size();i++)
			{
			   iterateStmt(stmt.Statements.get(i));
			}

		}


	}

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[common.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace gudusoft.gsqlparser.demos.util
{
    using gudusoft.gsqlparser;
    using EDbVendor = gudusoft.gsqlparser.EDbVendor;
    public class Common
    {
        public static EDbVendor GetEDbVendor(string[] args)
        {
            EDbVendor dbVendor = EDbVendor.dbvoracle;
            return GetEDbVendor(args, dbVendor);
        }

        internal static EDbVendor GetEDbVendor(string[] args, EDbVendor defaultVendor)
        {
            List<string> argList = new List<string>(args);
            int index = argList.IndexOf("/t");
            EDbVendor dbVendor = defaultVendor;
            if (index != -1 && args.Length > index + 1)
            {
                if (args[index + 1].Equals("mssql", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvmssql;
                }
                else if (args[index + 1].Equals("db2", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvdb2;
                }
                else if (args[index + 1].Equals("mysql", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvmysql;
                }
                else if (args[index + 1].Equals("netezza", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvnetezza;
                }
                else if (args[index + 1].Equals("teradata", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvteradata;
                }
                else if (args[index + 1].Equals("oracle", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvoracle;
                }
                else if (args[index + 1].Equals("informix", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvinformix;
                }
                else if (args[index + 1].Equals("sybase", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvsybase;
                }
                else if (args[index + 1].Equals("postgresql", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvpostgresql;
                }
                else if (args[index + 1].Equals("hive", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvhive;
                }
                else if (args[index + 1].Equals("greenplum", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvgreenplum;
                }
                else if (args[index + 1].Equals("redshift", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvredshift;
                }
                else if (args[index + 1].Equals("mdx", StringComparison.CurrentCultureIgnoreCase))
                {
                    dbVendor = EDbVendor.dbvmdx;
                }
            }

            return dbVendor;
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_18b389345fb6409ea23b3d67d5dde17c</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_18b389345fb6409ea23b3d67d5dde17c</msb:DisplayName>
		<msb:ProjectId>{2FF0ABAA-E71B-4B7E-800B-67E605AF85A7}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_18b389345fb6409ea23b3d67d5dde17c.csproj"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="utils\MyUtil.cs"/>
		<msb:File Include="DSGTools.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
		<msb:File Include="ColumnImpact.cs"/>
		<msb:File Include="joinRelationAnalyze\joinRelationAnalyze.cs"/>
		<msb:File Include="columnTableStmt.cs"/>
		<msb:File Include="ClassDiagram1.cd"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="common.cs"/>
		<msb:File Include="LinkedHashMap.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:Breakpoint Include="0bf2a6ced59b4e3badc0d9ba821cc13e">
			<msb:FileName>ColumnImpact.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>2560</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[
#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using gudusoft.gsqlparser;
using gudusoft.gsqlparser.pp;
using System.Text;
using gudusoft.gsqlparser.demos.util;
using gudusoft.gsqlparser.nodes;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Xml;
using gudusoft.gsqlparser.demos.gettablecolumns;
//using gudusoft.gsqlparser.demos.util;
using gudusoft.gsqlparser.demos.columnImpact;
using GetCTEs.utils;
using System.Security.Cryptography;
using GetCTEs.DSGTools;

//using gudusoft.gsqlparser.Units;
#endregion

[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion


    /// <summary>
    /// This static Constructor is guaranteed to be called exactly once "before the first instance is created or any static members are referenced.", so therefore before the dependent assemblies are loaded
    /// </summary>
    //static ScriptMain()
    //{
    //    //AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
    //}

    public override void PreExecute()
    {
        base.PreExecute();
        AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
    }

    static System.Reflection.Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
    {
        if (args.Name.Contains("gsqlparser"))
        {
            string path = @"C:\Windows\Microsoft.NET\Framework\v4.0.30319\";
            return System.Reflection.Assembly.LoadFile(System.IO.Path.Combine(path, "gudusoft.gsqlparser.dll"));
        }
        return null;
    }

    public class queryinfo
    {
        public string strName { get; set; }
        public string strStmt { get; set; }
        public string strID { get; set; }
        public string strParentID { get; set; }
    }

    TGSqlParser sqlparser = new TGSqlParser(EDbVendor.dbvdb2);
    public static List<queryinfo> qiList = new List<queryinfo>();
    public static List<columnInfo> ciList = new List<columnInfo>();
    public static List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT> lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT = new List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT>();

    public override void PostExecute()
    {
        //IDTSVariables100 vars;
        base.PostExecute();

        //VariableDispenser variableDispenser = (VariableDispenser)this.VariableDispenser;
        //variableDispenser.LockForWrite("User::bDFT_DSGTools_QUERY_CTE_SQL_RAW");
        //variableDispenser.GetVariables(out vars);

        //// Set the variable
        //vars["User::lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT"].Value = true;

        ////Unlock the variable 
        //vars.Unlock();

        this.Variables.bDFTDSGToolsQUERYCTESQLRAW = true;
    }


    public string FormatSql(TGSqlParser inParser)
    {
        string strResult = null;
        gudusoft.gsqlparser.pp.para.GFmtOpt option = gudusoft.gsqlparser.pp.para.GFmtOptFactory.newInstance();
        option.removeComment = true;
        option.selectColumnlistStyle = gudusoft.gsqlparser.pp.para.styleenums.TAlignStyle.AsStacked;
        option.selectColumnlistComma = gudusoft.gsqlparser.pp.para.styleenums.TLinefeedsCommaOption.LfAfterComma;
        option.selectItemInNewLine = false;
        option.alignAliasInSelectList = true;
        option.treatDistinctAsVirtualColumn = true;
        option.caseKeywords = gudusoft.gsqlparser.pp.para.styleenums.TCaseOption.CoUppercase;
        option.fromClauseInNewLine = true;
        option.selectFromclauseJoinOnInNewline = true;
        option.wsPaddingParenthesesOfSubQuery = true;
        option.emptyLines = gudusoft.gsqlparser.pp.para.styleenums.TEmptyLinesOption.EloMergeIntoOne;
        option.wsPaddingParenthesesInExpression = true;
        option.insertValuelistStyle = gudusoft.gsqlparser.pp.para.styleenums.TAlignStyle.AsStacked;
        option.caseWhenThenInSameLine = false;
        option.andOrUnderWhere = true;

        strResult = gudusoft.gsqlparser.pp.stmtformatter.FormatterFactory.pp(inParser, option);


        return strResult;

    }
    public static string getSubStmt(string inStmt)
    {
        string outStmt = null;
        Regex regExStmt = new Regex(@"^\((.*)\)$",
                                         RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.Singleline);
        Match mStmt = null;
        mStmt = regExStmt.Match(inStmt);
        outStmt = mStmt.Groups[1].Value.ToString();

        return outStmt;

    }

    public static void getSubQueries(string inParent, string inStmt)
    {
        TGSqlParser sqParser = new TGSqlParser(EDbVendor.dbvdb2);
        sqParser.sqltext = inStmt;
        int iID = 0;
        int sqRet = sqParser.parse();

        if (sqRet == 0)
        {



            TCustomSqlStatement sqStmt = (TCustomSqlStatement)sqParser.sqlstatements[0];
            TTable lcTable = null;

            for (int iTbl = 0; iTbl < sqStmt.tables.size(); iTbl++)
            {
                lcTable = sqStmt.tables.getTable(iTbl);
                if (lcTable.TableType == ETableSource.subquery)
                {
                    queryinfo qiSubQuery = new queryinfo();
                    qiSubQuery.strParentID = inParent;
                    qiSubQuery.strID = qiSubQuery.strParentID + '.' + iID.ToString();
                    qiSubQuery.strName = lcTable.AliasName.ToString();
                    qiSubQuery.strStmt = getSubStmt(lcTable.Subquery.ToString());
                    qiList.Add(qiSubQuery);
                    iID++;

                    getSubQueries(qiSubQuery.strID, qiSubQuery.strStmt);

                }
            }
        }






    }

    public class columnInfo
    {
        public string strSchemaName { get; set; }
        public string strTableName { get; set; }
        public string strStatementType { get; set; }
        public string strColumnTable { get; set; }
        public string strColumn { get; set; }
        public string strCTEName { get; set; }
    }

    #region not used
    //public void iterateStmt_getCTEs(TCustomSqlStatement stmt, ref string formatedCTEs)
    //{
    //    LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap = new LinkedHashMap<string, TCustomSqlStatement>();
    //    string MyErrormessage = "";
    //    Dictionary<string, List<string>> CTEcolumns = new Dictionary<string, List<string>>();
    //    List<string> lst_endquery_nonCTE_Cols = new List<string>();
    //    string ErrMsg_FromSQLParser = "";

    //    ColumnImpact impact = new ColumnImpact(sqlparser.sqltext, sqlparser.DbVendor, true, true);
    //    impact.CollectColumnInfo = false;

    //    //int ret0 = sqlparser.checkSyntax();
    //    int ret = sqlparser.parse();

    //    if (ret != 0)
    //    {
    //        //buffer.Append(sqlparser.Errormessage + "\r\n");
    //        MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
    //    }
    //    else
    //    {
    //        impact.columnCollection.Clear();

    //        //for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
    //        //{
    //        if (stmt is TCustomSqlStatement)
    //        {
    //            //impact.dependMap.Clear();
    //            //impact.aliases.Clear();
    //            impact.currentSource = null;
    //            impact.cteMap.Clear();
    //            impact.currentClauseMap.Clear();
    //            impact.accessMap.Clear();

    //            string endquery_nonCTE_Cols = "";
    //            impact.initCTEMap(stmt, ref CTEcolumns, ref endquery_nonCTE_Cols);
    //            lst_endquery_nonCTE_Cols.Add(endquery_nonCTE_Cols);
    //        }
    //        //}
    //    }

    //    if (impact.cteMap.Count <= 0)
    //    {
    //        MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
    //    }
    //    else
    //    {
    //        MyCTEsMap = impact.cteMap;
    //    }

    //    #region if not found from above, try to find from "MyCTEsMap" already found 
    //    Dictionary<string, List<string>> CTEcolumns_From_myCTEsMap = new Dictionary<string, List<string>>();
    //    impact.getCTEColumns(MyCTEsMap, ref CTEcolumns_From_myCTEsMap);
    //    #endregion if not found from above, try to find from "MyCTEsMap" already found

    //    MyUtil.MergeDictionary(CTEcolumns_From_myCTEsMap, CTEcolumns);
    //    string myformatedCTEs = "";
    //    MyUtil.FormatCTEs(CTEcolumns, lst_endquery_nonCTE_Cols, ErrMsg_FromSQLParser, ref myformatedCTEs);
    //    formatedCTEs = myformatedCTEs;
    //}
    #endregion not used

    protected internal static void iterateStmt(TCustomSqlStatement stmt)
    {
        // System.out.println(stmt.sqlstatementtype.toString());

        for (int i = 0; i < stmt.tables.size(); i++)
        {
            TTable table = stmt.tables.getTable(i);
            string table_name = table.Name;
            Console.WriteLine("Analyzing: " + table_name + " <- " + stmt.sqlstatementtype);
            columnInfo ciBase = new columnInfo();


            ciBase.strSchemaName = table.TableName.SchemaString.ToUpper().Replace((char)34, (char)32).Trim();
            ciBase.strTableName = table.TableName.TableString.ToUpper().Replace((char)34, (char)32).Trim();
            ciBase.strStatementType = stmt.sqlstatementtype.ToString().ToUpper().Trim();
            ciBase.strColumn = "";
            ciBase.strColumnTable = "";
            if (table.CTE != null)
                ciBase.strCTEName = table.CTE.ToString().ToUpper().Replace((char)34, (char)32).Trim();
            ciList.Add(ciBase);
            for (int j = 0; j < table.LinkedColumns.size(); j++)
            {
                TObjectName objectName = table.LinkedColumns.getObjectName(j);
                columnInfo ciCol = new columnInfo();
                ciCol.strSchemaName = table.TableName.SchemaString.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strTableName = table.TableName.TableString.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strStatementType = stmt.sqlstatementtype.ToString().ToUpper().Trim();
                ciCol.strColumnTable = table_name.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strColumn = objectName.ColumnNameOnly.ToUpper().Replace((char)34, (char)32).Trim();
                if (!objectName.TableDetermined)
                {
                    ciCol.strColumnTable = "";
                }
                ciList.Add(ciCol);
            }
        }

        for (int i = 0; i < stmt.Statements.size(); i++)
        {
            iterateStmt(stmt.Statements.get(i));
        }

    }

    protected internal  void iterateStmt(TCustomSqlStatement stmt, ref string formatedCTEs)
    {
        // System.out.println(stmt.sqlstatementtype.toString());

        for (int i = 0; i < stmt.tables.size(); i++)
        {
            TTable table = stmt.tables.getTable(i);
            string table_name = table.Name;
            Console.WriteLine("Analyzing: " + table_name + " <- " + stmt.sqlstatementtype);
            columnInfo ciBase = new columnInfo();


            ciBase.strSchemaName = table.TableName.SchemaString.ToUpper().Replace((char)34, (char)32).Trim();
            ciBase.strTableName = table.TableName.TableString.ToUpper().Replace((char)34, (char)32).Trim();
            ciBase.strStatementType = stmt.sqlstatementtype.ToString().ToUpper().Trim();
            ciBase.strColumn = "";
            ciBase.strColumnTable = "";

            #region "get CTEs"
            ColumnImpact impact = new ColumnImpact(sqlparser.sqltext, sqlparser.DbVendor, true, true);
            string myformatedCTEs = "";
            impact.iterateStmt_getCTEs(stmt, ref myformatedCTEs);
            ciBase.strCTEName = myformatedCTEs;
            #endregion "get CTEs"

            //if (table.CTE != null)
            //ciBase.strCTEName = table.CTE.ToString().ToUpper().Replace((char)34, (char)32).Trim();
            ciList.Add(ciBase);
            for (int j = 0; j < table.LinkedColumns.size(); j++)
            {
                TObjectName objectName = table.LinkedColumns.getObjectName(j);
                columnInfo ciCol = new columnInfo();
                ciCol.strSchemaName = table.TableName.SchemaString.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strTableName = table.TableName.TableString.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strStatementType = stmt.sqlstatementtype.ToString().ToUpper().Trim();
                ciCol.strColumnTable = table_name.ToUpper().Replace((char)34, (char)32).Trim();
                ciCol.strColumn = objectName.ColumnNameOnly.ToUpper().Replace((char)34, (char)32).Trim();
                if (!objectName.TableDetermined)
                {
                    ciCol.strColumnTable = "";
                }
                ciList.Add(ciCol);
            }
        }

        for (int i = 0; i < stmt.Statements.size(); i++)
        {
            iterateStmt(stmt.Statements.get(i));
        }

    }


    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        var ven = sqlparser.DbVendor;

        qiList.Clear();
        ciList.Clear();
        var blobLength = Convert.ToInt32(Row.QSRSQL.Length);
        var blobData = Row.QSRSQL.GetBlobData(0, blobLength);
        var strSTGSQL = System.Text.Encoding.Unicode.GetString(blobData);
        //List<queryinfo> qiList = new List<queryinfo>();
        var myQSRID = Row.QSRID;

        try
        {
            #region "get CTEs"
            var QSR_SQL = MyUtil.ReplaceMultipleSpacesToSingleSpace(strSTGSQL);
            ColumnImpact impact = new ColumnImpact(QSR_SQL, ven, true, true);
            impact.CollectColumnInfo = false;
            LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap = new LinkedHashMap<string, TCustomSqlStatement>();
            string ErrMsg_FromSQLParser = "";

            //impact.impactSQL(ref MyCTEsMap, ref ErrMsg_FromSQLParser);
            Dictionary<string, List<string>> CTEcolumns = new Dictionary<string, List<string>>();
            List<string> lst_endquery_nonCTE_Cols = new List<string>();
            impact.impactSQL(ref MyCTEsMap, ref ErrMsg_FromSQLParser, ref CTEcolumns, ref lst_endquery_nonCTE_Cols);
            #region if not found from above, try to find from "MyCTEsMap" already found 
            Dictionary<string, List<string>> CTEcolumns_From_myCTEsMap = new Dictionary<string, List<string>>();
            impact.getCTEColumns(MyCTEsMap, ref CTEcolumns_From_myCTEsMap);
            #endregion if not found from above, try to find from "MyCTEsMap" already found

            MyUtil.MergeDictionary(CTEcolumns_From_myCTEsMap, CTEcolumns);
            var lstDSGTOOLS_QUERY_CTE_SQL_RAW = impact.prop_lst_DSGTOOLS_QUERY_CTE_SQL_RAW;
            lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT = impact.prop_lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT;

            //Originally lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_QSR_ID is a dummy number. Re-assign QCSR_QSR_ID to Row.QSRID
            for (int i = 0; i < lstDSGTOOLS_QUERY_CTE_SQL_RAW.Count; i++)
            {
                lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_QSR_ID = Convert.ToInt32(myQSRID);
            }
            #endregion "get CTEs"

            for (int i = 0; i < lstDSGTOOLS_QUERY_CTE_SQL_RAW.Count; i++)
            {
                string hashSQL = null;
                string hashSQLUPPER = null;
                if (!string.IsNullOrWhiteSpace(lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_SQL))
                {

                    Output0Buffer.AddRow();
                    //col1: QCSR_ID, auto ID
                    var QCSR_ID = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_ID;
                    //col2: QCSR_QSR_ID
                    var QCSR_QSR_ID = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_QSR_ID;
                    Output0Buffer.QCSRQSRID = QCSR_QSR_ID;
                    //col3: QCSR_NAME
                    Output0Buffer.CTEName = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_NAME;
                    //col4: QCSR_SQL
                    var QCSR_SQL = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_SQL;
                    Output0Buffer.RAWCTESQL.AddBlobData(Encoding.Unicode.GetBytes(QCSR_SQL));
                    //Row.RAWCTESQL.AddBlobData(Encoding.Unicode.GetBytes(QCSR_SQL));

                    var strSTGSQLUPPER = QCSR_SQL.ToUpper();
                    using (MD5 md5Hash = MD5.Create())
                    {
                        hashSQL = GetMd5Hash(md5Hash, QCSR_SQL);
                        hashSQLUPPER = GetMd5Hash(md5Hash, strSTGSQLUPPER);
                    }

                    //col5: QCSR_SQLHASH
                    Output0Buffer.RAWCTESQLHASH = hashSQL;
                    //col6: QCSR_SQL_UPPER
                    Output0Buffer.RAWCTESQLUPPER.AddBlobData(Encoding.Unicode.GetBytes(strSTGSQLUPPER));
                    //col7: QCSR_SQLHASH_UPPER 
                    Output0Buffer.RAWCTESQLHASHUPPER = hashSQLUPPER.ToUpper();
                }
            }

            #region old 
            //for (int i = 0; i < lstDSGTOOLS_QUERY_CTE_SQL_RAW.Count; i++)
            //{
            //    var QCSR_SQL = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_SQL;
            //    if (!String.IsNullOrWhiteSpace(QCSR_SQL))
            //    {
            //        string hashSQL = null;
            //        string hashSQLUPPER = null;

            //        Output0Buffer.AddRow();
            //        //col1: QCSR_ID, auto ID
            //        var QCSR_ID = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_ID;
            //        //col2: QCSR_QSR_ID
            //        var QCSR_QSR_ID = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_QSR_ID;
            //        Output0Buffer.QCSRQSRID = QCSR_QSR_ID;
            //        //col3: QCSR_NAME
            //        Output0Buffer.CTEName = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_NAME;
            //        //col4: QCSR_SQL
            //        //var QCSR_SQL = lstDSGTOOLS_QUERY_CTE_SQL_RAW[i].QCSR_SQL;
            //        Output0Buffer.RAWCTESQL.AddBlobData(Encoding.Unicode.GetBytes(QCSR_SQL));
            //        //Row.RAWCTESQL.AddBlobData(Encoding.Unicode.GetBytes(QCSR_SQL));

            //        var strSTGSQLUPPER = QCSR_SQL.ToUpper();
            //        using (MD5 md5Hash = MD5.Create())
            //        {
            //            hashSQL = GetMd5Hash(md5Hash, QCSR_SQL);
            //            hashSQLUPPER = GetMd5Hash(md5Hash, strSTGSQLUPPER);
            //        }

            //        //col5: QCSR_SQLHASH
            //        Output0Buffer.RAWCTESQLHASH = hashSQL;
            //        //col6: QCSR_SQL_UPPER
            //        Output0Buffer.RAWCTESQLUPPER.AddBlobData(Encoding.Unicode.GetBytes(strSTGSQLUPPER));
            //        //col7: QCSR_SQLHASH_UPPER 
            //        Output0Buffer.RAWCTESQLHASHUPPER = hashSQLUPPER.ToUpper();
            //    }
            //}
            #endregion old 

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message.ToString());
        }
        catch
        {
        }

        #region "Old stuff"
        //sqlparser.sqltext = strSTGSQL;

        //int ret = sqlparser.parse();

        //if (ret == 0)
        //{
        //    try
        //    {
        //        for (int i = 0; i < sqlparser.sqlstatements.Count; i++)
        //        {
        //            if (sqlparser.sqlstatements[i] is TCustomSqlStatement)
        //            {
        //                TCustomSqlStatement stmt = (TCustomSqlStatement)sqlparser.sqlstatements[i];
        //                //iterateStmt(stmt);

        //                string myformatedCTEs = "";
        //                iterateStmt(stmt, ref myformatedCTEs);

        //                #region "test"
        //                //string myformatedCTEs = "";
        //                //iterateStmt_getCTEs(stmt, ref myformatedCTEs);
        //                #endregion "test"

        //                //Console.WriteLine("This");

        //                /*
        //                xmlVisitor xv2 = new xmlVisitor();
        //                xv2.run(sqlparser);


        //                // Create the XmlDocument.
        //                XmlDocument doc = new XmlDocument();
        //                doc.LoadXml(xv2.FormattedXml);



        //                doc.PreserveWhitespace = true;
        //                doc.Save("G:\\QSID907.xml");



        //                queryinfo qi = new queryinfo();
        //                qi.strName = "";
        //                qi.strStmt = xv2.FormattedXml.ToString();
        //                qi.strParentID = "";
        //                qi.strID = i.ToString();
        //                qiList.Add(qi);
        //                */

        //                //                            Console.WriteLine(xv2.FormattedXml);
        //                /*
        //                TResultColumnList trc = (TResultColumnList)stmt.ResultColumnList;


        //                queryinfo qi = new queryinfo();

        //                stmt.tables





        //                qi.strName = "";
        //                qi.strStmt = stmt.ToString();
        //                qi.strParentID = "";
        //                qi.strID = i.ToString();
        //                qiList.Add(qi);

        //                if (stmt.CteList != null && stmt.CteList.Count > 0)
        //                {
        //                    TCTEList cteList = stmt.CteList;

        //                    for (int iCTE = 0; iCTE < cteList.Count; iCTE++)
        //                    {
        //                        TCTE cte = cteList.getCTE(iCTE);
        //                        queryinfo qiCTE = new queryinfo();
        //                        qiCTE.strName = cte.TableName.ToString();
        //                        qiCTE.strStmt = getSubStmt(cte.PreparableStmt.ToString());
        //                        qiCTE.strParentID = i.ToString();
        //                        qiCTE.strID = qiCTE.strParentID + '.' + iCTE.ToString();
        //                        qiList.Add(qiCTE);

        //                        getSubQueries(qiCTE.strID, qiCTE.strStmt);

        //                    }
        //                }*/
        //            }
        //        }
        //        for (int iCI = 0; iCI < ciList.Count; iCI++)
        //        {
        //            //Output0Buffer.AddRow();

        //            //Output0Buffer.QSRID = Row.QSRID;
        //            //if (!String.IsNullOrEmpty(ciList[iCI].strCTEName))
        //            //    Output0Buffer.CTEName = ciList[iCI].strCTEName.ToString();
        //            //else
        //            //    Output0Buffer.CTEName = "CTEs Not found";
        //            //Output0Buffer.RAWCTESQL = strSTGSQL;

        //            //var strSTGSQLUPPER = strSTGSQL.ToUpper();
        //            //Output0Buffer.RAWCTESQLHASHUPPER = strSTGSQLUPPER;

        //            //using (MD5 md5Hash = MD5.Create())
        //            //{
        //            //    var hashSQL = GetMd5Hash(md5Hash, strSTGSQL);
        //            //    var hashSQLUPPER = GetMd5Hash(md5Hash, strSTGSQLUPPER);
        //            //    Output0Buffer.RAWCTESQLHASH = hashSQL;
        //            //    Output0Buffer.RAWCTESQLHASHUPPER = hashSQLUPPER;
        //            //}


        //            string hashSQL = null;
        //            string hashSQLUPPER = null;
        //            var strSTGSQLUPPER = strSTGSQL.ToUpper();
        //            Row.QSRID = myQSRID;
        //            if (!String.IsNullOrEmpty(ciList[iCI].strCTEName))
        //                Row.CTEName = ciList[iCI].strCTEName.ToString();
        //            else
        //                Row.CTEName = "CTEs Not found";
        //            Row.RAWCTESQL.AddBlobData(Encoding.Unicode.GetBytes(strSTGSQL));
        //            using (MD5 md5Hash = MD5.Create())
        //            {
        //                hashSQL = GetMd5Hash(md5Hash, strSTGSQL);
        //                hashSQLUPPER = GetMd5Hash(md5Hash, strSTGSQLUPPER);
        //            }

        //            Row.RAWCTESQLHASH = hashSQL;
        //            Row.RAWCTESQLHASHUPPER = hashSQLUPPER.ToUpper();
        //            Row.RAWCTESQLUPPER.AddBlobData(Encoding.Unicode.GetBytes(strSTGSQLUPPER));
        //        }

        //        /*
        //        for (int iQI = 0; iQI < qiList.Count; iQI++)
        //        {
        //            Output0Buffer.AddRow();
        //            Output0Buffer.CteName = qiList[iQI].strName;
        //            Output0Buffer.FormattedSQL.AddBlobData(Encoding.Unicode.GetBytes(qiList[iQI].strStmt.ToString()));
        //            Output0Buffer.FormattedSQLHash = qiList[iQI].strStmt.GetHashCode();
        //            Output0Buffer.ParentID = qiList[iQI].strParentID;
        //            Output0Buffer.SubQueryID = qiList[iQI].strID;
        //            //Output0Buffer.QSIDout = Row.QSID;
        //        }*/
        //    }





        //    catch (Exception ex)
        //    {
        //        Console.WriteLine(ex.Message.ToString());
        //    }
        #endregion "Old stuff"
    }

    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_18b389345fb6409ea23b3d67d5dde17c")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_18b389345fb6409ea23b3d67d5dde17c")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    int InputsFinished = 0;

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

        if (Buffer.EndOfRowset)
        {
            InputsFinished = InputsFinished + 1;
            if (InputsFinished == 1)
            {
                FinishOutputs();
                MarkOutputsFinished();
            }
        }

    }

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

    }

    public virtual void CreateNewOutputRows()
    {
    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 Connection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"Connection").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public Boolean bDFTDSGToolsQUERYCTESQLRAW
    {
        get
        {
            return (Boolean)(ParentComponent.ReadWriteVariables["bDFT_DSGTools_QUERY_CTE_SQL_RAW"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
        set
        {
            ParentComponent.ReadWriteVariables["bDFT_DSGTools_QUERY_CTE_SQL_RAW"].Value = value;
        }
    }

    public Int32 iDFTDSGToolsQUERYCTESQLRAW
    {
        get
        {
            return (Int32)(ParentComponent.ReadWriteVariables["iDFT_DSGTools_QUERY_CTE_SQL_RAW"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
        set
        {
            ParentComponent.ReadWriteVariables["iDFT_DSGTools_QUERY_CTE_SQL_RAW"].Value = value;
        }
    }

    public Object lstDSGTOOLSQUERYCTESQLOUTPUT
    {
        get
        {
            return (Object)(ParentComponent.ReadWriteVariables["lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
        set
        {
            ParentComponent.ReadWriteVariables["lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT"].Value = value;
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[LinkedHashMap.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace gudusoft.gsqlparser.demos.util
{
    public class LinkedHashMap<T, U>
    {
        Dictionary<T, LinkedListNode<Tuple<U, T>>> D = new Dictionary<T, LinkedListNode<Tuple<U, T>>>();
        LinkedList<Tuple<U, T>> LL = new LinkedList<Tuple<U, T>>();

        public U this[T c]
        {
            get
            {
                return D[c].Value.Item1;
            }

            set
            {
                if (D.ContainsKey(c))
                {
                    LL.Remove(D[c]);
                }

                D[c] = new LinkedListNode<Tuple<U, T>>(Tuple.Create(value, c));
                LL.AddLast(D[c]);
            }
        }

        public bool ContainsKey(T k)
        {
            return D.ContainsKey(k);
        }

        public bool Remove(T k) {
            if (D.ContainsKey(k))
            {
                LL.Remove(D[k]);
                D.Remove(k);
                return true;
            }
            return false;
        }

        public void Clear() {
            D.Clear();
            LL.Clear();
        }
        public U PopFirst()
        {
            var node = LL.First;
            LL.Remove(node);
            D.Remove(node.Value.Item2);
            return node.Value.Item1;
        }

        public int Count
        {
            get
            {
                return D.Count;
            }
        }

        public Dictionary<T, LinkedListNode<Tuple<U, T>>>.KeyCollection Keys
        {
            get
            {
                return D.Keys;
            }
        }

        public LinkedListNode<Tuple<U, T>> LLs
        {
            get
            {
                return LL.First;
            }
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ClassDiagram1.cd]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<ClassDiagram MajorVersion="1" MinorVersion="1">
  <Class Name="ScriptMain">
    <Position X="0.5" Y="5.5" Width="2.5" />
    <NestedTypes>
      <Class Name="ScriptMain.queryinfo" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>main.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="ScriptMain.columnInfo" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>main.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
    </NestedTypes>
    <TypeIdentifier>
      <HashCode>AAAAAgAAQCAAAASAAAAAAAABAAAAAAAIAAEAACIDAAA=</HashCode>
      <FileName>main.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="UserComponent">
    <Position X="0.5" Y="1.5" Width="2" />
    <TypeIdentifier>
      <HashCode>CAAAABABAAAAAAAACAgAAAABAAAgAAQAAAQAgCAAAAA=</HashCode>
      <FileName>ComponentWrapper.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="Connections">
    <Position X="4" Y="0.5" Width="1.75" />
    <TypeIdentifier>
      <HashCode>AAAABAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
      <FileName>ComponentWrapper.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="Variables">
    <Position X="6" Y="0.5" Width="1.75" />
    <TypeIdentifier>
      <HashCode>AAAABAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
      <FileName>ComponentWrapper.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="Input0Buffer">
    <Position X="3.75" Y="3.75" Width="2.5" />
    <TypeIdentifier>
      <HashCode>BAAAAAAAAAAAAgAAAAAAQAAAAAAAAEAAAAAgAAAAAIA=</HashCode>
      <FileName>BufferWrapper.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="Microsoft.SqlServer.Dts.Pipeline.ScriptComponent" Collapsed="true">
    <Position X="0.5" Y="0.5" Width="1.5" />
    <TypeIdentifier />
  </Class>
  <Class Name="Microsoft.SqlServer.Dts.Pipeline.ScriptBuffer" Collapsed="true">
    <Position X="4.75" Y="2.75" Width="1.5" />
    <TypeIdentifier />
  </Class>
  <Class Name="GetCTEs.utils.MyUtil">
    <Position X="8.25" Y="0.5" Width="2.75" />
    <TypeIdentifier>
      <HashCode>AEFAAAAAAAAAACAAAAAAABAAAAAABABAAFCAAAAAAAI=</HashCode>
      <FileName>utils\MyUtil.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="GetCTEs.DSGTools.GetCTEs_DSGTools" Collapsed="true">
    <Position X="9.75" Y="5.75" Width="1.75" />
    <TypeIdentifier>
      <HashCode>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
      <FileName>DSGTools.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="GetCTEs.DSGTools.DSGTOOLS_QUERY_CTE_SQL_RAW" Collapsed="true">
    <Position X="7" Y="5.75" Width="2.5" />
    <TypeIdentifier>
      <HashCode>AAAAAAIAAAAAAAAAAAAAAAAAAAIAAAAAAQgAAAAAAAA=</HashCode>
      <FileName>DSGTools.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="GetCTEs.DSGTools.DSGTOOLS_QUERY_CTE_SQL_OUTPUT" Collapsed="true">
    <Position X="9.75" Y="4.25" Width="2.75" />
    <TypeIdentifier>
      <HashCode>AAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA=</HashCode>
      <FileName>DSGTools.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="GetCTEs.DSGTools.DSGTOOLS_QUERY_CTE_SQL" Collapsed="true">
    <Position X="7" Y="4.25" Width="2.25" />
    <TypeIdentifier>
      <HashCode>AAAAAAIAEAAAAAAAAAAAAAAAAAIAAAAAAQgAAAAAAEA=</HashCode>
      <FileName>DSGTools.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact">
    <Position X="7.25" Y="8" Width="3" />
    <NestedTypes>
      <Enum Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.ClauseType" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Enum>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.columnsInExpr" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
        <Lollipop Position="0.2" />
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.Table" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.TAlias" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.TColumn" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.TResultEntry" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.TSourceColumn" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
      <Class Name="gudusoft.gsqlparser.demos.columnImpact.ColumnImpact.Utf8StringWriter" Collapsed="true">
        <TypeIdentifier>
          <NewMemberFileName>ColumnImpact.cs</NewMemberFileName>
        </TypeIdentifier>
      </Class>
    </NestedTypes>
    <TypeIdentifier>
      <HashCode>QBghAEEgEsGEEAMQAgACFCARQRhAQYOIICBABAoIJCQ=</HashCode>
      <FileName>ColumnImpact.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Font Name="Segoe UI" Size="9" />
</ClassDiagram>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_18b389345fb6409ea23b3d67d5dde17c.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_18b389345fb6409ea23b3d67d5dde17c.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_18b389345fb6409ea23b3d67d5dde17c.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_18b389345fb6409ea23b3d67d5dde17c.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_18b389345fb6409ea23b3d67d5dde17c.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 QSRID
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
        set
        {
            this[0] = value;
        }
    }
    public bool QSRID_IsNull
    {
        get
        {
            return IsNull(0);
        }
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public BlobColumn QSRSQL
    {
        get
        {
            return (BlobColumn)Buffer[BufferColumnIndexes[1]];
        }
        set
        {
            this[1] = value;
        }
    }
    public bool QSRSQL_IsNull
    {
        get
        {
            return IsNull(1);
        }
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String CTEName
    {
        set
        {
            this[0] = value;
        }
    }
    public bool CTEName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public BlobColumn RAWCTESQL
    {
        get
        {
            return (BlobColumn)Buffer[BufferColumnIndexes[1]];
        }
    }
    public bool RAWCTESQL_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String RAWCTESQLHASH
    {
        set
        {
            this[2] = value;
        }
    }
    public bool RAWCTESQLHASH_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public BlobColumn RAWCTESQLUPPER
    {
        get
        {
            return (BlobColumn)Buffer[BufferColumnIndexes[3]];
        }
    }
    public bool RAWCTESQLUPPER_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String RAWCTESQLHASHUPPER
    {
        set
        {
            this[4] = value;
        }
    }
    public bool RAWCTESQLHASHUPPER_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 QCSRQSRID
    {
        set
        {
            this[5] = value;
        }
    }
    public bool QCSRQSRID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_18b389345fb6409ea23b3d67d5dde17c.Properties.Settings.get_Default():SC_18b389345fb6409ea23b3d67d5dde17c.Properties.Sett" +
    "ings")]

namespace SC_18b389345fb6409ea23b3d67d5dde17c.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[DSGTools.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using gudusoft.gsqlparser.demos.columnImpact;

namespace GetCTEs.DSGTools
{
    public class GetCTEs_DSGTools
    {
    }

    public class DSGTOOLS_QUERY_CTE_SQL_RAW
    {
        public int QCSR_ID;         //dummy, actually it is auto ID in DB
        public int QCSR_QSR_ID;     //here is dummy.  It is from column QSR_ID from DSGTOOLS.QUERY_SQL_RAW
        public string QCSR_NAME;    //The name of the CTE
        public string QCSR_SQL;     //The SQL of the CTE

        public DSGTOOLS_QUERY_CTE_SQL_RAW()
        {

        }
    }

    public class DSGTOOLS_QUERY_CTE_SQL_OUTPUT
    {
        public List<int> QCSO_CSR_ID;         //This is the QCSR_QSR_ID from DSGTOOLS.QUERY_CTE_SQL_RAW
        public List<string> QCSO_NAME;        //This is the name of the column that's output from the CTE

        public DSGTOOLS_QUERY_CTE_SQL_OUTPUT()
        {
            QCSO_CSR_ID = new List<int>();
            QCSO_NAME = new List<string>();
        }
    }

    public class DSGTOOLS_QUERY_CTE_SQL
    {
        //for DSGTOOLS_QUERY_CTE_SQL_RAW
        public int QCSR_ID;         //dummy, actually it is auto ID in DB
        public int QCSR_QSR_ID;     //here is dummy.  It is from column QSR_ID from DSGTOOLS.QUERY_SQL_RAW
        public string QCSR_NAME;    //The name of the CTE
        public string QCSR_SQL;     //The SQL of the CTE

        //for DSGTOOLS_QUERY_CTE_SQL_OUTPUT
        public int QCSO_CSR_ID;         //This is the QCSR_ID from DSGTOOLS.QUERY_CTE_SQL_RAW
        public List<string> QCSO_NAME;        //This is the name of the column that's output from the CTE

        public DSGTOOLS_QUERY_CTE_SQL()
        {
            QCSO_NAME = new List<string>();
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_18b389345fb6409ea23b3d67d5dde17c.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{834E28B9-588D-478B-A955-CD51FABB4F03}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_18b389345fb6409ea23b3d67d5dde17c</RootNamespace>
    <AssemblyName>SC_18b389345fb6409ea23b3d67d5dde17c</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="DSGTools.cs" />
    <Compile Include="joinRelationAnalyze\joinRelationAnalyze.cs" />
    <Compile Include="utils\MyUtil.cs" />
    <Reference Include="gudusoft.gsqlparser, Version=3.2.1.2, Culture=neutral, PublicKeyToken=2b2fd676a50a6d43, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Windows\Microsoft.NET\Framework\v4.0.30319\gudusoft.gsqlparser.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Compile Include="ColumnImpact.cs" />
    <Compile Include="columnTableStmt.cs" />
    <Compile Include="common.cs" />
    <Compile Include="LinkedHashMap.cs" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="ClassDiagram1.cd" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[joinRelationAnalyze\joinRelationAnalyze.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace gudusoft.gsqlparser.joinRelationAnalyze
{
    using gudusoft.gsqlparser.demos.util;
    using gudusoft.gsqlparser;
    using gudusoft.gsqlparser.nodes;
    using gudusoft.gsqlparser.stmt;
    using gudusoft.gsqlparser.stmt.mssql;
    using gudusoft.gsqlparser.stmt.oracle;
    using System.IO;

    internal enum ClauseType
    {
        @where,
        connectby,
        startwith,
        orderby,
        casewhen,
        casethen
    }

    public class JoinCondition
    {

        public string lefttable, righttable, leftcolumn, rightcolumn;
        public IList<TCustomSqlStatement> sql = new List<TCustomSqlStatement>();

        public override int GetHashCode()
        {
            int hashCode = 0;
            if (!string.ReferenceEquals(lefttable, null))
            {
                hashCode += lefttable.GetHashCode();
            }
            if (!string.ReferenceEquals(righttable, null))
            {
                hashCode += righttable.GetHashCode();
            }
            if (!string.ReferenceEquals(leftcolumn, null))
            {
                hashCode += leftcolumn.GetHashCode();
            }
            if (!string.ReferenceEquals(rightcolumn, null))
            {
                hashCode += rightcolumn.GetHashCode();
            }

            foreach (TCustomSqlStatement stmt in sql)
            {
                hashCode += stmt.GetHashCode();
            }

            return hashCode;
        }

        public override bool Equals(object obj)
        {
            if (this == obj)
            {
                return true;
            }
            if (!(obj is JoinCondition))
            {
                return false;
            }

            JoinCondition join = (JoinCondition)obj;

            if (!string.ReferenceEquals(this.leftcolumn, null) && !this.leftcolumn.Equals(join.leftcolumn))
            {
                return false;
            }
            if (!string.ReferenceEquals(this.rightcolumn, null) && !this.rightcolumn.Equals(join.rightcolumn))
            {
                return false;
            }
            if (!string.ReferenceEquals(this.lefttable, null) && !this.lefttable.Equals(join.lefttable))
            {
                return false;
            }
            if (!string.ReferenceEquals(this.righttable, null) && !this.righttable.Equals(join.righttable))
            {
                return false;
            }

            if (!string.ReferenceEquals(join.righttable, null) && !join.righttable.Equals(this.righttable))
            {
                return false;
            }
            if (!string.ReferenceEquals(join.lefttable, null) && !join.lefttable.Equals(this.lefttable))
            {
                return false;
            }
            if (!string.ReferenceEquals(join.rightcolumn, null) && !join.rightcolumn.Equals(this.rightcolumn))
            {
                return false;
            }
            if (!string.ReferenceEquals(join.leftcolumn, null) && !join.leftcolumn.Equals(this.leftcolumn))
            {
                return false;
            }

            if (join.sql.Count != this.sql.Count)
            {
                return false;
            }
            for (int i = 0; i < join.sql.Count; i++)
            {
                if (!join.sql[i].Equals(this.sql[i]))
                {
                    return false;
                }
            }

            return true;
        }
    }

    public class TColumn
    {

        public IList<string> tableNames = new List<string>();
        public string columnName;
        public string columnPrex;
        public string columnAlias;

        public virtual string getFullName(string tableName)
        {
            if (!string.ReferenceEquals(tableName, null))
            {
                return tableName + "." + columnName;
            }
            else
            {
                return columnName;
            }
        }

        public virtual string OrigName
        {
            get
            {
                if (!string.ReferenceEquals(columnPrex, null))
                {
                    return columnPrex + "." + columnName;
                }
                else
                {
                    return columnName;
                }
            }
        }

    }

    internal class TTable
    {

        public string tableName;
        public string prefixName;
        public string tableAlias;
    }

    internal class joinConditonsInExpr : IExpressionVisitor
    {

        private TExpression expr;
        private joinRelationAnalyze analysis;
        private TCustomSqlStatement stmt;

        public joinConditonsInExpr(joinRelationAnalyze analysis, TExpression expr, TCustomSqlStatement stmt)
        {
            this.stmt = stmt;
            this.analysis = analysis;
            this.expr = expr;
        }

        internal virtual bool is_compare_condition(EExpressionType t)
        {
            return ((t == EExpressionType.simple_comparison_t) || (t == EExpressionType.group_comparison_t) || (t == EExpressionType.in_t));
        }

        private string getExpressionTable(TExpression expr)
        {
            if (expr.ObjectOperand != null)
            {
                return expr.ObjectOperand.ObjectString;
            }
            else if (expr.LeftOperand != null && expr.LeftOperand.ObjectOperand != null)
            {
                return expr.LeftOperand.ObjectOperand.ObjectString;
            }
            else if (expr.RightOperand != null && expr.RightOperand.ObjectOperand != null)
            {
                return expr.RightOperand.ObjectOperand.ObjectString;
            }
            else
            {
                return null;
            }
        }

        public virtual bool exprVisit(TParseTreeNode pnode, bool flag)
        {
            TExpression lcexpr = (TExpression)pnode;

            TExpression slexpr, srexpr, lc_expr = lcexpr;

            if (is_compare_condition(lc_expr.ExpressionType))
            {
                slexpr = lc_expr.LeftOperand;
                srexpr = lc_expr.RightOperand;

                if (srexpr.FunctionCall != null && srexpr.FunctionCall.FunctionName.ToString().Equals("ISNULL", StringComparison.CurrentCultureIgnoreCase))
                {
                    TExpressionList list = srexpr.FunctionCall.Args;
                    for (int i = 0; i < list.size(); i++)
                    {
                        dealCompareCondition(slexpr, list.getExpression(i));
                    }
                }
                else
                {
                    dealCompareCondition(slexpr, srexpr);
                }
            }

            if (lcexpr.ExpressionType == EExpressionType.function_t)
            {
                TFunctionCall func = (TFunctionCall)lcexpr.FunctionCall;
                if (func.Args != null)
                {
                    for (int k = 0; k < func.Args.size(); k++)
                    {
                        TExpression expr = func.Args.getExpression(k);
                        expr.inOrderTraverse(this);
                    }
                }
                if (func.AnalyticFunction != null)
                {
                    TParseTreeNodeList list = func.AnalyticFunction.PartitionBy_ExprList;
                    searchJoinInList(list, stmt);

                    if (func.AnalyticFunction.OrderBy != null)
                    {
                        list = func.AnalyticFunction.OrderBy.Items;
                        searchJoinInList(list, stmt);
                    }
                }

            }
            else if (lcexpr.ExpressionType == EExpressionType.subquery_t)
            {
                if (lcexpr.SubQuery is TSelectSqlStatement)
                {
                    TSelectSqlStatement query = lcexpr.SubQuery;
                    analysis.searchSubQuery(query);
                }
            }
            else if (lcexpr.ExpressionType == EExpressionType.case_t)
            {
                TCaseExpression expr = lcexpr.CaseExpression;
                TExpression conditionExpr = expr.Input_expr;
                if (conditionExpr != null)
                {
                    conditionExpr.inOrderTraverse(this);
                }
                TExpression defaultExpr = expr.Else_expr;
                if (defaultExpr != null)
                {
                    defaultExpr.inOrderTraverse(this);
                }
                TWhenClauseItemList list = expr.WhenClauseItemList;
                searchJoinInList(list, stmt);
            }
            else if (lcexpr.ExpressionType == EExpressionType.exists_t)
            {
                if (lcexpr.RightOperand != null && lcexpr.RightOperand.SubQuery != null)
                {
                    TSelectSqlStatement query = lcexpr.RightOperand.SubQuery;
                    analysis.searchSubQuery(query);
                }
            }
            return true;
        }

        private void dealCompareCondition(TExpression slexpr, TExpression srexpr)
        {
            if (((slexpr.ExpressionType == EExpressionType.simple_object_name_t) || (slexpr.OracleOuterJoin) || (srexpr.OracleOuterJoin && slexpr.ExpressionType == EExpressionType.simple_constant_t)) && ((srexpr.ExpressionType == EExpressionType.simple_object_name_t) || (srexpr.OracleOuterJoin) || (slexpr.OracleOuterJoin && srexpr.ExpressionType == EExpressionType.simple_constant_t) || (slexpr.OracleOuterJoin && srexpr.ExpressionType == EExpressionType.case_t)) || (slexpr.ExpressionType == EExpressionType.simple_object_name_t && srexpr.ExpressionType == EExpressionType.subquery_t) || (slexpr.ExpressionType == EExpressionType.subquery_t && srexpr.ExpressionType == EExpressionType.simple_object_name_t))
            {
                TExpression lattr = null, rattr = null;
                JoinCondition jr = new JoinCondition();
                jr.sql.Add(stmt);

                if (slexpr.OracleOuterJoin)
                {
                    lattr = slexpr;
                    jr.lefttable = lattr != null ? getExpressionTable(lattr) : null;
                    jr.leftcolumn = lattr != null ? getBeforeToken(lattr.endToken).ToString() : null;
                }
                else if (slexpr.ExpressionType == EExpressionType.simple_object_name_t)
                {
                    lattr = slexpr;
                    jr.lefttable = lattr != null ? getExpressionTable(lattr) : null;
                    jr.leftcolumn = lattr != null ? lattr.endToken.ToString() : null;
                }

                if (srexpr.OracleOuterJoin)
                {
                    rattr = srexpr;
                    jr.righttable = rattr != null ? getExpressionTable(rattr) : null;
                    jr.rightcolumn = rattr != null ? getBeforeToken(rattr.endToken).ToString() : null;
                    if (slexpr.ExpressionType != EExpressionType.subquery_t)
                    {
                        analysis.joinRelationSet.Add(jr);
                    }
                }
                else if (srexpr.ExpressionType == EExpressionType.simple_object_name_t)
                {
                    rattr = srexpr;
                    jr.righttable = rattr != null ? getExpressionTable(rattr) : null;
                    jr.rightcolumn = rattr != null ? rattr.endToken.ToString() : null;
                    if (slexpr.ExpressionType != EExpressionType.subquery_t)
                    {
                        analysis.joinRelationSet.Add(jr);
                    }
                }
                else if (srexpr.ExpressionType == EExpressionType.case_t)
                {
                    TCaseExpression expr = srexpr.CaseExpression;

                    TWhenClauseItemList list = expr.WhenClauseItemList;
                    for (int i = 0; i < list.size(); i++)
                    {
                        TExpression thenexpr = ((TWhenClauseItem)list.getWhenClauseItem(i)).Return_expr;
                        if (thenexpr.ExpressionType == EExpressionType.simple_object_name_t)
                        {
                            rattr = thenexpr;
                        }
                        JoinCondition condtion = new JoinCondition();
                        condtion.leftcolumn = jr.leftcolumn;
                        condtion.lefttable = jr.lefttable;
                        condtion.sql = jr.sql;
                        condtion.righttable = rattr != null ? getExpressionTable(rattr) : null;

                        if (rattr != null)
                        {
                            if (rattr.OracleOuterJoin)
                            {
                                condtion.rightcolumn = getBeforeToken(rattr.endToken).ToString();
                            }
                            else
                            {
                                condtion.rightcolumn = rattr.endToken.ToString();
                            }
                        }
                        else
                        {
                            condtion.rightcolumn = null;
                        }

                        analysis.joinRelationSet.Add(condtion);
                    }
                    if (expr.Else_expr != null)
                    {
                        TExpression elseexpr = expr.Else_expr;
                        if (elseexpr.ExpressionType == EExpressionType.simple_object_name_t)
                        {
                            rattr = elseexpr;
                        }

                        JoinCondition condtion = new JoinCondition();
                        condtion.leftcolumn = jr.leftcolumn;
                        condtion.lefttable = jr.lefttable;
                        condtion.sql = jr.sql;
                        condtion.righttable = rattr != null ? getExpressionTable(rattr) : null;
                        if (rattr != null)
                        {
                            if (rattr.OracleOuterJoin)
                            {
                                condtion.rightcolumn = getBeforeToken(rattr.endToken).ToString();
                            }
                            else
                            {
                                condtion.rightcolumn = rattr.endToken.ToString();
                            }
                        }
                        else
                        {
                            condtion.rightcolumn = null;
                        }
                        analysis.joinRelationSet.Add(condtion);
                    }
                }

                if (srexpr.ExpressionType == EExpressionType.subquery_t)
                {
                    TSelectSqlStatement subquery = (TSelectSqlStatement)srexpr.SubQuery;
                    addSubqueryJoin(jr, subquery, false);
                }

                if (slexpr.ExpressionType == EExpressionType.subquery_t)
                {
                    TSelectSqlStatement subquery = (TSelectSqlStatement)slexpr.SubQuery;
                    addSubqueryJoin(jr, subquery, true);
                }
            }
        }

        private TSourceToken getBeforeToken(TSourceToken token)
        {
            TSourceTokenList tokens = token.container;
            int index = token.posinlist;

            for (int i = index - 1; i >= 0; i--)
            {
                TSourceToken currentToken = tokens.get(i);
                if (currentToken.ToString().Trim().Length == 0)
                {
                    continue;
                }
                else
                {
                    return currentToken;
                }
            }
            return token;
        }

        private void addSubqueryJoin(JoinCondition jr, TSelectSqlStatement subquery, bool? isLeft)
        {
            if (subquery.CombinedQuery)
            {
                addSubqueryJoin(jr, subquery.LeftStmt, isLeft);
                addSubqueryJoin(jr, subquery.RightStmt, isLeft);
            }
            else
            {
                for (int i = 0; i < subquery.ResultColumnList.size(); i++)
                {
                    TResultColumn field = subquery.ResultColumnList.getResultColumn(i);
                    TColumn column = analysis.attrToColumn(field, subquery);
                    foreach (string tableName in column.tableNames)
                    {
                        JoinCondition condtion = new JoinCondition();
                        if (isLeft.Value)
                        {
                            condtion.rightcolumn = jr.rightcolumn;
                            condtion.righttable = jr.righttable;
                            condtion.sql.Add(stmt);
                            condtion.sql.Add(subquery);
                            condtion.lefttable = tableName;
                            condtion.leftcolumn = column.columnName;
                        }
                        else
                        {
                            condtion.leftcolumn = jr.leftcolumn;
                            condtion.lefttable = jr.lefttable;
                            condtion.sql.Add(stmt);
                            condtion.sql.Add(subquery);
                            condtion.righttable = tableName;
                            condtion.rightcolumn = column.columnName;
                        }
                        analysis.joinRelationSet.Add(condtion);
                    }
                }
            }
        }

        private void searchJoinInList(TParseTreeNodeList list, TCustomSqlStatement stmt)
        {
            if (list != null)
            {
                for (int i = 0; i < list.size(); i++)
                {
                    IList<TExpression> exprList = new List<TExpression>();

                    if (list.getElement(i) is TOrderByItem)
                    {
                        exprList.Add((TExpression)((TOrderByItem)list.getElement(i)).SortKey);
                    }
                    else if (list.getElement(i) is TExpression)
                    {
                        exprList.Add((TExpression)list.getElement(i));
                    }
                    else if (list.getElement(i) is TWhenClauseItem)
                    {
                        exprList.Add(((TWhenClauseItem)list.getElement(i)).Comparison_expr);
                        exprList.Add(((TWhenClauseItem)list.getElement(i)).Return_expr);
                    }

                    foreach (TExpression lcexpr in exprList)
                    {
                        lcexpr.inOrderTraverse(this);
                    }
                }
            }
        }

        public virtual void searchExpression()
        {
            this.expr.inOrderTraverse(this);
        }
    }

    public class joinRelationAnalyze
    {

        private static bool isOutputFile;
        private StringBuilder buffer = new StringBuilder();
        private Hashtable cteMap = new Hashtable();
        private Hashtable tableAliasMap = new Hashtable();
        private IList<TCustomSqlStatement> searchInSubQuerys = new List<TCustomSqlStatement>();
        private IList<TCustomSqlStatement> searchInTables = new List<TCustomSqlStatement>();
        private IList<TCustomSqlStatement> searchInClauses = new List<TCustomSqlStatement>();
        public Hashtable queryAliasMap = new Hashtable();
        public HashSet<JoinCondition> joinRelationSet = new HashSet<JoinCondition>();
        private IList<JoinCondition> conditions = new List<JoinCondition>();

        public virtual Hashtable prop_cteMap
        {
            get
            {
                return cteMap;
            }
        }

        public virtual string AnalysisResult
        {
            get
            {
                return buffer.ToString();
            }
        }

        public virtual IList<JoinCondition> JoinConditions
        {
            get
            {
                return conditions;
            }
        }

        public static void Main_1(string[] args)
        {
            if (args.Length == 0)
            {
                Console.WriteLine("Usage: joinRelationAnalyze [/t <sql script file path>] [/t <database type>] [/o <output file path>]");
                Console.WriteLine("/f: Option, sql script file path: The sql file will be analyzed.");
                Console.WriteLine("/o: Option, output file path: Option, write the analysis result to the specified file.");
                Console.WriteLine("/t: Option, set the database type. Support oracle, mysql, mssql and db2, the default type is oracle");
                return;
            }

            List<string> argList = new List<string>(args);
            int index = argList.IndexOf("/o");

            string outputFile = null;
            if (index != -1 && args.Length > index + 1)
            {
                outputFile = args[index + 1];
                isOutputFile = true;
            }

            System.IO.FileStream writer = null;
            StreamWriter sw = null;

            try
            {
                if (!string.ReferenceEquals(outputFile, null))
                {
                    writer = new System.IO.FileStream(outputFile, System.IO.FileMode.Create, System.IO.FileAccess.Write);
                    sw = new StreamWriter(writer);
                    Console.SetOut(sw);
                }

                index = argList.IndexOf("/f");

                FileInfo file = null;
                if (index != -1 && args.Length > index + 1)
                {
                    file = new FileInfo(args[index + 1]);
                }

                joinRelationAnalyze analysis;
                if (file != null)
                {
                    analysis = new joinRelationAnalyze(file, Common.GetEDbVendor(args));
                }
                else
                {
                    string sqltext = @"select a.id, b.name, c.no
                                        from emp a, dept b, order c,
                                        (select a1.no, b2.custid
                                        from customer a1, product b2
                                        where a1.id = b2.custid) d
                                        where a.id = b.id
                                        and b.id = c.no
                                        and c.no = d.no";
                    sqltext = "WITH PersonCTE(BusinessEntityID, FirstName, LastName) AS(SELECT Person.BusinessEntityID, FirstName, LastName FROM   Person.Person WHERE  LastName LIKE 'C%'), PhoneCTE(BusinessEntityID, PhoneNumber) AS(SELECT BusinessEntityID, PhoneNumber FROM   Person.PersonPhone) SELECT FirstName, LastName, PhoneNumber FROM PersonCTE INNER JOIN PhoneCTE ON PersonCTE.BusinessEntityID = PhoneCTE.BusinessEntityID";
                    //sqltext= "SELECT person.businessentityid,firstname,lastname FROM PERSON.person WHERE lastname LIKE 'C%'";

                    //analysis = new joinRelationAnalyze(sqltext, Common.GetEDbVendor(args));

                    CTERelatedAnalyze cteAnalyze = new CTERelatedAnalyze(sqltext, Common.GetEDbVendor(args));
                    string endQueryNonCTESQL = cteAnalyze.getEndQueryNonCTESQL(sqltext);
                }

                //Console.Write(analysis.AnalysisResult);

                if (sw != null && writer != null)
                {
                    sw.Close();
                    writer.Close();
                }

            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                Console.Write(e.StackTrace);
            }

        } // main

        public joinRelationAnalyze()
        {

        }
        public joinRelationAnalyze(string sql, EDbVendor dbVendor)
        {
            TGSqlParser sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqltext = sql;
            analyzeSQL(sqlparser);
        }

        public joinRelationAnalyze(FileInfo file, EDbVendor dbVendor)
        {
            TGSqlParser sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqlfilename = file.FullName;
            analyzeSQL(sqlparser);
        }

        private void analyzeSQL(TGSqlParser sqlparser)
        {
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage);
                return;
            }
            else
            {
                for (int j = 0; j < sqlparser.sqlstatements.size(); j++)
                {
                    TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(j);
                    analyzeStmt(select);
                }
            }

            buffer.Append("JoinTable1\tJoinColumn1\tJoinTable2\tJoinColumn2\r\n");

            conditions.Clear();

            foreach (JoinCondition join in joinRelationSet)
            {
                string lefttable = join.lefttable;
                string righttable = join.righttable;
                string leftcolumn = join.leftcolumn;
                string rightcolumn = join.rightcolumn;

                if ((string.ReferenceEquals(lefttable, null) || lefttable.Length == 0) && (string.ReferenceEquals(righttable, null) || righttable.Length == 0))
                {
                    continue;
                }

                IList<string[]> leftJoinNameList = getRealName(lefttable, leftcolumn, join.sql);
                IList<string[]> rightJoinNameList = getRealName(righttable, rightcolumn, join.sql);

                foreach (string[] leftJoinNames in leftJoinNameList)
                {
                    foreach (string[] rightJoinNames in rightJoinNameList)
                    {
                        if (!string.ReferenceEquals(leftJoinNames[0], null) && !string.ReferenceEquals(rightJoinNames[0], null) && !string.ReferenceEquals(leftJoinNames[1], null) && !string.ReferenceEquals(rightJoinNames[1], null))
                        {
                            JoinCondition condition = new JoinCondition();
                            condition.lefttable = leftJoinNames[0];
                            condition.righttable = rightJoinNames[0];
                            condition.leftcolumn = leftJoinNames[1];
                            condition.rightcolumn = rightJoinNames[1];

                            if (!conditions.Contains(condition))
                            {
                                conditions.Add(condition);
                                buffer.Append(fillString(condition.lefttable) + "\t" + fillString(condition.leftcolumn) + "\t" + fillString(condition.righttable) + "\t" + fillString(condition.rightcolumn) + "\r\n");
                            }
                        }
                    }
                }
            }
        }

        private void analyzeStmt(TCustomSqlStatement select)
        {
            if (select.CteList != null && select.CteList.size() > 0)
            {
                for (int i = 0; i < select.CteList.size(); i++)
                {
                    TCTE expression = (TCTE)select.CteList.getCTE(i);
                    cteMap[expression.TableName] = expression.Subquery;
                }
            }

            analyzeStatement(select);
        }

        private void analyzeStatement(TCustomSqlStatement select)
        {
            if (select is TSelectSqlStatement)
            {
                TSelectSqlStatement stmt = (TSelectSqlStatement)select;

                searchJoinFromStatement(stmt);

                if (stmt.CombinedQuery)
                {
                    analyzeStatement(stmt.LeftStmt);
                    analyzeStatement(stmt.RightStmt);
                }
                else
                {
                    for (int i = 0; i < select.ResultColumnList.size(); i++)
                    {
                        TResultColumn field = select.ResultColumnList.getResultColumn(i);
                        searchFields(field, select);
                    }
                }
            }
            else if (select is TPlsqlCreateProcedure)
            {
                TPlsqlCreateProcedure createProcedure = (TPlsqlCreateProcedure)select;
                if (createProcedure.BodyStatements != null)
                {
                    for (int i = 0; i < createProcedure.BodyStatements.size(); i++)
                    {
                        analyzeStmt(createProcedure.BodyStatements.get(i));
                    }
                }
            }
            else if (select is TMssqlCreateProcedure)
            {
                TMssqlCreateProcedure createProcedure = (TMssqlCreateProcedure)select;
                if (createProcedure.BodyStatements != null)
                {
                    for (int i = 0; i < createProcedure.BodyStatements.size(); i++)
                    {
                        analyzeStmt(createProcedure.BodyStatements.get(i));
                    }
                }
            }
            else if (select is TMssqlBlock)
            {
                TMssqlBlock block = (TMssqlBlock)select;
                if (block.BodyStatements != null)
                {
                    for (int i = 0; i < block.BodyStatements.size(); i++)
                    {
                        analyzeStmt(block.BodyStatements.get(i));
                    }
                }
            }
            else if (select.ResultColumnList != null)
            {
                for (int i = 0; i < select.ResultColumnList.size(); i++)
                {
                    TResultColumn field = select.ResultColumnList.getResultColumn(i);
                    searchFields(field, select);
                }
            }
        }

        private void searchJoinFromStatement(TSelectSqlStatement stmt)
        {
            if (stmt.joins != null)
            {
                for (int i = 0; i < stmt.joins.size(); i++)
                {
                    TJoin join = stmt.joins.getJoin(i);
                    if (join.JoinItems != null)
                    {
                        for (int j = 0; j < join.JoinItems.size(); j++)
                        {
                            TJoinItem joinItem = join.JoinItems.getJoinItem(j);
                            TExpression expr = joinItem.OnCondition;
                            searchExpression(expr, stmt);
                        }
                    }
                }
            }
        }

        private IList<string[]> getRealName(string tableAlias, string columnAlias, IList<TCustomSqlStatement> stmtList)
        {
            IList<string[]> nameList = new List<string[]>();
            foreach (TCustomSqlStatement stmt in stmtList)
            {

                gudusoft.gsqlparser.nodes.TTable table = null;
                string columnName = columnAlias;
                if ((string.ReferenceEquals(tableAlias, null) || tableAlias.Length == 0) && stmt is TSelectSqlStatement && ((TSelectSqlStatement)stmt).tables.size() == 1 && ((TSelectSqlStatement)stmt).tables.getTable(0).AliasClause == null)
                {
                    table = ((TSelectSqlStatement)stmt).tables.getTable(0);
                    getTableNames(nameList, table, columnName);
                    continue;
                }
                else if (string.ReferenceEquals(tableAlias, null) || tableAlias.Length == 0)
                {
                    nameList.Add(new string[] { null, columnName });
                    continue;
                }

                if (tableAliasMap.ContainsKey(tableAlias.ToLower() + ":" + stmt.ToString()))
                {
                    table = (gudusoft.gsqlparser.nodes.TTable)tableAliasMap[tableAlias.ToLower() + ":" + stmt.ToString()];
                    getTableNames(nameList, table, columnName);
                    continue;
                }
                else if (tableAliasMap.ContainsKey(tableAlias.ToLower()) && !containsKey(tableAliasMap, tableAlias.ToLower() + ":"))
                {
                    table = (gudusoft.gsqlparser.nodes.TTable)tableAliasMap[tableAlias.ToLower()];
                    getTableNames(nameList, table, columnName);
                    continue;
                }
                else
                {
                    if (queryAliasMap.ContainsKey(tableAlias.ToLower()))
                    {
                        object value = queryAliasMap[tableAlias.ToLower()];
                        if (value is TSelectSqlStatement)
                        {
                            TSelectSqlStatement sql = (TSelectSqlStatement)value;
                            getRealNameFromSql(nameList, columnAlias, stmt, sql);
                        }
                        continue;
                    }
                    else if (stmt is TSelectSqlStatement)
                    {
                        findTableByAlias(nameList, (TSelectSqlStatement)stmt, tableAlias, columnAlias, new List<TSelectSqlStatement>());
                        continue;
                    }
                    continue;
                }
            }
            return nameList;
        }

        private void getTableNames(IList<string[]> nameList, gudusoft.gsqlparser.nodes.TTable table, string columnName)
        {
            if (!(table.Subquery is TSelectSqlStatement))
            {
                nameList.Add(new string[] { table.FullName, columnName });
            }
            else
            {
                TSelectSqlStatement stmt = (TSelectSqlStatement)table.Subquery;
                getRealNameFromSql(nameList, columnName, null, stmt);
            }
        }

        private void getRealNameFromSql(IList<string[]> nameList, string columnAlias, TCustomSqlStatement stmt, TSelectSqlStatement sql)
        {
            gudusoft.gsqlparser.nodes.TTable table = null;
            string columnName = null;

            if (sql.CombinedQuery)
            {
                getRealNameFromSql(nameList, columnAlias, stmt, sql.LeftStmt);
                getRealNameFromSql(nameList, columnAlias, stmt, sql.RightStmt);
            }
            else
            {
                for (int i = 0; i < sql.ResultColumnList.size(); i++)
                {
                    TResultColumn field = sql.ResultColumnList.getResultColumn(i);
                    switch (field.Expr.ExpressionType)
                    {
                        case EExpressionType.simple_object_name_t:
                            TColumn column = attrToColumn(field, sql);
                            if (((string.ReferenceEquals(column.columnAlias, null) || column.columnAlias.Length == 0) && columnAlias.Trim().Equals(column.columnName.Trim(), StringComparison.CurrentCultureIgnoreCase)) || ((!string.ReferenceEquals(column.columnAlias, null) && column.columnAlias.Length > 0) && columnAlias.Trim().Equals(column.columnAlias.Trim())) || column.columnName.Equals("*"))
                            {
                                if (!string.ReferenceEquals(column.columnPrex, null))
                                {
                                    if (stmt != null && tableAliasMap.ContainsKey(column.columnPrex.ToLower() + ":" + stmt.ToString()))
                                    {
                                        table = (gudusoft.gsqlparser.nodes.TTable)tableAliasMap[column.columnPrex.ToLower() + ":" + stmt.ToString()];
                                    }
                                    else if (tableAliasMap.ContainsKey(column.columnPrex.ToLower()))
                                    {
                                        table = (gudusoft.gsqlparser.nodes.TTable)tableAliasMap[column.columnPrex.ToLower()];
                                    }
                                }
                                else
                                {
                                    table = sql.tables.getTable(0);
                                }

                                if (column.columnName.Equals("*"))
                                {
                                    columnName = columnAlias;
                                }
                                else
                                {
                                    columnName = column.columnName;
                                }
                            }
                            break;
                    }
                }
                if (table != null)
                {
                    nameList.Add(new string[] { getTableName(table), columnName });
                }
            }
        }

        private string getTableName(gudusoft.gsqlparser.nodes.TTable table)
        {
            if (table.Subquery != null && table.Subquery.tables != null && table.Subquery.tables.size() > 0)
            {
                return getTableName(table.Subquery.tables.getTable(0));
            }
            return table.FullName;
        }

        private void findTableByAlias(IList<string[]> nameList, TSelectSqlStatement stmt, string tableAlias, string columnAlias, IList<TSelectSqlStatement> stats)
        {
            if (stats.Contains(stmt))
            {
                return;
            }
            else
            {
                stats.Add(stmt);
            }

            if (stmt.CombinedQuery)
            {
                findTableByAlias(nameList, stmt.LeftStmt, tableAlias, columnAlias, stats);
                findTableByAlias(nameList, stmt.RightStmt, tableAlias, columnAlias, stats);
            }
            else
            {
                for (int i = 0; i < stmt.tables.size(); i++)
                {
                    gudusoft.gsqlparser.nodes.TTable table = stmt.tables.getTable(i);
                    if (table.AliasClause != null && table.AliasClause.ToString().Length > 0)
                    {
                        if (table.AliasClause.ToString().Equals(tableAlias, StringComparison.CurrentCultureIgnoreCase))
                        {
                            nameList.Add(new string[] { table.TableName.ToString(), columnAlias });
                            return;
                        }
                    }
                    else if (table.TableName != null)
                    {
                        if (table.TableName.ToString().Equals(tableAlias, StringComparison.CurrentCultureIgnoreCase))
                        {
                            nameList.Add(new string[] { table.TableName.ToString(), columnAlias });
                            return;
                        }
                    }
                }
            }
            if (nameList.Count == 0 && stmt.ParentStmt is TSelectSqlStatement)
            {
                findTableByAlias(nameList, (TSelectSqlStatement)stmt.ParentStmt, tableAlias, columnAlias, stats);
            }

        }

        private bool containsKey(Hashtable tableAliasMap, string key)
        {
            ICollection collection = tableAliasMap.Keys;
            foreach (string str in collection)
            {
                if (str.ToLower().StartsWith(key.ToLower(), StringComparison.Ordinal))
                {
                    return true;
                }
            }
            return false;
        }

        private string fillString(string text)
        {
            int tablength = 8;
            if (isOutputFile)
            {
                tablength = 9;
            }

            if (text.Length < tablength)
            {
                text += "\t";
            }
            return text;
        }

        public virtual void searchFields(TResultColumn field, TCustomSqlStatement select)
        {
            switch (field.Expr.ExpressionType)
            {
                case EExpressionType.simple_object_name_t:
                    searchTables(select);
                    searchClauses(select);
                    break;
                case EExpressionType.simple_constant_t:
                    searchExpression(field.Expr, select);
                    searchTables(select);
                    searchClauses(select);
                    break;
                case EExpressionType.case_t:
                    searchExpression(field.Expr, select);
                    searchTables(select);
                    searchClauses(select);
                    break;
                case EExpressionType.function_t:
                    searchExpression(field.Expr, select);
                    searchTables(select);
                    searchClauses(select);

                    TFunctionCall func = field.Expr.FunctionCall;
                    // buffer.AppendLine("function name {0}",
                    // func.funcname.AsText);

                    // check column : function arguments
                    if (func.Args != null)
                    {
                        for (int k = 0; k < func.Args.size(); k++)
                        {
                            TExpression expr = (TExpression)func.Args.getExpression(k);
                            searchExpression(expr, select);
                        }
                    }
                    else
                    {
                        if (select.tables.getTable(0).AliasClause != null)
                        {
                            string alias = select.tables.getTable(0).AliasClause.ToString();
                            if (!tableAliasMap.ContainsKey(alias.ToLower().Trim() + ":" + select.ToString()))
                            {
                                tableAliasMap[alias.ToLower().Trim() + ":" + select.ToString()] = select.tables.getTable(0);
                            }
                            if (!tableAliasMap.ContainsKey(alias.ToLower().Trim()))
                            {
                                tableAliasMap[alias.ToLower().Trim()] = select.tables.getTable(0);
                            }
                        }
                    }

                    if (func.AnalyticFunction != null)
                    {
                        TParseTreeNodeList list = func.AnalyticFunction.PartitionBy_ExprList;

                        searchExpressionList(select, list);

                        if (func.AnalyticFunction.OrderBy != null)
                        {
                            list = func.AnalyticFunction.OrderBy.Items;
                            searchExpressionList(select, list);
                        }
                    }

                    // check order by clause
                    // if (select instanceof TSelectSqlStatement &&
                    // ((TSelectSqlStatement)select).GroupbyClause != null)
                    // {
                    // for (int j = 0; j <
                    // ((TSelectSqlStatement)select).GroupbyClause.GroupItems.Count();
                    // j++)
                    // {
                    // TLzGroupByItem i =
                    // (TLzGroupByItem)((TSelectSqlStatement)select).GroupbyClause.GroupItems[j];
                    // searchExpression((TExpression)i._ndExpr, select);
                    // searchTables(select);
                    // }

                    // }

                    break;
                case EExpressionType.subquery_t:
                    if (field.Expr.SubQuery is TSelectSqlStatement)
                    {
                        searchSubQuery(field.Expr.SubQuery);
                    }
                    break;
                default:
                    buffer.Append("searchFields of type: " + field.Expr.ExpressionType + " not implemented yet\r\n");
                    break;
            }
        }

        private void searchExpressionList(TCustomSqlStatement select, TParseTreeNodeList list)
        {
            if (list == null)
            {
                return;
            }

            for (int i = 0; i < list.size(); i++)
            {
                TExpression lcexpr = null;
                if (list.getElement(i) is TOrderByItem)
                {
                    lcexpr = (TExpression)((TOrderByItem)list.getElement(i)).SortKey;
                }
                else if (list.getElement(i) is TExpression)
                {
                    lcexpr = (TExpression)list.getElement(i);
                }

                if (lcexpr != null)
                {
                    searchExpression(lcexpr, select);
                }
            }
        }

        private void searchClauses(TCustomSqlStatement select)
        {
            if (!searchInClauses.Contains(select))
            {
                searchInClauses.Add(select);
            }
            else
            {
                return;
            }
            if (select is TSelectSqlStatement)
            {

                TSelectSqlStatement statement = (TSelectSqlStatement)select;
                Hashtable clauseTable = new Hashtable();

                // if (statement.SortClause != null)
                // {
                // TLzOrderByList sortList = (TLzOrderByList)statement.SortClause;
                // for (int i = 0; i < sortList.Count(); i++)
                // {
                // TLzOrderBy orderBy = sortList[i];
                // TExpression expr = orderBy.SortExpr;
                // clauseTable.add(expr, ClauseType.orderby);
                // }
                // }

                if (statement.WhereClause != null)
                {
                    clauseTable[(statement.WhereClause.Condition)] = ClauseType.@where;
                }
                // if (statement.ConnectByClause != null)
                // {
                // clauseTable.add((TExpression)statement.ConnectByClause,
                // ClauseType.connectby);
                // }
                // if (statement.StartwithClause != null)
                // {
                // clauseTable.add((TExpression)statement.StartwithClause,
                // ClauseType.startwith);
                // }
                foreach (TExpression expr in clauseTable.Keys)
                {
                    ClauseType type = (ClauseType)clauseTable[expr];
                    searchExpression(expr, select);
                    searchTables(select);

                }
            }
        }

        internal virtual void searchTables(TCustomSqlStatement select)
        {
            if (!searchInTables.Contains(select))
            {
                searchInTables.Add(select);
            }
            else
            {
                return;
            }

            TTableList tables = select.tables;

            if (tables.size() == 1)
            {
                gudusoft.gsqlparser.nodes.TTable lzTable = tables.getTable(0);
                if ((lzTable.TableType == ETableSource.objectname) && (lzTable.AliasClause == null || lzTable.AliasClause.ToString().Trim().Length == 0))
                {
                    if (cteMap.ContainsKey(lzTable.TableName.ToString()))
                    {
                        searchSubQuery((TSelectSqlStatement)cteMap[lzTable.TableName.ToString()]);
                    }
                    else
                    {
                        if (lzTable.AliasClause != null)
                        {
                            string alias = lzTable.AliasClause.ToString();
                            if (!tableAliasMap.ContainsKey(alias.ToLower().Trim() + ":" + select.ToString()))
                            {
                                tableAliasMap[alias.ToLower().Trim() + ":" + select.ToString()] = lzTable;
                            }
                            if (!tableAliasMap.ContainsKey(alias.ToLower().Trim()))
                            {
                                tableAliasMap[alias.ToLower().Trim()] = lzTable;
                            }
                        }
                    }
                }
            }

            for (int i = 0; i < tables.size(); i++)
            {
                gudusoft.gsqlparser.nodes.TTable lztable = tables.getTable(i);
                switch (lztable.TableType)
                {
                    case ETableSource.objectname:
                        TTable table = TLzTaleToTable(lztable);
                        string alias = table.tableAlias;
                        if (!string.ReferenceEquals(alias, null))
                        {
                            alias = alias.Trim();
                        }
                        else if (!string.ReferenceEquals(table.tableName, null))
                        {
                            alias = table.tableName.Trim();
                        }

                        if (cteMap.ContainsKey(lztable.TableName.ToString()))
                        {
                            searchSubQuery((TSelectSqlStatement)cteMap[lztable.TableName.ToString()]);
                        }
                        else
                        {
                            if (!string.ReferenceEquals(alias, null))
                            {
                                if (!tableAliasMap.ContainsKey(alias.ToLower().Trim() + ":" + select.ToString()))
                                {
                                    tableAliasMap[alias.ToLower().Trim() + ":" + select.ToString()] = lztable;
                                }
                                if (!tableAliasMap.ContainsKey(alias.ToLower().Trim()))
                                {
                                    tableAliasMap[alias.ToLower().Trim()] = lztable;
                                }
                            }
                        }
                        break;
                    case ETableSource.subquery:
                        if (lztable.AliasClause != null)
                        {
                            string tableAlias = lztable.AliasClause.ToString().Trim();
                            if (!queryAliasMap.ContainsKey(tableAlias.ToLower()))
                            {
                                queryAliasMap[tableAlias.ToLower()] = (TSelectSqlStatement)lztable.Subquery;
                            }
                        }
                        searchSubQuery((TSelectSqlStatement)lztable.Subquery);
                        break;
                    default:
                        break;
                }
            }
        }

        public virtual void searchSubQuery(TSelectSqlStatement select)
        {
            if (!searchInSubQuerys.Contains(select))
            {
                searchInSubQuerys.Add(select);
            }
            else
            {
                return;
            }

            searchJoinFromStatement(select);

            if (select.CombinedQuery)
            {
                searchSubQuery(select.LeftStmt);
                searchSubQuery(select.RightStmt);
            }
            else
            {
                for (int i = 0; i < select.ResultColumnList.size(); i++)
                {
                    TResultColumn field = select.ResultColumnList.getResultColumn(i);
                    searchFields(field, select);
                }
            }
        }

        public virtual TColumn attrToColumn(TResultColumn field, TCustomSqlStatement stmt)
        {
            TColumn column = new TColumn();

            TExpression attr = field.Expr;

            column.columnAlias = field.AliasClause == null ? null : field.AliasClause.ToString();
            column.columnName = attr.endToken.ToString();

            if (attr.ToString().IndexOf(".", StringComparison.Ordinal) > 0)
            {
                column.columnPrex = attr.ToString().Substring(0, attr.ToString().LastIndexOf(".", StringComparison.Ordinal));

                string tableName = column.columnPrex;
                if (tableName.IndexOf(".", StringComparison.Ordinal) > 0)
                {
                    tableName = tableName.Substring(tableName.LastIndexOf(".", StringComparison.Ordinal) + 1);
                }
                if (!column.tableNames.Contains(tableName))
                {
                    column.tableNames.Add(tableName);
                }
            }
            else
            {
                TTableList tables = stmt.tables;
                for (int i = 0; i < tables.size(); i++)
                {
                    gudusoft.gsqlparser.nodes.TTable lztable = tables.getTable(i);
                    TTable table = TLzTaleToTable(lztable);
                    if (!column.tableNames.Contains(table.tableName))
                    {
                        column.tableNames.Add(table.tableName);
                    }
                }
            }

            return column;
        }

        internal virtual TTable TLzTaleToTable(gudusoft.gsqlparser.nodes.TTable lztable)
        {
            TTable table = new TTable();
            if (lztable.TableName != null)
            {
                table.tableName = lztable.Name;
                if (lztable.TableName.ToString().IndexOf(".", StringComparison.Ordinal) > 0)
                {
                    table.prefixName = lztable.TableName.ToString().Substring(0, lztable.FullName.IndexOf('.'));
                }
            }

            if (lztable.AliasClause != null)
            {
                table.tableAlias = lztable.AliasClause.ToString();
            }
            return table;
        }

        internal virtual void searchExpression(TExpression expr, TCustomSqlStatement stmt)
        {
            joinConditonsInExpr c = new joinConditonsInExpr(this, expr, stmt);
            c.searchExpression();
        }

    }

    public class CTERelatedAnalyze : joinRelationAnalyze
    {
        public CTERelatedAnalyze()
        {

        }

        public CTERelatedAnalyze(string sql, EDbVendor dbVendor) : base(sql,dbVendor)
        {
            
        }

        public string getEndQueryNonCTESQL(string sqltext)
        {
            var colNoMax = 0L;
            var lastCTEEndPosition = 0L;
            var lastCTEEndLength = 0L;
            var endCTESQL = "";

            try
            {
                #region find end query CTE SQL
                Hashtable cteMaps = this.prop_cteMap;
                foreach (DictionaryEntry cteMap in cteMaps)
                {
                    var key = cteMap.Key;
                    var val = cteMap.Value;
                    var colNo = ((gudusoft.gsqlparser.nodes.TParseTreeNode)val).ColumnNo;
                    var cteString = ((gudusoft.gsqlparser.nodes.TParseTreeNode)val).String;
                    if (colNo > colNoMax)
                    {
                        colNoMax = colNo;
                        lastCTEEndLength = cteString.Length;
                    }
                }

                if (colNoMax > 0) //found CTE
                {
                    lastCTEEndPosition = colNoMax + lastCTEEndLength;
                    endCTESQL = sqltext.Substring((int)lastCTEEndPosition).Trim();
                }
                #endregion find end query CTE SQL
            }
            catch(Exception ex)
            {

            }
            return endCTESQL;
        }
    }
}]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ColumnImpact.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using GetCTEs.DSGTools;

namespace gudusoft.gsqlparser.demos.columnImpact
{
    using Document = System.Xml.Linq.XDocument;
    using Element = System.Xml.Linq.XElement;
    using System.Drawing;
    using System.IO;
    using gudusoft.gsqlparser.demos.util;
    using System.Xml.Linq;
    using System.Text.RegularExpressions;
    using gudusoft.gsqlparser.nodes;
    using gudusoft.gsqlparser.stmt;
    using gudusoft.gsqlparser;
    using System.Linq;
    using GetCTEs.utils;

    public class ColumnImpact
    {
        public ColumnImpact()
        {

        }
        public enum ClauseType
        {
            connectby,
            groupby,
            join,
            orderby,
            select,
            startwith,
            undefine,
            @where
        }

        internal class columnsInExpr : IExpressionVisitor
        {
            private readonly ColumnImpact outerInstance;


            internal IList<TColumn> columns;
            internal TExpression expr;
            internal ColumnImpact impact;
            internal int level;
            internal TCustomSqlStatement stmt;
            internal bool collectExpr;
            internal ClauseType clauseType;
            internal TAlias parentAlias;

            public columnsInExpr(ColumnImpact outerInstance, ColumnImpact impact, TExpression expr, IList<TColumn> columns, TCustomSqlStatement stmt, int level, bool collectExpr, ClauseType clauseType, TAlias parentAlias)
            {
                this.outerInstance = outerInstance;
                this.stmt = stmt;
                this.impact = impact;
                this.expr = expr;
                this.columns = columns;
                this.level = level;
                this.collectExpr = collectExpr;
                this.clauseType = clauseType;
                this.parentAlias = parentAlias;
            }

            internal virtual void addColumnToList(TParseTreeNodeList list, TCustomSqlStatement stmt)
            {
                if (list != null)
                {
                    for (int i = 0; i < list.size(); i++)
                    {
                        IList<TExpression> exprList = new List<TExpression>();
                        object element = list.getElement(i);

                        if (element is TGroupByItem)
                        {
                            if (!outerInstance.traceView && !outerInstance.isColumnLevel)
                            {
                                exprList.Add(((TGroupByItem)element).Expr);
                            }
                        }
                        if (element is TOrderByItem)
                        {
                            if (!outerInstance.traceView && !outerInstance.isColumnLevel)
                            {
                                exprList.Add(((TOrderByItem)element).SortKey);
                            }
                        }
                        else if (element is TExpression)
                        {
                            exprList.Add((TExpression)element);
                        }
                        else if (element is TWhenClauseItem)
                        {
                            if (!outerInstance.traceView && !outerInstance.isColumnLevel)
                            {
                                exprList.Add(((TWhenClauseItem)element).Comparison_expr);
                            }
                            exprList.Add(((TWhenClauseItem)element).Return_expr);
                        }

                        foreach (TExpression expr in exprList)
                        {
                            if (expr != null)
                            {
                                expr.inOrderTraverse(this);
                            }
                        }
                    }
                }
            }

            public virtual bool exprVisit(TParseTreeNode pNode, bool isLeafNode)
            {
                TExpression lcexpr = (TExpression)pNode;
                if (lcexpr.ExpressionType == EExpressionType.simple_object_name_t)
                {
                    columns.Add(impact.attrToColumn(lcexpr, stmt, expr, collectExpr, clauseType, parentAlias));
                }
                else if (lcexpr.ExpressionType == EExpressionType.between_t)
                {
                    columns.Add(impact.attrToColumn(lcexpr.BetweenOperand, stmt, expr, collectExpr, clauseType, parentAlias));
                }
                else if (lcexpr.ExpressionType == EExpressionType.function_t)
                {
                    TFunctionCall func = (TFunctionCall)lcexpr.FunctionCall;
                    if (func.FunctionType == EFunctionType.trim_t)
                    {
                        TTrimArgument args = func.TrimArgument;
                        TExpression expr = args.StringExpression;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        expr = args.TrimCharacter;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                    }
                    else if (func.FunctionType == EFunctionType.cast_t)
                    {
                        TExpression expr = func.Expr1;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                    }
                    else if (func.FunctionType == EFunctionType.convert_t)
                    {
                        TExpression expr = func.Expr1;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        expr = func.Expr2;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        expr = func.Parameter;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                    }
                    else if (func.FunctionType == EFunctionType.contains_t || func.FunctionType == EFunctionType.freetext_t)
                    {
                        TExpression expr = func.Expr1;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        TInExpr inExpr = func.InExpr;
                        if (inExpr.ExprList != null)
                        {
                            for (int k = 0; k < inExpr.ExprList.size(); k++)
                            {
                                expr = inExpr.ExprList.getExpression(k);
                                expr.inOrderTraverse(this);
                            }
                            if (expr != null)
                            {
                                expr.inOrderTraverse(this);
                            }
                        }
                        expr = inExpr.Func_expr;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                    }
                    else if (func.FunctionType == EFunctionType.extractxml_t)
                    {
                        TExpression expr = func.XMLType_Instance;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        expr = func.XPath_String;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                        expr = func.Namespace_String;
                        if (expr != null)
                        {
                            expr.inOrderTraverse(this);
                        }
                    }
                    else if (func.FunctionType == EFunctionType.rank_t)
                    {
                        TOrderByItemList orderByList = func.OrderByList;
                        for (int k = 0; k < orderByList.size(); k++)
                        {
                            TExpression expr = orderByList.getOrderByItem(k).SortKey;
                            if (expr != null)
                            {
                                expr.inOrderTraverse(this);
                            }
                        }
                    }
                    else if (func.Args != null)
                    {
                        for (int k = 0; k < func.Args.size(); k++)
                        {
                            TExpression expr = func.Args.getExpression(k);
                            if (expr != null)
                            {
                                expr.inOrderTraverse(this);
                            }
                        }
                    }
                    if (func.AnalyticFunction != null)
                    {
                        TParseTreeNodeList list = func.AnalyticFunction.PartitionBy_ExprList;
                        addColumnToList(list, stmt);

                        if (func.AnalyticFunction.OrderBy != null)
                        {
                            list = func.AnalyticFunction.OrderBy.Items;
                            addColumnToList(list, stmt);
                        }
                    }
                    else if (func.WindowDef != null)
                    {
                        if (func.WindowDef.PartitionClause != null)
                        {
                            TParseTreeNodeList list = func.WindowDef.PartitionClause.ExpressionList;
                            addColumnToList(list, stmt);
                        }
                        if (func.WindowDef.orderBy != null)
                        {
                            TParseTreeNodeList list = func.WindowDef.orderBy.Items;
                            addColumnToList(list, stmt);
                        }
                    }

                }
                else if (lcexpr.ExpressionType == EExpressionType.subquery_t)
                {
                    impact.impactSqlFromStatement(lcexpr.SubQuery, level + 1);
                }
                else if (lcexpr.ExpressionType == EExpressionType.case_t)
                {
                    TCaseExpression expr = lcexpr.CaseExpression;
                    TExpression conditionExpr = expr.Input_expr;
                    if (conditionExpr != null)
                    {
                        conditionExpr.inOrderTraverse(this);
                    }
                    TExpression defaultExpr = expr.Else_expr;
                    if (defaultExpr != null)
                    {
                        defaultExpr.inOrderTraverse(this);
                    }
                    TWhenClauseItemList list = expr.WhenClauseItemList;
                    addColumnToList(list, stmt);
                }
                return true;
            }

            public virtual void searchColumn()
            {
                this.expr.inOrderTraverse(this);
            }
        }

        internal class Table
        {
            private readonly ColumnImpact outerInstance;

            public Table(ColumnImpact outerInstance)
            {
                this.outerInstance = outerInstance;
            }


            public string prefixName;
            public string tableAlias;
            public string tableName;
        }

        internal class TAlias
        {
            private readonly ColumnImpact outerInstance;

            public TAlias(ColumnImpact outerInstance)
            {
                this.outerInstance = outerInstance;
            }


            public string alias;
            public string column;
            public Point location;
            public TExpression columnExpr;
        }

        private IList<TColumn> columnCollection = new List<TColumn>();

        public class TColumn
        {

            public string viewName;
            public string expression = "";
            public string columnName;
            public string columnPrex;
            public string orignColumn;
            public Tuple<long, long> location;
            public IList<string> tableNames = new List<string>();
            public IList<string> tableFullNames = new List<string>();
            public ClauseType clauseType;
            public string alias;

            internal TColumn(ColumnImpact impact)
            {
                if (impact.CollectColumnInfo)
                {
                    impact.columnCollection.Add(this);
                }
            }

            public virtual string getFullName(string tableName)
            {
                if (!string.ReferenceEquals(tableName, null))
                {
                    return tableName + "." + columnName;
                }
                else
                {
                    return columnName;
                }
            }

            public virtual string OrigName
            {
                get
                {
                    if (!string.ReferenceEquals(columnPrex, null))
                    {
                        return columnPrex + "." + columnName;
                    }
                    else
                    {
                        return columnName;
                    }
                }
            }

        }

        internal class TResultEntry
        {
            private readonly ColumnImpact outerInstance;


            public ClauseType clause;

            public string targetColumn;
            public TTable targetTable;
            public Tuple<long, long> location;
            public TColumn columnObject;

            public TResultEntry(ColumnImpact outerInstance, TTable table, string viewName, string column, ClauseType clause, Tuple<long, long> location)
            {
                this.outerInstance = outerInstance;
                this.targetTable = table;
                this.targetColumn = column;
                this.clause = clause;
                this.location = location;
                columnObject = new TColumn(outerInstance);
                columnObject.columnName = "*";
                columnObject.viewName = viewName;
                updateColumnTableFullName(table, columnObject);
            }

            public TResultEntry(ColumnImpact outerInstance, TTable table, TColumn columnObject, string column, ClauseType clause, Tuple<long, long> location)
            {
                this.outerInstance = outerInstance;
                this.targetTable = table;
                this.targetColumn = column;
                this.clause = clause;
                this.location = location;
                this.columnObject = columnObject;
                updateColumnTableFullName(table, this.columnObject);
            }

            internal virtual void updateColumnTableFullName(TTable table, TColumn column)
            {
                IList<string> fullNames = column.tableFullNames;
                if (fullNames != null)
                {
                    for (int i = 0; i < fullNames.Count; i++)
                    {
                        string tableName = table.Name;
                        string fullName = fullNames[i];
                        if (!string.ReferenceEquals(tableName, null))
                        {
                            fullName = string.ReferenceEquals(fullName, null) ? "" : fullName.Trim();
                            if (!tableName.Equals(fullName, StringComparison.OrdinalIgnoreCase))
                            {
                                if (!fullNames.Contains(table.FullName))
                                {
                                    fullNames.RemoveAt(i);
                                    fullNames.Insert(i, table.FullName);
                                }
                            }
                        }
                    }
                }
            }
        }

        internal class TSourceColumn
        {
            private readonly ColumnImpact outerInstance;

            public TSourceColumn(ColumnImpact outerInstance)
            {
                this.outerInstance = outerInstance;
            }


            public IList<ClauseType> clauses = new List<ClauseType>();
            public string name;
            public string tableName;
            public string tableOwner;
            public LinkedHashMap<ClauseType, IList<Tuple<long, long>>> locations = new LinkedHashMap<ClauseType, IList<Tuple<long, long>>>();
        }

        public static void Main_1(string[] args)
        {
            if (args.Length == 0)
            {
                Console.WriteLine("Usage: ColumnImpact [/f <script file>] [/d]/[/s [/xml] [/c]]/[/v] [/o <output file path>] [/t <database type>]");
                Console.WriteLine("/s: Option, display the analysis result simply.");
                Console.WriteLine("/c: Option, display the analysis result simply in column level.");
                Console.WriteLine("/d: Option, display the analysis result in detail.");
                Console.WriteLine("/xml: Option, export the analysis results to XML format, it's valid only if /s is specified");
                Console.WriteLine("/v: Option, trace data lineage in views.");
                Console.WriteLine("/o: Option, write the output stream to the specified file.");
                Console.WriteLine("/t: Option, set the database type. Support oracle, mysql, mssql and db2, the default type is oracle");
                return;
            }

            string sqltext = @"SELECT e.last_name AS name,
                                e.commission_pct comm,
                                e.salary * 12 ""Annual Salary""
                                FROM scott.employees AS e
                                WHERE e.salary > 1000 or 1=1
                                ORDER BY
                                e.first_name,
                                e.last_name;";

            IList<string> argList = new List<string>(args);

            bool traceView = argList.IndexOf("/v") != -1;

            bool simply = traceView || argList.IndexOf("/s") != -1;

            bool isXML = !traceView && simply && argList.IndexOf("/xml") != -1;

            bool isColumnLevel = !traceView && simply && argList.IndexOf("/c") != -1;

            string outputFile = null;

            int index = argList.IndexOf("/o");

            if (index != -1 && args.Length > index + 1)
            {
                outputFile = args[index + 1];
            }

            System.IO.StreamWriter writer = null;
            if (!string.ReferenceEquals(outputFile, null))
            {
                try
                {
                    writer = new StreamWriter(outputFile);
                    Console.SetOut(writer);
                }
                catch (FileNotFoundException e)
                {
                    Console.WriteLine(e.ToString());
                    Console.Write(e.StackTrace);
                }
            }

            EDbVendor vendor = Common.GetEDbVendor(args);

            FileInfo file = null;

            index = argList.IndexOf("/f");
            if (index != -1 && args.Length > index + 1)
            {
                file = new FileInfo(args[index + 1]);
            }

            ColumnImpact impact = null;
            if (file != null)
            {
                impact = new ColumnImpact(file, vendor, simply, isXML, isColumnLevel, traceView, null);
            }
            else
            {
                impact = new ColumnImpact(sqltext, vendor, simply, isXML, isColumnLevel, traceView, null);
            }
            
            impact.CollectColumnInfo = false;
            impact.impactSQL();
            Console.Write(impact.ImpactResult);

            if (!simply)
            {
                Console.WriteLine("\r\nYou can add /s directive to display the analysis result in a simple format.");
            }

            try
            {
                if (writer != null)
                {
                    writer.Close();
                }
            }
            catch (IOException e)
            {
                Console.WriteLine(e.ToString());
                Console.Write(e.StackTrace);
            }
        } // main

        internal virtual TColumn attrToColumn(TExpression lcexpr, TCustomSqlStatement stmt, TExpression expr, bool collectExpr, ClauseType clause, TAlias parentAlias)
        {
            TColumn column = attrToColumn(lcexpr, stmt, clause, parentAlias);
            if (column == null)
            {
                return null;
            }
            if (collectExpr)
            {
                column.expression = new Regex("\n+").Replace(expr.ToString().Replace("\r\n", "\n"), " ");
                if (column.expression.Trim().Length > 0)
                {
                    List<TParseTreeNode> tokens = expr.startToken.nodesStartFromThisToken;
                    if (tokens != null)
                    {
                        for (int i = 0; i < tokens.Count; i++)
                        {
                            TParseTreeNode node = tokens[i];
                            if (node is TResultColumn)
                            {
                                TResultColumn field = (TResultColumn)node;
                                if (field.AliasClause != null)
                                {
                                    column.alias = field.AliasClause.ToString();
                                }
                            }
                        }
                    }
                }
            }
            return column;
        }

        /* store the relations of alias to column */
        private IList<TAlias> aliases = new List<TAlias>();
        private StringBuilder buffer = new StringBuilder();
        private LinkedHashMap<string, TCustomSqlStatement> cteMap = new LinkedHashMap<string, TCustomSqlStatement>();
        private LinkedHashMap<string, LinkedHashMap<TCustomSqlStatement, bool>> accessMap = new LinkedHashMap<string, LinkedHashMap<TCustomSqlStatement, bool>>();
        private LinkedHashMap<TCustomSqlStatement, ClauseType> currentClauseMap = new LinkedHashMap<TCustomSqlStatement, ClauseType>();
        private string currentSource = null;
        /* store the dependency relations */
        private LinkedHashMap<string, IList<TResultEntry>> dependMap = new LinkedHashMap<string, IList<TResultEntry>>();
        private IMetaDatabase filter;
        private bool isXML = false;
        private bool isColumnLevel = false;
        private bool traceView = false;
        private bool simply = false;
        private int columnNumber = 0;
        private TCustomSqlStatement subquery = null;
        private string viewName;
        private bool collectColumnInfo = true;
        private TGSqlParser sqlparser;
        private List<DSGTOOLS_QUERY_CTE_SQL_RAW> lst_DSGTOOLS_QUERY_CTE_SQL_RAW = new List<DSGTOOLS_QUERY_CTE_SQL_RAW>();
        private List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT> lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT = new List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT>();

        public List<DSGTOOLS_QUERY_CTE_SQL_RAW> prop_lst_DSGTOOLS_QUERY_CTE_SQL_RAW
        {
            get
            {
                return lst_DSGTOOLS_QUERY_CTE_SQL_RAW;
            }
            set
            {
                this.lst_DSGTOOLS_QUERY_CTE_SQL_RAW = value;
            }
        }

        public List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT> prop_lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT
        {
            get
            {
                return lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT;
            }
            set
            {
                this.lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT = value;
            }
        }

        public virtual bool CollectColumnInfo
        {
            get
            {
                return collectColumnInfo;
            }
            set
            {
                this.collectColumnInfo = value;
            }
        }


        public ColumnImpact(FileInfo file, EDbVendor dbVendor, bool? simply, bool? isXML)
        {
            this.simply = simply.Value;
            this.isXML = isXML.Value;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqlfilename = file.FullName;
        }

        public ColumnImpact(FileInfo file, EDbVendor dbVendor, bool? simply, bool? isXML, IMetaDatabase filter)
        {
            this.simply = simply.Value;
            this.isXML = isXML.Value;
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqlfilename = file.FullName;
        }

        public ColumnImpact(string sql, EDbVendor dbVendor, bool? simply, bool? isXML)
        {
            this.simply = simply.Value;
            this.isXML = isXML.Value;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqltext = sql;
        }

        public ColumnImpact(string sql, EDbVendor dbVendor, bool? simply, bool? isXML, IMetaDatabase filter)
        {
            this.simply = simply.Value;
            this.isXML = isXML.Value;
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqltext = sql;
        }

        public ColumnImpact(FileInfo file, EDbVendor dbVendor, bool simply, bool isXML, bool isColumnLevel, IMetaDatabase filter)
        {
            this.simply = simply;
            this.isXML = isXML;
            this.isColumnLevel = isColumnLevel;
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqlfilename = file.FullName;
        }

        public ColumnImpact(FileInfo file, EDbVendor dbVendor, bool simply, bool isXML, bool isColumnLevel, bool traceView, IMetaDatabase filter)
        {
            if (traceView)
            {
                this.traceView = true;
                this.simply = true;
                this.isColumnLevel = true;
            }
            else
            {
                this.simply = simply;
                this.isXML = isXML;
                this.isColumnLevel = isColumnLevel;
            }
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqlfilename = file.FullName;
        }

        public ColumnImpact(string sql, EDbVendor dbVendor, bool? simply, bool? isXML, bool isColumnLevel, IMetaDatabase filter)
        {
            this.simply = simply.Value;
            this.isXML = isXML.Value;
            this.isColumnLevel = isColumnLevel;
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqltext = sql;
        }

        public ColumnImpact(string sql, EDbVendor dbVendor, bool simply, bool isXML, bool isColumnLevel, bool traceView, IMetaDatabase filter)
        {
            if (traceView)
            {
                this.traceView = true;
                this.simply = true;
                this.isColumnLevel = true;
            }
            else
            {
                this.simply = simply;
                this.isXML = isXML;
                this.isColumnLevel = isColumnLevel;
            }
            this.filter = filter;
            sqlparser = new TGSqlParser(dbVendor);
            sqlparser.sqltext = sql;
        }

        private TColumn attrToColumn(TExpression attr, TCustomSqlStatement stmt, ClauseType clauseType, TAlias parentAlias)
        {

            if (sqlparser.DbVendor == EDbVendor.dbvteradata)
            {
                if (clauseType == ClauseType.select && parentAlias != null)
                {
                    string columnName = removeQuote(attr.ObjectOperand.endToken.ToString());
                    TResultColumn resultColumn = getResultColumnByAlias(stmt, columnName);
                    if (resultColumn != null)
                    {
                        if (resultColumn.AliasClause != null && !parentAlias.alias.Equals(resultColumn.ColumnAlias, StringComparison.OrdinalIgnoreCase))
                        {
                            linkFieldToTables(parentAlias, resultColumn, stmt, 0);
                        }
                        return null;
                    }
                }
            }

            TColumn column = new TColumn(this);
            column.clauseType = clauseType;
            if (!string.ReferenceEquals(viewName, null))
            {
                column.viewName = viewName;
            }
            column.columnName = removeQuote(attr.ObjectOperand.endToken.ToString());
            column.location = new Tuple<long, long>(attr.ObjectOperand.endToken.lineNo, attr.endToken.columnNo);

            List<TParseTreeNode> tokens = attr.ObjectOperand.startToken.nodesStartFromThisToken;
            if (tokens != null)
            {
                for (int i = 0; i < tokens.Count; i++)
                {
                    TParseTreeNode node = tokens[i];
                    if (node is TResultColumn)
                    {
                        TResultColumn field = (TResultColumn)node;
                        if (field.AliasClause != null)
                        {
                            column.alias = field.AliasClause.ToString();
                        }
                    }
                }
            }

            if (attr.ToString().IndexOf(".", StringComparison.Ordinal) > 0)
            {
                column.columnPrex = removeQuote(attr.ToString().Substring(0, attr.ToString().LastIndexOf(".", StringComparison.Ordinal)));

                string tableName = removeQuote(column.columnPrex);
                if (tableName.IndexOf(".", StringComparison.Ordinal) > 0)
                {
                    tableName = removeQuote(tableName.Substring(tableName.LastIndexOf(".", StringComparison.Ordinal) + 1));
                }
                if (!column.tableNames.Contains(tableName))
                {
                    column.tableNames.Add(tableName);
                    if (!column.tableFullNames.Contains(tableName))
                    {
                        column.tableFullNames.Add(tableName);
                    }
                }
            }
            else
            {
                TTableList tables = stmt.tables;
                for (int i = 0; i < tables.size(); i++)
                {
                    TTable lztable = tables.getTable(i);
                    Table table = TLzTaleToTable(lztable);
                    if (!column.tableNames.Contains(table.tableName))
                    {
                        column.tableNames.Add(table.tableName);
                        if (!column.tableFullNames.Contains(lztable.FullName))
                        {
                            column.tableFullNames.Add(lztable.FullName);
                        }
                    }
                }
            }

            column.orignColumn = column.columnName;

            return column;
        }

        private TResultColumn getResultColumnByAlias(TCustomSqlStatement stmt, string columnName)
        {
            TResultColumnList columns = stmt.ResultColumnList;
            if (columns != null)
            {
                for (int i = 0; i < columns.size(); i++)
                {
                    TResultColumn column = columns.getResultColumn(i);
                    if (column.AliasClause != null && columnName.Equals(column.AliasClause.ToString(), StringComparison.OrdinalIgnoreCase))
                    {
                        return column;
                    }
                }
            }
            return null;
        }

        private string buildString(string @string, int level)
        {
            StringBuilder buffer = new StringBuilder();
            for (int i = 0; i < level; i++)
            {
                buffer.Append(@string);
            }
            return buffer.ToString();
        }

        private TCustomSqlStatement containClasuse(LinkedHashMap<TCustomSqlStatement, ClauseType> currentClauseMap, TCustomSqlStatement select)
        {
            if (currentClauseMap.ContainsKey(select))
            {
                return select;
            }
            else if (select.ParentStmt is TCustomSqlStatement)
            {
                return containClasuse(currentClauseMap, (TCustomSqlStatement)select.ParentStmt);
            }
            else
            {
                return null;
            }
        }

        private IList<TColumn> exprToColumn(TExpression expr, TCustomSqlStatement stmt, int level, ClauseType clauseType)
        {
            IList<TColumn> columns = new List<TColumn>();

            columnsInExpr c = new columnsInExpr(this, this, expr, columns, stmt, level, false, clauseType, null);
            c.searchColumn();

            return columns;
        }

        private IList<TColumn> exprToColumn(TExpression expr, TCustomSqlStatement stmt, int level, ClauseType clauseType, TAlias parentAlias)
        {
            IList<TColumn> columns = new List<TColumn>();

            columnsInExpr c = new columnsInExpr(this, this, expr, columns, stmt, level, false, clauseType, parentAlias);
            c.searchColumn();

            return columns;
        }

        private IList<TColumn> exprToColumn(TExpression expr, TCustomSqlStatement stmt, int level, bool collectExpr, ClauseType clauseType, TAlias parentAlias)
        {
            IList<TColumn> columns = new List<TColumn>();

            columnsInExpr c = new columnsInExpr(this, this, expr, columns, stmt, level, collectExpr, clauseType, parentAlias);
            c.searchColumn();

            return columns;
        }

        private bool findColumnInSubQuery(TSelectSqlStatement select, string columnName, int level, Tuple<long, long> originLocation)
        {
            bool ret = false;
            if (accessMap.ContainsKey(columnName) && accessMap[columnName] != null && accessMap[columnName].ContainsKey(select))
            {
                return accessMap[columnName][select];
            }
            else
            {
                if (!accessMap.ContainsKey(columnName))
                {
                    accessMap[columnName] = new LinkedHashMap<TCustomSqlStatement, bool>();
                }
                accessMap[columnName][select] = false;
            }
            if (select.SetOperator != TSelectSqlStatement.setOperator_none)
            {
                bool left = findColumnInSubQuery(select.LeftStmt, columnName, level, originLocation);
                bool right = findColumnInSubQuery(select.RightStmt, columnName, level, originLocation);
                ret = left && right;
            }
            else if (select.ResultColumnList != null)
            {
                // check colum name in select list of subquery
                TResultColumn columnField = null;
                if (!"*".Equals(columnName))
                {
                    for (int i = 0; i < select.ResultColumnList.size(); i++)
                    {
                        TResultColumn field = select.ResultColumnList.getResultColumn(i);
                        if (field.AliasClause != null)
                        {
                            if (field.AliasClause.ToString().Equals(columnName, StringComparison.OrdinalIgnoreCase))
                            {
                                columnField = field;
                                break;
                            }
                        }
                        else
                        {
                            if (field.Expr.ExpressionType == EExpressionType.simple_object_name_t)
                            {
                                TColumn column = attrToColumn(field.Expr, select, ClauseType.select, null);
                                if (!string.ReferenceEquals(columnName, null) && columnName.Equals(column.columnName, StringComparison.OrdinalIgnoreCase))
                                {
                                    columnField = field;
                                    break;
                                }
                            }
                        }
                    }
                }
                for (int i = 0; i < select.ResultColumnList.size(); i++)
                {
                    TResultColumn field = select.ResultColumnList.getResultColumn(i);
                    if (columnField != null && !field.Equals(columnField))
                    {
                        continue;
                    }
                    if (field.AliasClause != null)
                    {
                        ret = "*".Equals(columnName) || field.AliasClause.ToString().Equals(columnName, StringComparison.OrdinalIgnoreCase);
                        if (ret)
                        {
                            // let's check where this column come from?
                            if (!simply)
                            {
                                buffer.Append(buildString(" ", level) + "--> " + field.AliasClause.ToString() + "(alias)\r\n");
                            }
                            linkFieldToTables(null, field, select, level);
                        }
                    }
                    else
                    {
                        if (field.Expr.ExpressionType == EExpressionType.simple_object_name_t)
                        {
                            TColumn column = attrToColumn(field.Expr, select, ClauseType.select, null);
                            ret = "*".Equals(columnName) || (!string.ReferenceEquals(columnName, null) && columnName.Equals(column.columnName, StringComparison.OrdinalIgnoreCase));
                            if (ret || "*".Equals(column.columnName))
                            {
                                findColumnInTables(column, select, level, ret == false ? columnName : null, originLocation);
                                findColumnsFromClauses(select, level + 1);
                            }
                        }
                    }

                    if (ret && !"*".Equals(columnName))
                    {
                        break;
                    }
                }
            }

            LinkedHashMap<TCustomSqlStatement, bool> stmts = accessMap[columnName];
            if (stmts != null)
            {
                stmts[select] = ret;
            }

            return ret;
        } // findColumnInSubQuery

        private bool findColumnInTables(TColumn column, TCustomSqlStatement select, int level, string columnName, Tuple<long, long> originLocation)
        {
            bool ret = false;
            foreach (string tableName in column.tableNames)
            {
                if (!string.ReferenceEquals(columnName, null) && filter != null)
                {
                    int dotIndex = tableName.LastIndexOf(".", StringComparison.Ordinal);
                    string tableOwner = null;
                    string tableRealName = null;
                    if (dotIndex >= 0)
                    {
                        tableOwner = tableName.Substring(0, dotIndex);
                        tableRealName = tableName.Replace(tableOwner + ".", "");
                    }
                    else
                    {
                        tableRealName = tableName;
                    }
                    if (filter.checkColumn(null, null, tableOwner, tableRealName, columnName))
                    {
                        column.columnName = columnName;
                        if (originLocation != null)
                        {
                            column.location = originLocation;
                        }
                        // column.orignColumn = "*";
                        ret |= findColumnInTables(column, tableName, select, level);
                    }
                    else
                    {
                        ret |= false;
                    }
                }
                else
                {
                    ret |= findColumnInTables(column, tableName, select, level);
                }
            }
            return ret;
        }

        private bool findColumnInTables(TColumn column, string tableName, TCustomSqlStatement select, int level)
        {
            return findColumnInTables(column, tableName, select, level, ClauseType.undefine);
        }

        private bool findColumnInTables(TColumn column, string tableName, TCustomSqlStatement select, int level, ClauseType clause)
        {
            bool ret = false;
            TTableList tables = select.tables;

            if (tables.size() == 1)
            {
                TTable lzTable = tables.getTable(0);
                // buffer.AppendLine(lzTable.AsText);
                if ((lzTable.TableType == ETableSource.objectname) && (string.ReferenceEquals(tableName, null) || (!string.ReferenceEquals(tableName, null) && lzTable.AliasClause == null && getTableName(lzTable).Equals(tableName, StringComparison.OrdinalIgnoreCase)) || (!string.ReferenceEquals(tableName, null) && lzTable.AliasClause != null && lzTable.AliasClause.ToString().Equals(tableName, StringComparison.OrdinalIgnoreCase))))
                {
                    ret = true;

                    if (!simply)
                    {
                        buffer.Append(buildString(" ", level) + "--> " + getTableName(lzTable) + "." + column.columnName + "\r\n");
                    }
                    if (cteMap.ContainsKey(getTableName(lzTable)))
                    {
                        if (!simply)
                        {
                            buffer.Append(buildString(" ", level) + "--> WITH CTE\r\n");
                        }
                        ret = findColumnInSubQuery((TSelectSqlStatement)cteMap[getTableName(lzTable)], column.columnName, level, column.location);
                    }
                    else
                    {
                        if (!string.ReferenceEquals(currentSource, null) && dependMap.ContainsKey(currentSource))
                        {
                            TCustomSqlStatement stmt = containClasuse(currentClauseMap, select);
                            if (stmt != null)
                            {
                                dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, (ClauseType)currentClauseMap[stmt], column.location));
                            }
                            else if (select is TSelectSqlStatement)
                            {
                                if (ClauseType.undefine.Equals(clause))
                                {
                                    dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, ClauseType.select, column.location));
                                }
                                else
                                {
                                    dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, clause, column.location));
                                }
                            }
                            else
                            {
                                dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, ClauseType.undefine, column.location));
                            }
                        }
                    }
                }
                else if (select.ParentStmt is TSelectSqlStatement)
                {
                    subquery = select;
                    ret = findColumnInTables(column, tableName, select.ParentStmt, level, clause);
                    subquery = null;
                }
            }

            if (ret)
            {
                return ret;
            }

            for (int x = 0; x < tables.size(); x++)
            {
                TTable lzTable = tables.getTable(x);
                switch (lzTable.TableType)
                {
                    case ETableSource.objectname:
                        Table table = TLzTaleToTable(lzTable);
                        string alias = table.tableAlias;
                        if (!string.ReferenceEquals(alias, null))
                        {
                            alias = alias.Trim();
                        }
                        if ((!string.ReferenceEquals(tableName, null)) && ((tableName.Equals(alias, StringComparison.OrdinalIgnoreCase) || tableName.Equals(table.tableName, StringComparison.OrdinalIgnoreCase))))
                        {
                            if (!simply)
                            {
                                buffer.Append(buildString(" ", level) + "--> " + table.tableName + "." + column.columnName + "\r\n");
                            }
                            if (cteMap.ContainsKey(getTableName(lzTable)))
                            {
                                if (!simply)
                                {
                                    buffer.Append(buildString(" ", level) + "--> WITH CTE\r\n");
                                }
                                ret = findColumnInSubQuery((TSelectSqlStatement)cteMap[getTableName(lzTable)], column.columnName, level, column.location);
                            }
                            else
                            {
                                if (dependMap.ContainsKey(currentSource))
                                {
                                    string columnName = column.orignColumn;
                                    if ("*".Equals(columnName))
                                    {
                                        columnName = column.columnName;
                                    }
                                    if (currentClauseMap.ContainsKey(select))
                                    {
                                        dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, columnName, (ClauseType)currentClauseMap[select], column.location));
                                    }
                                    else if (select is TSelectSqlStatement)
                                    {
                                        if (ClauseType.undefine.Equals(clause))
                                        {
                                            dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, ClauseType.select, column.location));
                                        }
                                        else
                                        {
                                            dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, column.columnName, clause, column.location));
                                        }
                                    }
                                    else
                                    {
                                        dependMap[currentSource].Add(new TResultEntry(this, lzTable, column, columnName, ClauseType.undefine, column.location));
                                    }
                                }
                                ret = true;
                            }
                        }
                        break;
                    case ETableSource.subquery:
                        for (int i = 0; i < column.tableNames.Count; i++)
                        {
                            string name = column.tableNames[i];
                            TSelectSqlStatement selectStat = (TSelectSqlStatement)lzTable.Subquery;

                            if (selectStat == subquery)
                            {
                                continue;
                            }

                            if (string.ReferenceEquals(name, null))
                            {
                                ret = findColumnInSubQuery(selectStat, column.columnName, level, column.location);
                                break;
                            }

                            if (lzTable.AliasClause != null && getTableAliasName(lzTable).Equals(name, StringComparison.OrdinalIgnoreCase))
                            {
                                ret = findColumnInSubQuery(selectStat, column.columnName, level, column.location);
                                break;
                            }

                            bool flag = false;
                            for (int j = 0; j < selectStat.tables.size(); j++)
                            {
                                if (selectStat.tables.getTable(j).AliasClause != null)
                                {
                                    if (getTableAliasName(selectStat.tables.getTable(j)).Equals(name, StringComparison.OrdinalIgnoreCase))
                                    {
                                        ret = findColumnInSubQuery(selectStat, column.columnName, level, column.location);
                                        flag = true;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (selectStat.tables.getTable(j).TableName.ToString().Equals(name, StringComparison.OrdinalIgnoreCase))
                                    {
                                        ret = findColumnInSubQuery(selectStat, column.columnName, level, column.location);
                                        flag = true;
                                        break;
                                    }
                                }
                            }
                            if (flag)
                            {
                                break;
                            }
                        }
                        break;
                    default:
                        break;
                }
                if (ret)
                {
                    break;
                }
            }

            if (!ret && select.ParentStmt is TSelectSqlStatement)
            {
                subquery = select;
                ret = findColumnInTables(column, tableName, select.ParentStmt, level, clause);
                subquery = null;
            }

            return ret;
        }

        private string getTableAliasName(TTable lztable)
        {
            return removeQuote(lztable.AliasClause.AliasName.ToString());
        }

        private string getTableName(TTable lzTable)
        {
            return removeQuote(lzTable.Name);
        }



        private void findColumnsFromClauses(TCustomSqlStatement select, int level)
        {
            currentClauseMap[select] = ClauseType.undefine;
            LinkedHashMap<TExpression, ClauseType> clauseTable = new LinkedHashMap<TExpression, ClauseType>();
            if (select is TSelectSqlStatement)
            {

                TSelectSqlStatement statement = (TSelectSqlStatement)select;

                if (statement.OrderbyClause != null)
                {
                    TOrderBy sortList = statement.OrderbyClause;
                    for (int i = 0; i < sortList.Items.size(); i++)
                    {
                        TOrderByItem orderBy = sortList.Items.getOrderByItem(i);
                        TExpression expr = orderBy.SortKey;
                        clauseTable[expr] = ClauseType.orderby;
                    }
                }

                if (statement.WhereClause != null)
                {
                    clauseTable[statement.WhereClause.Condition] = ClauseType.@where;
                }
                if (statement.HierarchicalClause != null && statement.HierarchicalClause.ConnectByList != null)
                {
                    for (int i = 0; i < statement.HierarchicalClause.ConnectByList.Count; i++)
                    {
                        clauseTable[statement.HierarchicalClause.ConnectByList[i].Condition] = ClauseType.connectby;
                    }
                }
                if (statement.HierarchicalClause != null && statement.HierarchicalClause.StartWithClause != null)
                {
                    clauseTable[statement.HierarchicalClause.StartWithClause] = ClauseType.startwith;
                }
                if (statement.joins != null)
                {
                    for (int i = 0; i < statement.joins.size(); i++)
                    {
                        TJoin join = statement.joins.getJoin(i);
                        if (join.JoinItems != null)
                        {
                            for (int j = 0; j < join.JoinItems.size(); j++)
                            {
                                TJoinItem joinItem = join.JoinItems.getJoinItem(j);
                                TExpression expr = joinItem.OnCondition;
                                if (expr != null)
                                {
                                    clauseTable[expr] = ClauseType.join;
                                }
                            }
                        }
                    }
                }
            }
            else if (select is TUpdateSqlStatement)
            {
                TUpdateSqlStatement statement = (TUpdateSqlStatement)select;
                if (statement.OrderByClause != null)
                {
                    TOrderByItemList sortList = statement.OrderByClause.Items;
                    for (int i = 0; i < sortList.size(); i++)
                    {
                        TOrderByItem orderBy = sortList.getOrderByItem(i);
                        TExpression expr = orderBy.SortKey;
                        clauseTable[expr] = ClauseType.orderby;
                    }
                }
                if (statement.WhereClause != null)
                {
                    clauseTable[statement.WhereClause.Condition] = ClauseType.@where;
                }

                if (statement.joins != null)
                {
                    for (int i = 0; i < statement.joins.size(); i++)
                    {
                        TJoin join = statement.joins.getJoin(i);
                        if (join.JoinItems != null)
                        {
                            for (int j = 0; j < join.JoinItems.size(); j++)
                            {
                                TJoinItem joinItem = join.JoinItems.getJoinItem(j);
                                TExpression expr = joinItem.OnCondition;
                                if (expr != null)
                                {
                                    clauseTable[expr] = ClauseType.join;
                                }
                            }
                        }
                    }
                }
            }

            foreach (TExpression expr in clauseTable.Keys)
            {
                currentClauseMap[select] = clauseTable[expr];

                if (!simply)
                {
                    switch ((ClauseType)currentClauseMap[select])
                    {
                        case ClauseType.where:
                            buffer.Append(buildString(" ", level) + "--> Where Clause\r\n");
                            break;
                        case ClauseType.connectby:
                            buffer.Append(buildString(" ", level) + "--> Connect By Clause\r\n");
                            break;
                        case ClauseType.startwith:
                            buffer.Append(buildString(" ", level) + "--> Start With Clause\r\n");
                            break;
                        case ClauseType.orderby:
                            buffer.Append(buildString(" ", level) + "--> Order By Clause\r\n");
                            break;
                        case ClauseType.join:
                            buffer.Append(buildString(" ", level) + "--> Join\r\n");
                            break;
                    }

                }

                IList<TColumn> columns = exprToColumn(expr, select, level, clauseTable[expr]);
                foreach (TColumn column1 in columns)
                {
                    foreach (string tableName in column1.tableNames)
                    {
                        if (!simply)
                        {

                            switch ((ClauseType)currentClauseMap[select])
                            {
                                case ClauseType.where:
                                    buffer.Append(buildString(" ", level + 1) + "--> " + column1.getFullName(tableName) + "(Where)\r\n");
                                    break;
                                case ClauseType.connectby:
                                    buffer.Append(buildString(" ", level + 1) + "--> " + column1.getFullName(tableName) + "(Connect By)\r\n");
                                    break;
                                case ClauseType.startwith:
                                    buffer.Append(buildString(" ", level + 1) + "--> " + column1.getFullName(tableName) + "(Start With)\r\n");
                                    break;
                                case ClauseType.orderby:
                                    buffer.Append(buildString(" ", level + 1) + "--> " + column1.getFullName(tableName) + "(Order By)\r\n");
                                    break;
                                case ClauseType.join:
                                    buffer.Append(buildString(" ", level + 1) + "--> " + column1.getFullName(tableName) + "(Join)\r\n");
                                    break;
                            }

                        }
                        findColumnInTables(column1, tableName, select, level + 2, column1.clauseType);
                    }

                }
            }
            currentClauseMap.Remove(select);

            // check order by clause
            findColumnsFromGroupBy(select, level);
        }

        private void findColumnsFromGroupBy(TCustomSqlStatement select, int level)
        {
            if (select is TSelectSqlStatement && ((TSelectSqlStatement)select).GroupByClause != null)
            {
                for (int j = 0; j < ((TSelectSqlStatement)select).GroupByClause.Items.size(); j++)
                {
                    TGroupByItem i = ((TSelectSqlStatement)select).GroupByClause.Items.getGroupByItem(j);

                    IList<TColumn> columns1;
                    try
                    {
                        if (i.Expr == null)
                        {
                            return;
                        }
                        int index = int.Parse(i.Expr.ToString());
                        columns1 = exprToColumn(select.ResultColumnList.getResultColumn(index - 1).Expr, select, level, ClauseType.groupby);
                    }
                    catch (System.FormatException)
                    {
                        columns1 = exprToColumn(i.Expr, select, level, ClauseType.groupby);
                    }

                    if (columns1.Count > 0)
                    {
                        TColumn column1 = columns1[0];
                        foreach (string tableName in column1.tableNames)
                        {
                            if (!simply)
                            {
                                buffer.Append(buildString(" ", level) + "--> " + column1.getFullName(tableName) + "(group by)\r\n");
                            }
                            findColumnInTables(column1, tableName, select, level + 1, ClauseType.groupby);
                        }
                    }
                }

            }
        }

        private void findColumnsFromList(TCustomSqlStatement select, int level, TParseTreeNodeList list, ClauseType clauseType)
        {
            if (list == null)
            {
                return;
            }

            for (int i = 0; i < list.size(); i++)
            {
                object element = list.getElement(i);
                TExpression lcexpr = null;
                if (element is TGroupByItem)
                {
                    lcexpr = ((TGroupByItem)element).Expr;
                }
                else if (element is TOrderByItem)
                {
                    lcexpr = ((TOrderByItem)element).SortKey;
                }
                else if (element is TExpression)
                {
                    lcexpr = (TExpression)element;
                }

                if (lcexpr != null)
                {
                    IList<TColumn> columns = exprToColumn(lcexpr, select, level, clauseType);
                    foreach (TColumn column1 in columns)
                    {
                        findColumnInTables(column1, select, level + 1, null, null);
                        findColumnsFromClauses(select, level + 2);
                    }
                }
            }
        }

        public virtual string ImpactResult
        {
            get
            {
                return buffer.ToString();
            }
        }

        public virtual IList<TColumn> ColumnInfos
        {
            get
            {
                return columnCollection;
            }
        }

        public virtual bool impactSQL(ref LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap)
        {
            #region Test
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage + "\r\n");
                return false;
            }
            else
            {
                columnCollection.Clear();

                for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        initCTEMap(select);
                    }
                }     
            }

            MyCTEsMap = cteMap;
            #endregion Test
            return true;
        }

        public virtual bool impactSQL(ref LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap, ref string MyErrormessage, ref Dictionary<string, List<string>> CTEcolumns, ref List<string> lst_endquery_nonCTE_Cols)
        {
            bool bParse = false;
            #region Test
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                bParse = false;
                buffer.Append(sqlparser.Errormessage + "\r\n");
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
                return bParse;
            }
            else
            {
                bParse = true;
                columnCollection.Clear();

                for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();
                        lst_DSGTOOLS_QUERY_CTE_SQL_RAW = new List<DSGTOOLS_QUERY_CTE_SQL_RAW>();
                        lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT = new List<DSGTOOLS_QUERY_CTE_SQL_OUTPUT>();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        //initCTEMap(select);
                        /*Dictionary<string, List<string>>*/
                        CTEcolumns = new Dictionary<string, List<string>>();
                        string endquery_nonCTE_Cols = "";
                        initCTEMap(select, ref CTEcolumns, ref endquery_nonCTE_Cols);
                        lst_endquery_nonCTE_Cols.Add(endquery_nonCTE_Cols);
                    }
                }
            }

            if (/*bParse==false && */cteMap.Count <= 0)
            {
                //MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
                MyErrormessage = "[CTE not found" + "]";
            }
            else if(bParse == false)
            {
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                MyCTEsMap = cteMap;
            }
            #endregion Test
            //return true;
            return bParse;
        }


        public virtual bool impactSQL(ref LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap, ref string MyErrormessage, ref Dictionary<string, List<string>> CTEcolumns)
        {
            #region Test
            //int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage + "\r\n");
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
                return false;
            }
            else
            {
                columnCollection.Clear();

                for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        //initCTEMap(select);
                        /*Dictionary<string, List<string>>*/
                        CTEcolumns = new Dictionary<string, List<string>>();
                        initCTEMap(select, ref CTEcolumns);
                    }
                }
            }

            if (cteMap.Count <= 0)
            {
                MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                MyCTEsMap = cteMap;
            }
            #endregion Test
            return true;
        }

        public virtual bool impactSQL(ref LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap, ref string MyErrormessage)
        {
            #region Test
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage + "\r\n");
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" +  "]";
                return false;
            }
            else
            {
                columnCollection.Clear();
                int isize = sqlparser.sqlstatements.size();
                for (int k = 0; k < isize; k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        initCTEMap(select);
                    }
                }
            }

            if (cteMap.Count <= 0)
            {
                MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                MyCTEsMap = cteMap;
            }
            #endregion Test
            return true;
        }

        public virtual bool impactSQL()
        {
            #region Test
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            columnCollection.Clear();

            for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
            {
                if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                {
                    dependMap.Clear();
                    aliases.Clear();
                    currentSource = null;
                    cteMap.Clear();
                    currentClauseMap.Clear();
                    accessMap.Clear();

                    TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                    initCTEMap(select);
                }
            }
            #endregion Test

            return true;
        }

        public virtual void iterateStmt_getCTEs(TCustomSqlStatement stmt, ref string formatedCTEs)
        {
            LinkedHashMap<string, TCustomSqlStatement> MyCTEsMap = new LinkedHashMap<string, TCustomSqlStatement>();
            string MyErrormessage = "";
            Dictionary<string, List<string>> CTEcolumns = new Dictionary<string, List<string>>();
            List<string> lst_endquery_nonCTE_Cols = new List<string>();
            string ErrMsg_FromSQLParser = "";

            ColumnImpact impact = new ColumnImpact(sqlparser.sqltext, sqlparser.DbVendor, true, true);
            impact.CollectColumnInfo = false;

            //int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage + "\r\n");
                MyErrormessage = sqlparser.Errormessage + " [" + "gudusoft can't parse query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                columnCollection.Clear();

                //for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                //{
                if (stmt is TCustomSqlStatement)
                {
                    dependMap.Clear();
                    aliases.Clear();
                    currentSource = null;
                    cteMap.Clear();
                    currentClauseMap.Clear();
                    accessMap.Clear();

                    string endquery_nonCTE_Cols = "";
                    initCTEMap(stmt, ref CTEcolumns, ref endquery_nonCTE_Cols);
                    lst_endquery_nonCTE_Cols.Add(endquery_nonCTE_Cols);
                }
                //}
            }

            if (cteMap.Count <= 0)
            {
                MyErrormessage = "[Invalid query in QSR_SQL, CTE not found" + "]";
            }
            else
            {
                MyCTEsMap = cteMap;
            }

            #region if not found from above, try to find from "MyCTEsMap" already found 
            Dictionary<string, List<string>> CTEcolumns_From_myCTEsMap = new Dictionary<string, List<string>>();
            impact.getCTEColumns(MyCTEsMap, ref CTEcolumns_From_myCTEsMap);
            #endregion if not found from above, try to find from "MyCTEsMap" already found

            MyUtil.MergeDictionary(CTEcolumns_From_myCTEsMap, CTEcolumns);
            string myformatedCTEs = "";
            MyUtil.FormatCTEs(CTEcolumns, lst_endquery_nonCTE_Cols, ErrMsg_FromSQLParser, ref myformatedCTEs);
            formatedCTEs = myformatedCTEs;
        }
        public virtual bool impactSQL_orig()
        {
            int ret0 = sqlparser.checkSyntax();
            int ret = sqlparser.parse();

            if (ret != 0)
            {
                buffer.Append(sqlparser.Errormessage + "\r\n");
                return false;
            }
            else
            {
                Document doc = null;
                Element columnImpactResult = null;
                if (simply && isXML)
                {
                    doc = new Document();
                    XDeclaration declaration = new XDeclaration("1.0", "utf-8", "no");
                    doc.Declaration = declaration;
                    columnImpactResult = new XElement("columnImpactResult");
                    doc.Add(columnImpactResult);
                }

                columnCollection.Clear();

                for (int k = 0; k < sqlparser.sqlstatements.size(); k++)
                {
                    if (sqlparser.sqlstatements.get(k) is TCustomSqlStatement)
                    {
                        dependMap.Clear();
                        aliases.Clear();
                        currentSource = null;
                        cteMap.Clear();
                        currentClauseMap.Clear();
                        accessMap.Clear();

                        TCustomSqlStatement select = (TCustomSqlStatement)sqlparser.sqlstatements.get(k);
                        initCTEMap(select);

                        columnNumber = 0;
                        impactSqlFromStatement(select);

                        if (traceView)
                        {
                            if (select is TCreateViewSqlStatement)
                            {
                                TSelectSqlStatement stmt = ((TCreateViewSqlStatement)select).Subquery;
                                if (stmt.WhereClause != null)
                                {
                                    buffer.Append("rt=vWhere\tview=" + viewName + "\twhere=").Append(new Regex("\n+").Replace(stmt.WhereClause.Condition.ToString().Replace("\r\n", "\n"), " ")).AppendLine();
                                }
                                IList<TTable> tableList = new List<TTable>();
                                checkStmtTables(stmt, tableList);
                                if (tableList.Count > 0)
                                {
                                    StringBuilder tableBuffer = new StringBuilder();
                                    IList<string> list = new List<string>();
                                    for (int i = 0; i < tableList.Count; i++)
                                    {
                                        IList<string> tables = new List<string>();
                                        getTableNames(tables, tableList[i]);
                                        if (tables != null)
                                        {
                                            for (int j = 0; j < tables.Count; j++)
                                            {
                                                bool exist = false;
                                                for (int z = 0; z < list.Count; z++)
                                                {
                                                    if (list[z].Equals(tables[j], StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        exist = true;
                                                        break;
                                                    }
                                                }
                                                if (!exist)
                                                {
                                                    list.Add(tables[j]);
                                                }
                                            }
                                        }
                                    }

                                    for (int i = 0; i < list.Count; i++)
                                    {
                                        tableBuffer.Append(list[i]);
                                        if (i < list.Count - 1)
                                        {
                                            tableBuffer.Append(", ");
                                        }
                                    }
                                    buffer.Append("rt=vTable\tview=" + viewName + "\ttables=").Append(tableBuffer.ToString()).AppendLine();

                                }
                                if (stmt.joins != null)
                                {
                                    for (int i = 0; i < stmt.joins.size(); i++)
                                    {
                                        if (stmt.joins.getJoin(i).JoinItems.size() > 0)
                                        {
                                            buffer.Append("rt=vJoin\tview=" + viewName + "\tjoin=").Append(new Regex("\n+").Replace(stmt.joins.getJoin(i).JoinItems.ToString().Replace("\r\n", "\n"), " ")).AppendLine();
                                        }
                                    }
                                }
                            }

                            LinkedHashMap<string, string> bufferMap = new LinkedHashMap<string, string>();
                            LinkedHashMap<string, string> exprMap = new LinkedHashMap<string, string>();

                            TCreateViewSqlStatement createView = null;
                            if (select is TCreateViewSqlStatement)
                            {
                                createView = (TCreateViewSqlStatement)select;
                            }
                            foreach (TAlias alias in aliases)
                            {
                                if (dependMap.ContainsKey(alias.alias))
                                {
                                    IList<TResultEntry> results = (IList<TResultEntry>)dependMap[alias.alias];
                                    IList<string> nullRealColumns = new List<string>();
                                    foreach (TResultEntry result in results)
                                    {
                                        TColumn columnObject = result.columnObject;
                                        if (columnObject == null || string.ReferenceEquals(columnObject.viewName, null))
                                        {
                                            continue;
                                        }

                                        if (result.clause != ClauseType.select)
                                        {
                                            continue;
                                        }

                                        string column = null;

                                        if (!string.ReferenceEquals(result.columnObject.columnName, null))
                                        {
                                            if (result.targetTable.FullName == null)
                                            {
                                                continue;
                                            }
                                            if ("*".Equals(result.targetColumn))
                                            {
                                                column = removeQuote(result.targetTable.FullName.ToLower());
                                            }
                                            else
                                            {
                                                column = removeQuote((result.targetTable.FullName + "." + result.targetColumn).ToLower());
                                            }
                                        }
                                        else
                                        {
                                            if (nullRealColumns.Contains(removeQuote(result.columnObject.expression)))
                                            {
                                                continue;
                                            }
                                            else
                                            {
                                                nullRealColumns.Add(removeQuote(result.columnObject.expression));
                                            }

                                        }

                                        string columnAlias = null;
                                        if (createView != null && createView.ViewAliasClause != null)
                                        {
                                            columnAlias = createView.ViewAliasClause.ViewAliasItemList.getViewAliasItem(aliases.IndexOf(alias)).Alias.ToString();
                                        }
                                        else if (!alias.alias.Equals(alias.column))
                                        {
                                            columnAlias = alias.alias;
                                        }
                                        else
                                        {
                                            columnAlias = alias.column;
                                            if (alias.columnExpr != null)
                                            {
                                                if (alias.columnExpr.ExpressionType == EExpressionType.simple_object_name_t)
                                                {
                                                    if (columnAlias.IndexOf('.') != -1)
                                                    {
                                                        columnAlias = columnAlias.Substring(columnAlias.LastIndexOf('.') + 1);
                                                    }
                                                }
                                            }
                                        }

                                        string temp = ("rt=col\tview=" + columnObject.viewName + "\t" + "column=" + columnAlias + "\t" + (!string.ReferenceEquals(column, null) ? ("source=" + column + "\t") : "") + "expression=");

                                        if (!bufferMap.ContainsKey(temp.ToUpper()))
                                        {
                                            bufferMap[temp.ToUpper()] = temp;
                                        }
                                        if (!string.ReferenceEquals(columnObject.expression, null) && columnObject.expression.Trim().Length > 0)
                                        {
                                            if (!exprMap.ContainsKey(temp.ToUpper()))
                                            {
                                                exprMap[temp.ToUpper()] = columnObject.expression;
                                            }
                                            else
                                            {
                                                string expr = exprMap[temp.ToUpper()];
                                                Regex regex = new Regex(",\\s*" + Regex.Escape(columnObject.expression) + "\\s*,", RegexOptions.IgnoreCase);
                                                if (!regex.Match(("," + expr + ",")).Success)
                                                {
                                                    expr += (", " + columnObject.expression);
                                                }
                                                exprMap[temp.ToUpper()] = expr;
                                            }
                                        }
                                    }
                                }
                            }
                            IEnumerator<string> iter = bufferMap.Keys.GetEnumerator();
                            while (iter.MoveNext())
                            {
                                string temp = bufferMap[iter.Current];
                                buffer.Append(temp);
                                string expr = exprMap[temp.ToUpper()];
                                if (string.ReferenceEquals(expr, null))
                                {
                                    expr = "";
                                }
                                buffer.Append(expr + "\r\n");
                            }
                        }
                        else if (simply)
                        {
                            if (!isXML)
                            {
                                foreach (TAlias alias in aliases)
                                {

                                    buffer.Append(alias.alias + " depends on: ");

                                    IList<string> collections = new List<string>();

                                    if (dependMap.ContainsKey(alias.alias))
                                    {
                                        IList<TResultEntry> results = (IList<TResultEntry>)dependMap[alias.alias];
                                        foreach (TResultEntry result in results)
                                        {
                                            if (result.columnObject == null)
                                            {
                                                continue;
                                            }
                                            if (string.ReferenceEquals(result.columnObject.columnName, null))
                                            {
                                                continue;
                                            }

                                            string column = null;
                                            if (isColumnLevel && result.clause != ClauseType.select)
                                            {
                                                continue;
                                            }
                                            if (result.targetTable.FullName == null)
                                            {
                                                continue;
                                            }

                                            if ("*".Equals(result.targetColumn))
                                            {
                                                if (result.targetTable.FullName == null)
                                                {
                                                    continue;
                                                }
                                                column = removeQuote(result.targetTable.FullName.ToLower());
                                            }
                                            else
                                            {
                                                column = removeQuote((result.targetTable.FullName + "." + result.targetColumn).ToLower());
                                            }
                                            if (!collections.Contains(column))
                                            {
                                                collections.Add(column);
                                            }
                                        }
                                    }

                                    IList<string> list = new List<string>(collections);
                                    for (int i = 0; i < list.Count; i++)
                                    {
                                        if (i < collections.Count - 1)
                                        {
                                            buffer.Append(list[i] + ", ");
                                        }
                                        else
                                        {
                                            buffer.Append(list[i]);
                                        }
                                    }

                                    buffer.AppendLine();

                                }
                            }
                            else
                            {

                                foreach (TAlias alias in aliases)
                                {
                                    Element targetColumn = new Element("targetColumn");
                                    if (!alias.alias.Equals(alias.column))
                                    {
                                        targetColumn.Add(new XAttribute("alias", alias.alias));
                                    }
                                    targetColumn.Add(new XAttribute("coordinate", alias.location.X + "," + alias.location.Y));
                                    targetColumn.Add(new XAttribute("name", alias.column));

                                    columnImpactResult.Add(targetColumn);

                                    LinkedHashMap<string, TSourceColumn> collections = new LinkedHashMap<string, TSourceColumn>();

                                    if (dependMap.ContainsKey(alias.alias))
                                    {
                                        IList<TResultEntry> results = (IList<TResultEntry>)dependMap[alias.alias];
                                        foreach (TResultEntry result in results)
                                        {
                                            if (result.columnObject == null)
                                            {
                                                continue;
                                            }
                                            if (string.ReferenceEquals(result.columnObject.columnName, null))
                                            {
                                                continue;
                                            }

                                            if (isColumnLevel && result.clause != ClauseType.select)
                                            {
                                                continue;
                                            }
                                            if (result.targetTable.FullName == null)
                                            {
                                                continue;
                                            }

                                            string key = null;
                                            if ("*".Equals(result.targetColumn))
                                            {
                                                key = removeQuote(result.targetTable.FullName.ToLower());
                                            }
                                            else
                                            {
                                                key = removeQuote((result.targetTable.FullName.ToLower() + "." + result.targetColumn).ToLower());
                                            }

                                            TSourceColumn sourceColumn = null;
                                            if (collections.ContainsKey(key))
                                            {
                                                sourceColumn = (TSourceColumn)collections[key];
                                                if (!sourceColumn.clauses.Contains(result.clause))
                                                {
                                                    sourceColumn.clauses.Add(result.clause);
                                                }

                                                if (result.location != null)
                                                {
                                                    if (!sourceColumn.locations.ContainsKey(result.clause))
                                                    {
                                                        sourceColumn.locations[result.clause] = new List<Tuple<long, long>>();
                                                    }
                                                    IList<Tuple<long, long>> ys = sourceColumn.locations[result.clause];
                                                    if (!ys.Contains(result.location))
                                                    {
                                                        ys.Add(result.location);
                                                    }
                                                }

                                            }
                                            else
                                            {
                                                sourceColumn = new TSourceColumn(this);
                                                collections[key] = sourceColumn;
                                                sourceColumn.tableOwner = removeQuote(result.targetTable.TableName.SchemaString);
                                                sourceColumn.tableName = removeQuote(result.targetTable.Name);
                                                if (!"*".Equals(result.targetColumn))
                                                {
                                                    sourceColumn.name = result.targetColumn;
                                                }
                                                if (!sourceColumn.clauses.Contains(result.clause))
                                                {
                                                    sourceColumn.clauses.Add(result.clause);
                                                }
                                                if (result.location != null)
                                                {
                                                    if (!sourceColumn.locations.ContainsKey(result.clause))
                                                    {
                                                        sourceColumn.locations[result.clause] = new List<Tuple<long, long>>();
                                                    }
                                                    IList<Tuple<long, long>> ys = sourceColumn.locations[result.clause];
                                                    if (!ys.Contains(result.location))
                                                    {
                                                        ys.Add(result.location);
                                                    }
                                                }
                                            }
                                        }

                                        IEnumerator<string> iter = collections.Keys.GetEnumerator();

                                        while (iter.MoveNext())
                                        {
                                            TSourceColumn sourceColumn = (TSourceColumn)collections[iter.Current];
                                            if (sourceColumn.clauses.Count > 0)
                                            {
                                                for (int j = 0; j < sourceColumn.clauses.Count; j++)
                                                {
                                                    ClauseType clause = sourceColumn.clauses[j];
                                                    Element element = new Element("sourceColumn");
                                                    {
                                                        StringBuilder buffer = new StringBuilder();
                                                        switch (clause)
                                                        {
                                                            case demos.columnImpact.ColumnImpact.ClauseType.@where:
                                                                buffer.Append("where");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.connectby:
                                                                buffer.Append("connect by");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.startwith:
                                                                buffer.Append("start with");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.orderby:
                                                                buffer.Append("order by");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.join:
                                                                buffer.Append("join");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.select:
                                                                buffer.Append("select");
                                                                break;
                                                            case demos.columnImpact.ColumnImpact.ClauseType.groupby:
                                                                buffer.Append("group by");
                                                                break;
                                                        }
                                                        if (buffer.ToString().Length != 0)
                                                        {
                                                            element.Add(new XAttribute("clause", buffer.ToString()));
                                                        }
                                                    }
                                                    {
                                                        StringBuilder buffer = new StringBuilder();
                                                        buildLocationString(sourceColumn, clause, buffer);
                                                        if (buffer.ToString().Length != 0)
                                                        {
                                                            element.Add(new XAttribute("coordinate", buffer.ToString()));
                                                        }
                                                    }
                                                    if (!string.ReferenceEquals(sourceColumn.name, null))
                                                    {
                                                        element.Add(new XAttribute("name", sourceColumn.name));
                                                    }
                                                    if (!string.ReferenceEquals(sourceColumn.tableName, null))
                                                    {
                                                        element.Add(new XAttribute("tableName", sourceColumn.tableName));
                                                    }
                                                    if (!string.ReferenceEquals(sourceColumn.tableOwner, null))
                                                    {
                                                        element.Add(new XAttribute("tableOwner", sourceColumn.tableOwner));
                                                    }
                                                    targetColumn.Add(element);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (doc != null)
                {
                    try
                    {
                        StringBuilder xmlBuffer = new StringBuilder();

                        using (StringWriter writer = new Utf8StringWriter(xmlBuffer))
                        {
                            doc.Save(writer, SaveOptions.None);
                        }

                        buffer.Append(xmlBuffer.ToString().Trim());
                    }
                    catch (IOException e)
                    {
                        Console.WriteLine(e.ToString());
                        Console.Write(e.StackTrace);
                    }
                }
            }
            return true;
        }

        internal class Utf8StringWriter : StringWriter
        {
            public Utf8StringWriter(StringBuilder sb) : base(sb) { }

            public override Encoding Encoding { get { return Encoding.UTF8; } }
        }

        private void checkStmtTables(TSelectSqlStatement stmt, IList<TTable> tableList)
        {
            if (stmt.SetOperator != TSelectSqlStatement.setOperator_none)
            {
                checkStmtTables(stmt.LeftStmt, tableList);
                checkStmtTables(stmt.RightStmt, tableList);
            }
            else
            {
                if (stmt.tables != null)
                {
                    for (int i = 0; i < stmt.tables.size(); i++)
                    {
                        TTable table = stmt.tables.getTable(i);
                        if (!tableList.Contains(table))
                        {
                            tableList.Add(table);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Albert
        /// </summary>
        /// <param name="myCTEsMap"></param>
        /// <param name="CTEcolumns"></param>
        public void getCTEColumns(LinkedHashMap<string, TCustomSqlStatement> myCTEsMap, ref Dictionary<string, List<string>> CTEcolumns)
        {
            var lls = myCTEsMap.LLs;
            if (lls != null)
            {
                foreach (var myitem in lls.List)
                {
                    var elmAt = myitem.Item1;
                    if (elmAt != null)
                    {
                        var columns = elmAt.ResultColumnList;
                        string tableName = myitem.Item2.ToString();
                        List<string> myCTEColumns = new List<string>();
                        if (columns != null)
                        {
                            for (int i = 0; i < columns.size(); i++)
                            {
                                TResultColumn column = columns.getResultColumn(i);

                                if (column.AliasClause != null)
                                {
                                    myCTEColumns.Add(column.ColumnAlias);
                                }
                                else
                                {
                                    myCTEColumns.Add(column.ColumnNameOnly);
                                }
                            }
                            CTEcolumns.Add(tableName, myCTEColumns);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Albert
        /// </summary>
        /// <param name="expression"></param>
        /// <param name="CTEcolumns"></param>
        private void getCTEColumns(TCTE expression, ref Dictionary<string, List<string>> CTEcolumns)
        {
            //TResultColumnList columns = expression.Subquery.ResultColumnList;
            var columns = expression.PreparableStmt.ResultColumnList;
            var colList = expression.ColumnList;
            string tableName = expression.TableName.String;
            List<string> myCTEColumns = new List<string>();
            if (columns != null)
            {
                for (int i = 0; i < columns.size(); i++)
                {
                    TResultColumn column = columns.getResultColumn(i);

                    if (column.AliasClause != null)
                    {
                        myCTEColumns.Add(column.ColumnAlias);
                    }
                    else
                    {
                        myCTEColumns.Add(column.ColumnNameOnly);
                    }
                }
                CTEcolumns.Add(tableName, myCTEColumns);
            }
            else if (colList != null)
            {
                myCTEColumns = colList.String.Split(',').ToList();
                CTEcolumns.Add(tableName, myCTEColumns);
            }
        }

        private void getCTEColumns(TCTE expression, ref Dictionary<string, string> CTEcolumns)
        {
            //TResultColumnList columns = expression.Subquery.ResultColumnList;
            var columns = expression.PreparableStmt.ResultColumnList;
            var colList = expression.ColumnList;
            string tableName = expression.TableName.String;
            List<string> myCTEColumns_0 = new List<string>();
            if (columns != null)
            {
                for (int i = 0; i < columns.size(); i++)
                {
                    TResultColumn column = columns.getResultColumn(i);

                    if (column.AliasClause != null)
                    {
                        myCTEColumns_0.Add(column.ColumnAlias);
                    }
                    else
                    {
                        myCTEColumns_0.Add(column.ColumnNameOnly);
                    }
                }
                //CTEcolumns.Add(tableName, myCTEColumns_0);
            }
            else if (colList != null)
            {
                myCTEColumns_0 = colList.String.Split(',').ToList();
                //CTEcolumns.Add(tableName, myCTEColumns_0);
            }

            if (myCTEColumns_0 != null)
            {
                string myCTEColumns_0_array = String.Join(",", myCTEColumns_0.ToArray());
                CTEcolumns.Add(tableName, myCTEColumns_0_array);
            }
        }
        private void initCTEMap(TCustomSqlStatement select, ref Dictionary<string, List<string>> CTEcolumns)
        {
            if (select.Statements != null && select.Statements.size() > 0)
            {
                int cntSTMS = select.Statements.size();
                for (int i = 0; i < cntSTMS; i++)
                {
                    //initCTEMap(select.Statements.get(i));
                    //initCTEMap(select.Statements.get(i), ref CTEcolumns);

                    var myCTEList = select.Statements[0].CteList;
                    if (myCTEList != null && myCTEList.size() > 0)
                    {
                        int cntCTEs = myCTEList.size();
                        for (int i1 = 0; i1 < cntCTEs; i1++)
                        {
                            TCTE expression = myCTEList.getCTE(i1);
                            string tblName = removeQuote(expression.TableName.ToString());
                            cteMap[removeQuote(expression.TableName.ToString())] = expression.Subquery;
                            getCTEColumns(expression, ref CTEcolumns);
                        }
                    }
                }
            }
            if (select.CteList != null && select.CteList.size() > 0)
            {
                int cntCTEs = select.CteList.size();
                for (int i = 0; i < cntCTEs; i++)
                {
                    TCTE expression = select.CteList.getCTE(i);
                    string tblName = removeQuote(expression.TableName.ToString());
                    cteMap[removeQuote(expression.TableName.ToString())] = expression.Subquery;

                    //findColumnsFromClauses(expression.Subquery, 1); //test
                    //TResultColumn TRC = getResultColumnByAlias(expression.Subquery, removeQuote(expression.TableName.ToString()));
                    /*Dictionary<string, List<string>>*/
                    //CTEcolumns = new Dictionary<string, List<string>>();
                    getCTEColumns(expression, ref CTEcolumns);
                }
            }
        }

        private void initCTEMap(TCustomSqlStatement select, ref Dictionary<string, List<string>> CTEcolumns, ref string endquery_nonCTE_Cols)
        {
            DSGTOOLS_QUERY_CTE_SQL_RAW tmpRAW = null;
            DSGTOOLS_QUERY_CTE_SQL_OUTPUT tmpOutput = null;

            if (select.Statements != null && select.Statements.size() > 0)
            {
                int cntSTMS = select.Statements.size();
                for (int i = 0; i < cntSTMS; i++)
                {
                    //initCTEMap(select.Statements.get(i));
                    //initCTEMap(select.Statements.get(i), ref CTEcolumns);

                    var myCTEList = select.Statements[i].CteList;
                    if (myCTEList != null && myCTEList.size() > 0)
                    {
                        int cntCTEs = myCTEList.size();
                        for (int i1 = 0; i1 < cntCTEs; i1++)
                        {
                            tmpRAW = new DSGTOOLS_QUERY_CTE_SQL_RAW();
                            //tmpOutput = new DSGTOOLS_QUERY_CTE_SQL_OUTPUT();

                            TCTE expression = myCTEList.getCTE(i1);
                            string tblName = removeQuote(expression.TableName.ToString());
                            cteMap[removeQuote(expression.TableName.ToString())] = expression.Subquery;
                            getCTEColumns(expression, ref CTEcolumns);

                            tmpRAW.QCSR_ID = i; //dummy
                            tmpRAW.QCSR_QSR_ID = i + 1; //dummy
                            tmpRAW.QCSR_NAME = tblName;
                            tmpRAW.QCSR_SQL = expression.Subquery.String.TrimStart('(').TrimEnd(')').Trim();
                            lst_DSGTOOLS_QUERY_CTE_SQL_RAW.Add(tmpRAW);

                            for (int j1 = 0; j1 < CTEcolumns.Count; j1++)
                            {
                                tmpOutput = new DSGTOOLS_QUERY_CTE_SQL_OUTPUT();

                                //string key = CTEcolumns.Keys.ElementAt(j1);
                                var values = CTEcolumns.Values.ElementAt(j1);
                                //var tmpQCSO_CSR_ID = new List<int>();
                                for (int i2 = 0; i2 < values.Count; i2++)
                                {
                                    tmpOutput.QCSO_CSR_ID.Add(tmpRAW.QCSR_QSR_ID);
                                }
                                tmpOutput.QCSO_NAME = values;
                            }
                            lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT.Add(tmpOutput);
                        }
                    }
                }
            }
            if (select.CteList != null && select.CteList.size() > 0)
            {
                int cntCTEs = select.CteList.size();
                for (int i = 0; i < cntCTEs; i++)
                {
                    tmpRAW = new DSGTOOLS_QUERY_CTE_SQL_RAW();                   

                    TCTE expression = select.CteList.getCTE(i);
                    string tblName = removeQuote(expression.TableName.ToString());
                    cteMap[removeQuote(expression.TableName.ToString())] = expression.Subquery;

                    //findColumnsFromClauses(expression.Subquery, 1); //test
                    //TResultColumn TRC = getResultColumnByAlias(expression.Subquery, removeQuote(expression.TableName.ToString()));
                    /*Dictionary<string, List<string>>*/
                    //CTEcolumns = new Dictionary<string, List<string>>();
                    getCTEColumns(expression, ref CTEcolumns);

                    tmpRAW.QCSR_ID = i; //dummy
                    tmpRAW.QCSR_QSR_ID = i + 1; //dummy
                    tmpRAW.QCSR_NAME = tblName;
                    tmpRAW.QCSR_SQL = expression.Subquery.String.TrimStart('(').TrimEnd(')').Trim();
                    lst_DSGTOOLS_QUERY_CTE_SQL_RAW.Add(tmpRAW);


                    for (int i1 = 0; i1 < CTEcolumns.Count; i1++)
                    {
                        tmpOutput = new DSGTOOLS_QUERY_CTE_SQL_OUTPUT();

                        //string key = CTEcolumns.Keys.ElementAt(i1);
                        var values = CTEcolumns.Values.ElementAt(i1);
                        //var tmpQCSO_CSR_ID = new List<int>();
                        for (int i2 = 0; i2 < values.Count; i2++)
                        {
                            tmpOutput.QCSO_CSR_ID.Add(tmpRAW.QCSR_QSR_ID);
                        }
                        tmpOutput.QCSO_NAME = values;
                    }
                    lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT.Add(tmpOutput);
                }
            }

            //find endquery_nonCTE_Cols from "TCustomSqlStatement select"
            //if (select.ResultColumnList != null)
            //{
            //    endquery_nonCTE_Cols = select.ResultColumnList.String; //this way only get column names. We need whole query after ending CTE

                string sqltext = select.String.Replace("\r\n", " ").Trim(); //Convert multiple line text into single line for calculate EndQueryNonCTESQL using ColumnNo in gudusoft
                joinRelationAnalyze.CTERelatedAnalyze cteAnalyze = new joinRelationAnalyze.CTERelatedAnalyze(sqltext, EDbVendor.dbvdb2);
                endquery_nonCTE_Cols = cteAnalyze.getEndQueryNonCTESQL(sqltext);
            //}
            //else
            //{
            //    //endquery_nonCTE_Cols = "End query non-CTE columns not found";
            //}

            #region append endquery_nonCTE_Cols to lst_DSGTOOLS_QUERY_CTE_SQL_RAW
            tmpRAW = new DSGTOOLS_QUERY_CTE_SQL_RAW();
            tmpRAW.QCSR_ID = lst_DSGTOOLS_QUERY_CTE_SQL_RAW.Count;
            tmpRAW.QCSR_QSR_ID = tmpRAW.QCSR_ID + 1;
            tmpRAW.QCSR_NAME = "end query non-CTE columns";
            if(!String.IsNullOrWhiteSpace(endquery_nonCTE_Cols))
                tmpRAW.QCSR_SQL = endquery_nonCTE_Cols;
            lst_DSGTOOLS_QUERY_CTE_SQL_RAW.Add(tmpRAW);
            #endregion append endquery_nonCTE_Cols to lst_DSGTOOLS_QUERY_CTE_SQL_RAW

            #region append endquery_nonCTE_Cols to lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT
            tmpOutput = new DSGTOOLS_QUERY_CTE_SQL_OUTPUT();
            if (!String.IsNullOrWhiteSpace(endquery_nonCTE_Cols))
            {
                string[] sept = new string[] { "," };
                var values= endquery_nonCTE_Cols.Split(sept, StringSplitOptions.RemoveEmptyEntries).ToList();
                for (int i2 = 0; i2 < values.Count; i2++)
                {
                    tmpOutput.QCSO_CSR_ID.Add(tmpRAW.QCSR_QSR_ID);
                }
                tmpOutput.QCSO_NAME = values.Select(s=>s.Trim()).ToList();
            }
            lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT.Add(tmpOutput);
            #endregion append endquery_nonCTE_Cols to lst_DSGTOOLS_QUERY_CTE_SQL_OUTPUT
        }

        private void initCTEMap(TCustomSqlStatement select)
        {
            if (select.Statements != null && select.Statements.size() > 0)
            {
                for (int i = 0; i < select.Statements.size(); i++)
                {
                    initCTEMap(select.Statements.get(i));
                }
            }
            if (select.CteList != null && select.CteList.size() > 0)
            {
                for (int i = 0; i < select.CteList.size(); i++)
                {
                    TCTE expression = select.CteList.getCTE(i);
                    cteMap[removeQuote(expression.TableName.ToString())] = expression.Subquery;
                }
            }
        }

        private void getTableNames(IList<string> tableNames, TTable table)
        {
            if (table.Subquery != null)
            {
                for (int i = 0; i < table.Subquery.tables.size(); i++)
                {
                    getTableNames(tableNames, table.Subquery.tables.getTable(i));
                }
            }
            else
            {
                tableNames.Add(removeQuote(table.FullName));
            }
        }

        private void buildLocationString(TSourceColumn sourceColumn, ClauseType clauseType, StringBuilder locationBuffer)
        {
            IList<Tuple<long, long>> ys = sourceColumn.locations[clauseType];
            if (ys != null)
            {
                for (int z = 0; z < ys.Count; z++)
                {
                    locationBuffer.Append(ys[z].Item1 + "," + ys[z].Item2);
                    if (z < ys.Count - 1)
                    {
                        locationBuffer.Append(";");
                    }
                }
            }
        }

        private void impactSqlFromStatement(TCustomSqlStatement select, int baseLevel)
        {
            if (select is TSelectSqlStatement)
            {
                TSelectSqlStatement stmt = (TSelectSqlStatement)select;
                if (stmt.SetOperator != TSelectSqlStatement.setOperator_none)
                {
                    impactSqlFromStatement(stmt.LeftStmt, baseLevel);
                    impactSqlFromStatement(stmt.RightStmt, baseLevel);
                }
                else
                {
                    for (int i = 0; i < select.ResultColumnList.size(); i++)
                    {
                        linkFieldToTables(null, select.ResultColumnList.getResultColumn(i), select, baseLevel);
                    }
                }
            }
            else if (select is TInsertSqlStatement && ((TInsertSqlStatement)select).SubQuery != null)
            {
                impactSqlFromStatement(((TInsertSqlStatement)select).SubQuery, baseLevel);
            }
            else if (select is TCreateViewSqlStatement)
            {
                viewName = ((TCreateViewSqlStatement)select).ViewName.ToString();
                impactSqlFromStatement(((TCreateViewSqlStatement)select).Subquery, baseLevel);
            }
            else
            {
                if (select.ResultColumnList != null)
                {
                    for (int i = 0; i < select.ResultColumnList.size(); i++)
                    {
                        linkFieldToTables(null, select.ResultColumnList.getResultColumn(i), select, baseLevel);
                    }
                }
            }
        }

        private void impactSqlFromStatement(TCustomSqlStatement select)
        {
            if (select is TSelectSqlStatement)
            {
                TSelectSqlStatement stmt = (TSelectSqlStatement)select;
                if (stmt.SetOperator != TSelectSqlStatement.setOperator_none)
                {
                    impactSqlFromStatement(stmt.LeftStmt);
                    impactSqlFromStatement(stmt.RightStmt);
                }
                else
                {
                    for (int i = 0; i < select.ResultColumnList.size(); i++)
                    {
                        linkFieldToTables(null, select.ResultColumnList.getResultColumn(i), select, 0);
                    }
                }
            }
            else if (select is TInsertSqlStatement && ((TInsertSqlStatement)select).SubQuery != null)
            {
                impactSqlFromStatement(((TInsertSqlStatement)select).SubQuery);
            }
            else if (select is TCreateViewSqlStatement)
            {
                viewName = ((TCreateViewSqlStatement)select).ViewName.ToString();
                impactSqlFromStatement(((TCreateViewSqlStatement)select).Subquery);
            }
            else if (select.ResultColumnList != null)
            {
                for (int i = 0; i < select.ResultColumnList.size(); i++)
                {
                    linkFieldToTables(null, select.ResultColumnList.getResultColumn(i), select, 0);
                }
            }
            else if (select.Statements != null)
            {
                for (int i = 0; i < select.Statements.size(); i++)
                {
                    impactSqlFromStatement(select.Statements.get(i));
                }
            }
        }

        private bool isPseudocolumn(string column)
        {
            if (string.ReferenceEquals(column, null))
            {
                return false;
            }
            if ("rownum".Equals(column.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            else if ("rowid".Equals(column.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            else if ("nextval".Equals(column.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            else if ("sysdate".Equals(column.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            return false;
        }

        private bool linkFieldToTables(TAlias parentAlias, TResultColumn field, TCustomSqlStatement select, int level)
        {
            if (level == 0)
            {
                accessMap.Clear();
            }
            bool ret = false;
            // all items in select list was represented by a TLzField Objects
            switch (field.Expr.ExpressionType)
            {
                case EExpressionType.simple_object_name_t:
                    TColumn column = attrToColumn(field.Expr, select, ClauseType.select, parentAlias);
                    bool isPseudocolumn = select.dbvendor == EDbVendor.dbvoracle && this.isPseudocolumn(column.columnName);
                    if (level == 0 || parentAlias != null)
                    {
                        TAlias columnAlias = null;
                        if (parentAlias != null)
                        {
                            columnAlias = parentAlias;
                        }
                        else
                        {
                            columnAlias = new TAlias(this);
                            columnAlias.column = removeQuote(field.ToString());
                            columnAlias.columnExpr = field.Expr;
                            columnAlias.alias = removeQuote(field.ToString());
                            columnAlias.location = new Point((int)field.startToken.lineNo, (int)field.startToken.columnNo);
                            if (field.AliasClause != null)
                            {
                                columnAlias.alias = removeQuote(field.AliasClause.ToString());
                                columnAlias.column = removeQuote(field.ToString());
                                columnAlias.columnExpr = field.Expr;
                                TSourceToken startToken = field.AliasClause.AliasName.startToken;
                                columnAlias.location = new Point((int)startToken.lineNo, (int)startToken.columnNo);
                            }
                            aliases.Add(columnAlias);
                        }
                        currentSource = columnAlias.alias;
                        if (!dependMap.ContainsKey(currentSource))
                        {
                            dependMap[currentSource] = new List<TResultEntry>();
                        }

                        if (!simply && parentAlias == null)
                        {
                            if (!columnAlias.alias.Equals(column.OrigName, StringComparison.OrdinalIgnoreCase))
                            {
                                buffer.Append("\r\nSearch " + columnAlias.alias + (level == 0 ? (" <<column_" + (++columnNumber) + ">>") : "") + "\r\n");
                                buffer.Append("--> " + column.OrigName + (!isPseudocolumn && column.tableNames.Count > 1 ? (" <<GUESS>>") : "") + "\r\n");
                            }
                            else
                            {
                                buffer.Append("\r\nSearch " + column.OrigName + (level == 0 ? (" <<column_" + (++columnNumber) + ">>") : "") + (!isPseudocolumn && column.tableNames.Count > 1 ? (" <<GUESS>>") : "") + "\r\n");
                                level -= 1;
                            }
                        }

                    }
                    if (isPseudocolumn)
                    {
                        break;
                    }
                    ret = findColumnInTables(column, select, level + 1, null, null);
                    findColumnsFromClauses(select, level + 2);
                    break;
                case EExpressionType.subquery_t:
                    TAlias alias1 = new TAlias(this);
                    alias1.column = removeQuote(field.ToString());
                    alias1.columnExpr = field.Expr;
                    alias1.alias = removeQuote(field.ToString());
                    alias1.location = new Point((int)field.startToken.lineNo, (int)field.startToken.columnNo);
                    if (field.AliasClause != null)
                    {
                        alias1.alias = removeQuote(field.AliasClause.ToString());
                        TSourceToken startToken = field.AliasClause.AliasName.startToken;
                        alias1.column = removeQuote(field.ToString());
                        alias1.columnExpr = field.Expr;
                        alias1.location = new Point((int)startToken.lineNo, (int)startToken.columnNo);
                    }

                    if (level == 0)
                    {
                        aliases.Add(alias1);
                        if (!simply)
                        {
                            buffer.Append("\r\nSearch " + alias1.alias + (level == 0 ? (" <<column_" + (++columnNumber) + ">>") : "") + "\r\n");
                            // buffer.append( "--> "
                            // + field.getExpr( ).getSubQuery( )
                            // + "\r\n" );
                        }
                    }
                    TSelectSqlStatement stmt = (TSelectSqlStatement)field.Expr.SubQuery;
                    IList<TSelectSqlStatement> stmtList = new List<TSelectSqlStatement>();
                    getSelectSqlStatements(stmt, stmtList);
                    for (int i = 0; i < stmtList.Count; i++)
                    {
                        linkFieldToTables(alias1, stmtList[i].ResultColumnList.getResultColumn(0), stmtList[i], level - 1 < 0 ? 0 : level - 1);
                    }
                    break;
                default:
                    TAlias alias = parentAlias;
                    if (level == 0)
                    {
                        alias = new TAlias(this);

                        if (select is TUpdateSqlStatement)
                        {
                            TExpression expression = field.Expr.LeftOperand;
                            alias.column = removeQuote(expression.ToString());
                            alias.columnExpr = expression;
                            alias.alias = alias.column;
                            alias.location = new Point((int)expression.startToken.lineNo, (int)expression.startToken.columnNo);
                        }
                        else
                        {
                            alias.column = removeQuote(field.ToString());
                            alias.columnExpr = field.Expr;
                            alias.alias = alias.column;
                            alias.location = new Point((int)field.startToken.lineNo, (int)field.startToken.columnNo);

                        }
                        if (alias != null && parentAlias == null)
                        {
                            if (field.AliasClause != null)
                            {
                                alias.alias = removeQuote(field.AliasClause.ToString());
                                alias.column = removeQuote(field.ToString());
                                alias.columnExpr = field.Expr;
                                TSourceToken startToken = field.AliasClause.AliasName.startToken;
                                alias.location = new Point((int)startToken.lineNo, (int)startToken.columnNo);
                            }
                            aliases.Add(alias);
                            if (!simply)
                            {
                                buffer.Append("\r\n" + "Search " + alias.alias + (level == 0 ? (" <<column_" + (++columnNumber) + ">>") : "") + "\r\n");
                            }

                            currentSource = alias.alias;
                            if (!dependMap.ContainsKey(currentSource))
                            {
                                dependMap[currentSource] = new List<TResultEntry>();
                            }
                        }
                    }

                    IList<TColumn> columns = exprToColumn(field.Expr, select, level, true, ClauseType.select, alias);
                    if (columns.Count == 0 && traceView)
                    {
                        TColumn nullColumn = new TColumn(this);
                        nullColumn.expression = field.Expr.ToString();
                        nullColumn.viewName = this.viewName;
                        TTableList tables = select.tables;
                        for (int i = 0; i < tables.size(); i++)
                        {
                            TTable lztable = tables.getTable(i);
                            Table table = TLzTaleToTable(lztable);
                            if (!nullColumn.tableNames.Contains(table.tableName))
                            {
                                nullColumn.tableNames.Add(table.tableName);
                                if (!nullColumn.tableFullNames.Contains(lztable.FullName))
                                {
                                    nullColumn.tableFullNames.Add(lztable.FullName);
                                }
                            }
                        }
                        columns.Add(nullColumn);
                    }
                    if (select is TUpdateSqlStatement)
                    {
                        while (columns.Count > 1)
                        {
                            columns.RemoveAt(columns.Count - 1);
                        }
                    }
                    if (!simply)
                    {
                        foreach (TColumn column1 in columns)
                        {
                            if (column1 == null)
                            {
                                continue;
                            }
                            if (level == 0)
                            {
                                buffer.Append(buildString(" ", level) + "--> " + column1.OrigName + "\r\n");
                            }
                        }
                    }

                    foreach (TColumn column1 in columns)
                    {
                        if (column1 == null)
                        {
                            continue;
                        }

                        if (level == 0)
                        {
                            if (!simply)
                            {
                                buffer.Append("\r\n" + "Search " + column1.OrigName + "\r\n");
                            }
                        }
                        if (!(select is TUpdateSqlStatement))
                        {
                            findColumnInTables(column1, select, level + 1, null, null);
                        }
                        findColumnsFromClauses(select, level + 2);
                    }

                    if (field.Expr.ExpressionType == EExpressionType.function_t)
                    {
                        TFunctionCall func = (TFunctionCall)field.Expr.FunctionCall;
                        // buffer.AppendLine("function name {0}",
                        // func.funcname.AsText);
                        if (func.FunctionName.ToString().Equals("count", StringComparison.OrdinalIgnoreCase) || func.FunctionName.ToString().Equals("sum", StringComparison.OrdinalIgnoreCase) || func.FunctionName.ToString().Equals("row_number", StringComparison.OrdinalIgnoreCase))
                        {
                            if (!simply)
                            {
                                buffer.Append(buildString(" ", level + 1) + "--> aggregate function " + func.ToString() + "\r\n");
                                for (int i = 0; i < select.tables.size(); i++)
                                {
                                    if (select.tables.getTable(i).Subquery == null)
                                    {
                                        buffer.Append(buildString(" ", level + 1) + "--> table " + removeQuote(select.tables.getTable(i).FullNameWithAliasString) + "\r\n");
                                    }
                                    else
                                    {
                                        buffer.Append(buildString(" ", level + 1) + "--> table " + select.tables.getTable(i).ToString() + (select.tables.getTable(i).AliasClause != null ? (" " + select.tables.getTable(i).AliasClause.ToString()) : "") + "\r\n");
                                    }
                                }
                            }
                            // check column in function arguments
                            int argCount = 0;
                            if (func.Args != null)
                            {
                                for (int k = 0; k < func.Args.size(); k++)
                                {
                                    TExpression expr = func.Args.getExpression(k);
                                    if (expr.ToString().Trim().Equals("*"))
                                    {
                                        continue;
                                    }
                                    IList<TColumn> columns1 = exprToColumn(expr, select, level + 1, ClauseType.select, parentAlias);
                                    foreach (TColumn column1 in columns1)
                                    {
                                        findColumnInTables(column1, select, level + 1, null, null);
                                        findColumnsFromClauses(select, level + 2);
                                    }
                                    argCount++;
                                }
                            }

                            if (argCount == 0 && !"ROW_NUMBER".Equals(func.FunctionName.ToString(), StringComparison.OrdinalIgnoreCase))
                            {

                                Tuple<long, long> point = new Tuple<long, long>(func.endToken.lineNo, func.endToken.columnNo);
                                if (func.Args != null && func.Args.size() > 0)
                                {
                                    for (int k = 0; k < func.Args.size(); k++)
                                    {
                                        TExpression expr = func.Args.getExpression(k);
                                        if (expr.ToString().Trim().Equals("*"))
                                        {
                                            point = new Tuple<long, long>(expr.startToken.lineNo, expr.startToken.columnNo);
                                            break;
                                        }
                                    }
                                }
                                if (dependMap.ContainsKey(currentSource))
                                {

                                    if (currentClauseMap.ContainsKey(select))
                                    {
                                        dependMap[currentSource].Add(new TResultEntry(this, select.tables.getTable(0), viewName, "*", (ClauseType)currentClauseMap[select], point));
                                    }
                                    else if (select is TSelectSqlStatement)
                                    {
                                        dependMap[currentSource].Add(new TResultEntry(this, select.tables.getTable(0), viewName, "*", ClauseType.select, point));
                                    }
                                    else
                                    {
                                        dependMap[currentSource].Add(new TResultEntry(this, select.tables.getTable(0), viewName, "*", ClauseType.undefine, point));
                                    }
                                }
                            }

                            if (func.AnalyticFunction != null)
                            {
                                TParseTreeNodeList list = func.AnalyticFunction.PartitionBy_ExprList;
                                findColumnsFromList(select, level + 1, list, ClauseType.select);

                                if (func.AnalyticFunction.OrderBy != null)
                                {
                                    list = func.AnalyticFunction.OrderBy.Items;
                                    findColumnsFromList(select, level + 1, list, ClauseType.select);
                                }
                            }

                            findColumnsFromClauses(select, level + 2);

                        }
                    }
                    break;
            }

            return ret;
        }

        private void getSelectSqlStatements(TSelectSqlStatement select, IList<TSelectSqlStatement> stmtList)
        {
            if (select.SetOperator != TSelectSqlStatement.setOperator_none)
            {
                getSelectSqlStatements(select.LeftStmt, stmtList);
                getSelectSqlStatements(select.RightStmt, stmtList);
            }
            else
            {
                stmtList.Add(select);
            }
        }

        private Table TLzTaleToTable(TTable lztable)
        {
            Table table = new Table(this);
            if (lztable.Subquery == null && lztable.TableName != null)
            {
                table.tableName = removeQuote(getTableName(lztable));
                if (lztable.TableName.ToString().IndexOf(".", StringComparison.Ordinal) > 0)
                {
                    table.prefixName = removeQuote(lztable.TableName.ToString().Substring(0, lztable.FullName.IndexOf('.')));
                }
            }

            if (lztable.AliasClause != null)
            {
                table.tableAlias = removeQuote(lztable.AliasClause.ToString());
            }
            return table;
        }

        private string removeQuote(string @string)
        {
            if (string.ReferenceEquals(@string, null))
            {
                return @string;
            }

            if (@string.IndexOf('.') != -1
                && @string.Length < 128)
            {
                IList<string> splits = parseNames(@string);
                StringBuilder buffer = new StringBuilder();
                for (int i = 0; i < splits.Count; i++)
                {
                    buffer.Append(splits[i]);
                    if (i < splits.Count - 1)
                    {
                        buffer.Append(".");
                    }
                }
                @string = buffer.ToString();
            }
            else
            {
                if (@string.StartsWith("\"", StringComparison.Ordinal) && @string.EndsWith("\"", StringComparison.Ordinal))
                {
                    return @string.Substring(1, (@string.Length - 1) - 1);
                }

                if (@string.StartsWith("[", StringComparison.Ordinal) && @string.EndsWith("]", StringComparison.Ordinal))
                {
                    return @string.Substring(1, (@string.Length - 1) - 1);
                }
            }
            return @string;
        }

        public static IList<string> parseNames(string nameString)
        {
            String name = nameString.Trim();
            List<String> names = new List<String>();
            string[] splits = nameString.ToUpper().Split(new char[] { '.' });
            if ((name.StartsWith("\"") && name.EndsWith("\""))
                    || (name.StartsWith("[") && name.EndsWith("]")))
            {
                for (int i = 0; i < splits.Length; i++)
                {
                    string split = splits[i].Trim();
                    if (split.StartsWith("[", StringComparison.Ordinal) && !split.EndsWith("]", StringComparison.Ordinal))
                    {
                        StringBuilder buffer = new StringBuilder();
                        buffer.Append(splits[i]);
                        while (!(split = splits[++i].Trim()).EndsWith("]", StringComparison.Ordinal))
                        {
                            buffer.Append(".");
                            buffer.Append(splits[i]);
                        }

                        buffer.Append(".");
                        buffer.Append(splits[i]);

                        names.Add(buffer.ToString());
                        continue;
                    }
                    if (split.StartsWith("\"", StringComparison.Ordinal) && !split.EndsWith("\"", StringComparison.Ordinal))
                    {
                        StringBuilder buffer = new StringBuilder();
                        buffer.Append(splits[i]);
                        while (!(split = splits[++i].Trim()).EndsWith("\"", StringComparison.Ordinal))
                        {
                            buffer.Append(".");
                            buffer.Append(splits[i]);
                        }

                        buffer.Append(".");
                        buffer.Append(splits[i]);

                        names.Add(buffer.ToString());
                        continue;
                    }
                    names.Add(splits[i]);
                }
            }
            else
            {
                names.AddRange(splits);
            }
            return names;
        }
    }

}]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[utils\MyUtil.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GetCTEs.utils
{
    public class MyUtil
    {
        public static string ConvertListString_To_String(string sept, List<string> lstStr)
        {
            string ret = string.Join(sept, lstStr);
            return ret;
        }

        public static string ConvertDictStringList_To_String(string sept, Dictionary<string, List<string>> dict_str_list)
        {
            string ret = "";
            var lststr = dict_str_list.Select(kvp => kvp.Value).ToList();
            foreach (var lst in lststr)
            {
                ret = string.Join(sept, lst);
            }

            return ret;
        }

        public static void Fillin_richTextBox(RichTextBox richTextBox1, Dictionary<string, List<string>> CTEcolumns_0)
        {
            richTextBox1.Clear();
            for (int i = 0; i < CTEcolumns_0.Count; i++)
            {
                //richTextBox1.SelectionLength = 0;
                //richTextBox1.SelectionStart = richTextBox1.TextLength;
                string key = CTEcolumns_0.Keys.ElementAt(i);
                var values = CTEcolumns_0.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);
                string display = key + ", columns (" + CTECols + ")";
                richTextBox1.AppendText(display);
                richTextBox1.AppendText(Environment.NewLine);
                richTextBox1.SelectAll();
                richTextBox1.SelectionFont = new Font("Verdana", 10, FontStyle.Bold);
                richTextBox1.SelectionColor = Color.Red;
            }
        }

        public static void Fillin_richTextBox(RichTextBox richTextBox1, Dictionary<string, List<string>> CTEcolumns_0, string errorMsg)
        {
            richTextBox1.Clear();
            if (CTEcolumns_0.Count == 0 || !string.IsNullOrEmpty(errorMsg))
            {
                richTextBox1.AppendText(errorMsg);
            }
            for (int i = 0; i < CTEcolumns_0.Count; i++)
            {
                //richTextBox1.SelectionLength = 0;
                //richTextBox1.SelectionStart = richTextBox1.TextLength;
                string key = CTEcolumns_0.Keys.ElementAt(i);
                var values = CTEcolumns_0.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);
                string display = key + ", columns (" + CTECols + ")";
                richTextBox1.AppendText(display);
                richTextBox1.AppendText(Environment.NewLine);
                richTextBox1.SelectAll();
                richTextBox1.SelectionFont = new Font("Verdana", 10, FontStyle.Bold);
                richTextBox1.SelectionColor = Color.Red;
            }
        }


        public static void Fillin_DataGridView(DataGridView dgv_CTECols, Dictionary<string, List<string>> CTEcolumns_0, params string[] ColName)
        {
            Clear_DataGridView(dgv_CTECols); //first clear contents

            dgv_CTECols.ColumnCount = ColName.Length;
            dgv_CTECols.ColumnHeadersVisible = true;
            // Set the column header style.
            DataGridViewCellStyle columnHeaderStyle = new DataGridViewCellStyle();
            columnHeaderStyle.BackColor = Color.Beige;
            columnHeaderStyle.Font = new Font("Verdana", 10, FontStyle.Bold);
            dgv_CTECols.ColumnHeadersDefaultCellStyle = columnHeaderStyle;
            //dgv_CTECols.Columns[0].Name = "CTE name";
            //dgv_CTECols.Columns[1].Name = "CTE columns";
            for (int i = 0; i < ColName.Length; i++)
            {
                dgv_CTECols.Columns[i].Name = ColName[i];
            }
            for (int i = 0; i < CTEcolumns_0.Count; i++)
            {
                string key = CTEcolumns_0.Keys.ElementAt(i);
                var values = CTEcolumns_0.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);
                DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                row.Cells[0].Value = key;
                row.Cells[1].Value = CTECols;
                dgv_CTECols.Rows.Add(row);
            }
            dgv_CTECols.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells; //auto size columns
        }

        #region not used
        //public static void Fillin_DataGridView(DataGridView dgv_CTECols, Dictionary<string, List<string>> CTEcolumns_0, string errorMsg, params string[] ColName)
        //{
        //    Clear_DataGridView(dgv_CTECols); //first clear contents

        //    dgv_CTECols.ColumnCount = ColName.Length;
        //    dgv_CTECols.ColumnHeadersVisible = true;
        //    // Set the column header style.
        //    DataGridViewCellStyle columnHeaderStyle = new DataGridViewCellStyle();
        //    columnHeaderStyle.BackColor = Color.Beige;
        //    columnHeaderStyle.Font = new Font("Verdana", 10, FontStyle.Bold);
        //    dgv_CTECols.ColumnHeadersDefaultCellStyle = columnHeaderStyle;
        //    //dgv_CTECols.Columns[0].Name = "CTE name";
        //    //dgv_CTECols.Columns[1].Name = "CTE columns";
        //    for (int i = 0; i < ColName.Length; i++)
        //    {
        //        dgv_CTECols.Columns[i].Name = ColName[i];
        //    }

        //    if(CTEcolumns_0.Count==0 || !string.IsNullOrEmpty(errorMsg))
        //    {
        //        dgv_CTECols.Rows[0].Cells[0].Value = errorMsg;
        //    }
        //    for (int i = 0; i < CTEcolumns_0.Count; i++)
        //    {
        //        string key = CTEcolumns_0.Keys.ElementAt(i);
        //        var values = CTEcolumns_0.Values.ElementAt(i);
        //        var CTECols = MyUtil.ConvertListString_To_String(",", values);
        //        DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
        //        row.Cells[0].Value = key;
        //        row.Cells[1].Value = CTECols;
        //        dgv_CTECols.Rows.Add(row);
        //    }
        //    dgv_CTECols.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells; //auto size columns
        //}

        //public static void Fillin_DataGridView(DataGridView dgv_CTECols, Dictionary<string, List<string>> CTEcolumns_0, List<string> endquery_nonCTEs = null, params string[] ColName)
        //{
        //    Clear_DataGridView(dgv_CTECols); //first clear contents

        //    dgv_CTECols.ColumnCount = ColName.Length;
        //    dgv_CTECols.ColumnHeadersVisible = true;
        //    // Set the column header style.
        //    DataGridViewCellStyle columnHeaderStyle = new DataGridViewCellStyle();
        //    columnHeaderStyle.BackColor = Color.Beige;
        //    columnHeaderStyle.Font = new Font("Verdana", 10, FontStyle.Bold);
        //    dgv_CTECols.ColumnHeadersDefaultCellStyle = columnHeaderStyle;
        //    //dgv_CTECols.Columns[0].Name = "CTE name";
        //    //dgv_CTECols.Columns[1].Name = "CTE columns";
        //    for (int i = 0; i < ColName.Length; i++)
        //    {
        //        dgv_CTECols.Columns[i].Name = ColName[i];
        //    }
        //    for (int i = 0; i < CTEcolumns_0.Count; i++)
        //    {
        //        string key = CTEcolumns_0.Keys.ElementAt(i);
        //        var values = CTEcolumns_0.Values.ElementAt(i);
        //        var CTECols = MyUtil.ConvertListString_To_String(",", values);
        //        DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
        //        row.Cells[0].Value = key;
        //        row.Cells[1].Value = CTECols;
        //        dgv_CTECols.Rows.Add(row);
        //    }

        //    if (endquery_nonCTEs.Count != 0)
        //    {
        //        for (int i = 0; i < endquery_nonCTEs.Count; i++)
        //        {
        //            string key = "endquery_nonCTE";
        //            //var values = endquery_nonCTEs[i];
        //            var CTECols = MyUtil.ConvertListString_To_String(",", endquery_nonCTEs);
        //            DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
        //            row.Cells[0].Value = key;
        //            row.Cells[1].Value = CTECols;
        //            dgv_CTECols.Rows.Add(row);
        //        }
        //    }
        //}
        #endregion not used

        public static void Fillin_DataGridView(DataGridView dgv_CTECols, Dictionary<string, List<string>> CTEcolumns_0, string errMsg = "", params string[] ColName)
        {
            Clear_DataGridView(dgv_CTECols); //first clear contents

            dgv_CTECols.ColumnCount = ColName.Length;
            dgv_CTECols.ColumnHeadersVisible = true;
            // Set the column header style.
            DataGridViewCellStyle columnHeaderStyle = new DataGridViewCellStyle();
            columnHeaderStyle.BackColor = Color.Beige;
            columnHeaderStyle.Font = new Font("Verdana", 10, FontStyle.Bold);
            dgv_CTECols.ColumnHeadersDefaultCellStyle = columnHeaderStyle;
            //dgv_CTECols.Columns[0].Name = "CTE name";
            //dgv_CTECols.Columns[1].Name = "CTE columns";
            for (int i = 0; i < ColName.Length; i++)
            {
                dgv_CTECols.Columns[i].Name = ColName[i];
            }
            if (CTEcolumns_0.Count != 0)
            {
                for (int i = 0; i < CTEcolumns_0.Count; i++)
                {
                    string key = CTEcolumns_0.Keys.ElementAt(i);
                    var values = CTEcolumns_0.Values.ElementAt(i);
                    var CTECols = MyUtil.ConvertListString_To_String(",", values);
                    DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                    row.Cells[0].Value = key;
                    row.Cells[1].Value = CTECols;
                    dgv_CTECols.Rows.Add(row);
                }
            }
            else
            {
                DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                row.Cells[0].Value = errMsg;
                dgv_CTECols.Rows.Add(row);
            }
            dgv_CTECols.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells; //auto size columns
        }

        public static void Fillin_DataGridView(DataGridView dgv_CTECols, Dictionary<string, List<string>> CTEcolumns_0, string errMsg = "", List<string> endquery_nonCTEs = null, params string[] ColName)
        {
            Clear_DataGridView(dgv_CTECols); //first clear contents

            dgv_CTECols.ColumnCount = ColName.Length;
            dgv_CTECols.ColumnHeadersVisible = true;
            // Set the column header style.
            DataGridViewCellStyle columnHeaderStyle = new DataGridViewCellStyle();
            columnHeaderStyle.BackColor = Color.Beige;
            columnHeaderStyle.Font = new Font("Verdana", 10, FontStyle.Bold);
            dgv_CTECols.ColumnHeadersDefaultCellStyle = columnHeaderStyle;
            //dgv_CTECols.Columns[0].Name = "CTE name";
            //dgv_CTECols.Columns[1].Name = "CTE columns";
            for (int i = 0; i < ColName.Length; i++)
            {
                dgv_CTECols.Columns[i].Name = ColName[i];
            }
            for (int i = 0; i < CTEcolumns_0.Count; i++)
            {
                string key = CTEcolumns_0.Keys.ElementAt(i);
                var values = CTEcolumns_0.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);
                DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                row.Cells[0].Value = key;
                row.Cells[1].Value = CTECols;
                dgv_CTECols.Rows.Add(row);
            }

            if (errMsg != "")
            {
                string key = errMsg;
                var CTECols = "";
                DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                row.Cells[0].Value = key;
                row.Cells[1].Value = CTECols;
                dgv_CTECols.Rows.Add(row);
            }

            if (endquery_nonCTEs.Count != 0)
            {
                for (int i = 0; i < endquery_nonCTEs.Count; i++)
                {
                    string key = "endquery_nonCTE";
                    //var values = endquery_nonCTEs[i];
                    var CTECols = MyUtil.ConvertListString_To_String(",", endquery_nonCTEs);
                    DataGridViewRow row = (DataGridViewRow)dgv_CTECols.Rows[0].Clone();
                    row.Cells[0].Value = key;
                    row.Cells[1].Value = CTECols;
                    dgv_CTECols.Rows.Add(row);
                }
            }

            dgv_CTECols.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells; //auto size columns
        }


        public static void FormatCTEs(Dictionary<string, List<string>> CTEcolumns, string errorMsg, ref string formatedCTEs)
        {
            if (CTEcolumns.Count == 0 || !string.IsNullOrEmpty(errorMsg))
            {
                formatedCTEs = errorMsg;
            }
            for (int i = 0; i < CTEcolumns.Count; i++)
            {
                string key = CTEcolumns.Keys.ElementAt(i);
                var values = CTEcolumns.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);

                if (i < CTEcolumns.Count - 1)
                {
                    formatedCTEs += key + ", columns (" + CTECols + ")" + "; ";
                }

                else if (i == CTEcolumns.Count - 1)
                {
                    formatedCTEs += key + ", columns (" + CTECols + ")";
                }
            }
        }

        public static void FormatCTEs(Dictionary<string, List<string>> CTEcolumns, List<string> endQuery_nonCTECols, string errMsg, ref string formatedCTEs)
        {
            string display = "";

            //if (CTEcolumns.Count == 0 || !string.IsNullOrEmpty(errorMsg))
            //{
            //    formatedCTEs = errorMsg;
            //}
            if (CTEcolumns.Count != 0)
            {
                for (int i = 0; i < CTEcolumns.Count; i++)
                {
                    string key = CTEcolumns.Keys.ElementAt(i);
                    var values = CTEcolumns.Values.ElementAt(i);
                    var CTECols = MyUtil.ConvertListString_To_String(",", values);
                    var tmpdisplay = key + ", columns (" + CTECols + ")";

                    if (i < CTEcolumns.Count - 1)
                    {
                        display += tmpdisplay + "; ";
                    }

                    else if (i == CTEcolumns.Count - 1)
                    {
                        display += tmpdisplay;
                    }
                }
            }
            if (errMsg != "")
            {
                display += errMsg;
            }

            if (endQuery_nonCTECols.Count != 0)
            {
                string tmp_endQuery_nonCTECols = ConvertListString_To_String(",", endQuery_nonCTECols);
                if(display!="")
                    display += " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
                else
                    display += "end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
            }

            formatedCTEs = display;
        }

        public static void FormatCTEs(Dictionary<string, List<string>> CTEcolumns, string errorMsg, ref string formatedCTEs, List<string> endQuery_nonCTECols)
        {
            if (CTEcolumns.Count == 0 || !string.IsNullOrEmpty(errorMsg))
            {
                formatedCTEs = errorMsg;
            }
            for (int i = 0; i < CTEcolumns.Count; i++)
            {
                string key = CTEcolumns.Keys.ElementAt(i);
                var values = CTEcolumns.Values.ElementAt(i);
                var CTECols = MyUtil.ConvertListString_To_String(",", values);
                var tmpdisplay = key + ", columns (" + CTECols + ")";

                if (i < CTEcolumns.Count - 1)
                {
                    formatedCTEs += tmpdisplay + "; ";
                }

                else if (i == CTEcolumns.Count - 1)
                {
                    formatedCTEs += tmpdisplay;
                }
            }

            string tmp_endQuery_nonCTECols = ConvertListString_To_String(",", endQuery_nonCTECols);
            formatedCTEs += " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
        }
        public static void Fillin_dgv_GetCTEs(DataGridView dgv_GetCTEs, Dictionary<string, List<string>> CTEcolumns, int idx)
        {
            if (CTEcolumns.Count != 0)
            {
                for (int i = 0; i < CTEcolumns.Count; i++)
                {
                    string key = CTEcolumns.Keys.ElementAt(i);
                    var values = CTEcolumns.Values.ElementAt(i);
                    var CTECols = MyUtil.ConvertListString_To_String(",", values);
                    string display = key + ", columns (" + CTECols + ")";
                    //dgv_GetCTEs[1, idx].Value = display;

                    if (i < CTEcolumns.Count - 1)
                    {
                        dgv_GetCTEs[1, idx].Value += display + "; ";
                    }

                    else if (i == CTEcolumns.Count - 1)
                    {
                        dgv_GetCTEs[1, idx].Value += display;
                    }
                }
            }
        }

        public static void Fillin_dgv_GetCTEs(DataGridView dgv_GetCTEs, Dictionary<string, List<string>> CTEcolumns, List<string> endQuery_nonCTECols, int idx)
        {
            string display = "";

            string tmp_endQuery_nonCTECols = ConvertListString_To_String(",", endQuery_nonCTECols);

            if (CTEcolumns.Count != 0)
            {
                for (int i = 0; i < CTEcolumns.Count; i++)
                {
                    string key = CTEcolumns.Keys.ElementAt(i);
                    var values = CTEcolumns.Values.ElementAt(i);
                    var CTECols = MyUtil.ConvertListString_To_String(",", values);
                    var tmpdisplay = key + ", columns (" + CTECols + ")";
                    //display = key + ", columns (" + CTECols + ")" + " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
                    //dgv_GetCTEs[1, idx].Value = display;

                    if (i < CTEcolumns.Count - 1)
                    {
                        //dgv_GetCTEs[1, idx].Value += display + "; ";
                        display += tmpdisplay + "; ";
                    }

                    else if (i == CTEcolumns.Count - 1)
                    {
                        //dgv_GetCTEs[1, idx].Value += display;
                        display += tmpdisplay;
                    }
                }
                display += " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
                dgv_GetCTEs[1, idx].Value = display;
            }
        }

        public static void Fillin_dgv_GetCTEs(DataGridView dgv_GetCTEs, Dictionary<string, List<string>> CTEcolumns, List<string> endQuery_nonCTECols, int idx, string errMsg = "")
        {
            string display = "";

            if (CTEcolumns.Count != 0)
            {
                for (int i = 0; i < CTEcolumns.Count; i++)
                {
                    string key = CTEcolumns.Keys.ElementAt(i);
                    var values = CTEcolumns.Values.ElementAt(i);
                    var CTECols = MyUtil.ConvertListString_To_String(",", values);
                    var tmpdisplay = key + ", columns (" + CTECols + ")";
                    //display = key + ", columns (" + CTECols + ")" + " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
                    //dgv_GetCTEs[1, idx].Value = display;

                    if (i < CTEcolumns.Count - 1)
                    {
                        //dgv_GetCTEs[1, idx].Value += display + "; ";
                        display += tmpdisplay + "; ";
                    }

                    else if (i == CTEcolumns.Count - 1)
                    {
                        //dgv_GetCTEs[1, idx].Value += display;
                        display += tmpdisplay;
                    }
                }
            }

            if (errMsg != "")
            {
                display += errMsg;
            }

            if (endQuery_nonCTECols.Count != 0)
            {
                string tmp_endQuery_nonCTECols = ConvertListString_To_String(",", endQuery_nonCTECols);
                display += " , end query non-CTE columns [" + tmp_endQuery_nonCTECols + "]";
            }

            dgv_GetCTEs[1, idx].Value = display;
        }


        public static void Clear_DataGridView(DataGridView dgv)
        {
            dgv.DataSource = null;
            dgv.Rows.Clear();
            dgv.Refresh();
        }

        public static string ReplaceMultipleSpacesToSingleSpace(string strMultipleSpaces)
        {
            return Regex.Replace(strMultipleSpaces, @"\s+", " ", RegexOptions.Multiline);
        }

        /// <summary>
        /// Default KeyValuePair can't change value (get only). 
        /// where clause is used to specify constraints, such that the type parameter T implements the IEquatable interface
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <param name="list"></param>
        /// <param name="item"></param>
        public static void addOrReplaceKVP<T, U>(List<KeyValuePair<T, U>> list, KeyValuePair<T, U> item) where T : IEquatable<T>
        {
            var target_idx = list.FindIndex(n => n.Key.Equals(item.Key));
            if (target_idx != -1)
            {
                list[target_idx] = item;
            }
            else
            {
                list.Add(item);
            }
        }

        public static void ChangeKVPValue<T, U>(Dictionary<T, U> kvp, T theKey, U value)
        {
            //var removeIndex = kvp.FindIndex(kp => kp.Key == "fahrzeugA");
            //kvp.RemoveAt(removeIndex);
            //tempList.Add(new KeyValuePair<string, string>("fahrzeugA", "s"));
            kvp[theKey] = value;
        }

        public static void MergeDictionary(IDictionary InDict,  IDictionary OutDict)
        {
            foreach (object key in InDict.Keys)
            {
                if (!OutDict.Contains(key))
                    OutDict.Add(key, InDict[key]);
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_18b389345fb6409ea23b3d67d5dde17c.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[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
FxEZe3UAAASiJRhyxQ8AcKIlGREboiUactcPAHCiJRsRGi0HcuEAAHArEXLbDwBwERpy1w8AcCg7
AAAKoiUccusPAHCiKOgAAAoTHBEFERxvRgAACm83AQAKLRARBREcb0YAAAoRHG84AQAKERl7dgAA
BDmxAAAAERl7dgAABG9IAAAKb7wAAAoWPpoAAAARBhEcb0YAAApvNwEACi0XEQYRHG9GAAAKERl7
dgAABG84AQAKK3MRBhEcb0YAAApvOQEAChMdcgMQAHARGXt2AAAEKDoBAApyDRAAcCg7AAAKF3Ms
AAAKchcQAHARHXIXEABwKDsAAApvLQAACm87AQAKLRURHXJHDwBwERl7dgAABCg7AAAKEx0RBhEc
b0YAAAoRHW84AQAKERdv5wAACjo6/f//3gwRFywHERdvZwAACtwRFG/nAAAKOtv8///eDBEULAcR
FG9nAAAK3BEFbzwBAApvPQEACowwAAAbEwgrUREFEQhv5QAACm85AQAKEx4CexIAAAQRHm9tAAAK
JhEGER5vRgAACm85AQAKEx8RHy0HcuEAAHATHwJ7EgAABBEfcksMAHAopwAACm9tAAAKJhEIb+cA
AAotpjiNBwAAAnscAAAEOYIHAAACexkAAAQ63wEAAAJ7EQAABG8sAQAKExQ4sAEAABEUby0BAAoT
IAJ7EgAABBEge3EAAARyGxAAcCinAAAKb20AAAomc18AAAoTIQJ7FwAABBEge3EAAARv6wAACjn+
AAAAAnsXAAAEESB7cQAABG/sAAAKby4BAAoTFzjGAAAAERdvLwEAChMjESN7hAAABDmxAAAAESN7
hAAABHt3AAAEOaAAAAAUEyQCexoAAAQsDREje4AAAAQaQIgAAAARI3uCAAAEb9AAAAosenJVDABw
ESN7gQAABCjfAAAKLCkRI3uCAAAEb9AAAAosWQIRI3uCAAAEb9AAAApvqgAACiiJAAAGEyQrKgIR
I3uCAAAEb9AAAApyuwAAcBEje4EAAAQoOwAACm+qAAAKKIkAAAYTJBEhESRvzgAACi0JESERJG/P
AAAKERdv5wAACjou////3gwRFywHERdvZwAACtwRIXORAAAKEyIWEyUrSRElESFv8AAAChdZLyEC
exIAAAQRIhElb+8AAApyRw8AcCinAAAKb20AAAomKxUCexIAAAQRIhElb+8AAApvbQAACiYRJRdY
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
cAIFezcAAAoRGm84AAAKb4sBAAooiQAABnJLDABwKOMAAApvbQAACiY4jQAAAAJ7EgAABBuNcQAA
ASUWAnL0AwBwDgQXWChjAAAGoiUXclUSAHCiJRgFezcAAAoRGm84AAAKbzEAAAqiJRkFezcAAAoR
Gm84AAAKb8AAAAotB3LhAABwKyFy9AMAcAV7NwAAChEabzgAAApvwAAACm8xAAAKKKcAAAqiJRpy
SwwAcKIo6AAACm9tAAAKJhEaF1gTGhEaBXs3AAAKbz8AAAo/AP///xYTGREYb4wBAAo5ogAAABYT
GziHAAAAERhvjAEAChEbb40BAAoTHBEcbzEAAApvSAAACnJVDABwb98AAAotWQIRHAUOBBdYGgMo
ZgAABm8LAQAKExUrJBEVbwwBAAoTHQIRHQUOBBdYFBQoaQAABiYCBQ4EGFgobgAABhEVb+cAAAot
094MERUsBxEVb2cAAArcERkXWBMZERsXWBMbERsRGG+MAQAKbz8AAAo/Zv///xEZOpQBAAByaxIA
cBEYb4oBAApvMQAAChsofwAACjp4AQAAERhvxQAACnvHAAAKERhvxQAACnvIAAAKc8kAAAoTHhEY
b4wBAAoscxEYb4wBAApvPwAAChYxZBYTHytPERhvjAEAChEfb40BAAoTIBEgbzEAAApvSAAACnJV
DABwb98AAAosIREgb70AAAp7xwAAChEgb70AAAp7yAAACnPJAAAKEx4rFhEfF1gTHxEfERhvjAEA
Cm8/AAAKMqECexcAAAQCexYAAARv6wAACjnHAAAAAnsVAAAEBW/TAAAKLEMCexcAAAQCexYAAARv
7AAACgIFezcAAAoWbzgAAAoCex8AAARyVQwAcAJ7FQAABAVv7QAAChEec+4AAAZv7gAACit2BXU8
AAABLDgCexcAAAQCexYAAARv7AAACgIFezcAAAoWbzgAAAoCex8AAARyVQwAcBoRHnPuAAAGb+4A
AAorNgJ7FwAABAJ7FgAABG/sAAAKAgV7NwAAChZvOAAACgJ7HwAABHJVDABwHBEec+4AAAZv7gAA
ChEYb44BAAosSxEYb44BAApvjwEAChMhAgUOBBdYESEaKHAAAAYRGG+OAQAKb5ABAAosIREYb44B
AApvkAEACm/1AAAKEyECBQ4EF1gRIRoocAAABgIFDgQYWChuAAAGBioBKAAAAgCVB03iBwwAAAAA
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
BAIACgZv5wAACi3a3hEGdWMAAAEMCCwGCG9nAAAK3CoBEAAAAgAMACo2ABEAAAAAdgIogwAACgJz
BQIACn1IAAAEAnNfAAAKfUkAAAQqSgIogwAACgJzXwAACn1PAAAEKh4Ce1AAAAQqIgIDfVAAAAQq
HgJ7UQAABCoiAgN9UQAABCoeAntSAAAEKiICA31SAAAEKh4Ce1MAAAQqIgIDfVMAAAQqHgJ7VAAA
BCoiAgN9VAAABCoeAntVAAAEKiICA31VAAAEKh4Ce1YAAAQqIgIDfVYAAAQqHgJ7VwAABCoiAgN9
VwAABCoeAntYAAAEKiICA31YAAAEKh4Ce1kAAAQqIgIDfVkAAAQqABMwAgBMAAAAAAAAAAIogwAA
CgIDfWMAAAQCDgV9aAAABAIEfWYAAAQCBX1lAAAEAg4EfWQAAAQCDgZ9ZwAABAIOB31pAAAEAg4I
fWoAAAQCDgl9awAABCobMAIAHwEAAFAAABEDORgBAAAWCjgFAQAAc60BAAoLAwZvFgEACgwIdUQA
AAEsKwJ7YwAABHsbAAAELR4Ce2MAAAR7GgAABC0RBwh0RAAAAW8SAQAKb64BAAoIdZoAAAEsLQJ7
YwAABHsbAAAELXoCe2MAAAR7GgAABC1tBwh0mgAAAW/3AAAKb64BAAorWgh1NgAAASwOBwh0NgAA
AW+uAQAKK0QIdbEAAAEsPAJ7YwAABHsbAAAELR4Ce2MAAAR7GgAABC0RBwh0sQAAAW+vAQAKb64B
AAoHCHSxAAABb6gBAApvrgEACgdvsAEACg0rFAlvsQEAChMEEQQsCBEEAm+fAQAKCW/nAAAKLeTe
CgksBglvZwAACtwGF1gKBgNvPwAACj/v/v//KgABEAAAAgDkACAEAQoAAAAAEzAIAOwDAABRAAAR
A3Q2AAABCgZv4QAAChozOgJ7ZAAABAJ7ZgAABAYCe2gAAAQCe2UAAAQCe2kAAAQCe2oAAAQCe2sA
AARvUgAABm+HAQAKOKADAAAGb+EAAAofPDM/AntkAAAEAntmAAAEBm8GAgAKAntoAAAEAntlAAAE
AntpAAAEAntqAAAEAntrAAAEb1IAAAZvhwEACjhXAwAABm/hAAAKHzhA2AIAAAZviQEACgsHbwcC
AAoYMy8HbwgCAAolbwkCAAoMCCwHCAJvnwEACm8KAgAKDAg54wEAAAgCb58BAAo41wEAAAdvBwIA
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
EgCnGEMNCgBJKkMNFgBmAAMfBgCeEFEiBgChHrAiBgC9HI8aGgBREBQVGgDPEBQVGgDCDnoaBgBv
EaQaGgAhAQYGBgDwAaIXGgCSAQYGYwBlGwAABgCKAQYGDgDmDmkfHgACKgceHgAZKQceBgCuH5MD
BgC0HJMDBgA/HJMDBgAzHJMDDgCpGRMjDgDvCBMjDgBSGRMjBgAyAaIXDgAZKxMjDgA0LBMjDgB5
KQApBgByAQYGDgCHCGkfDgDkLhMjDgBoGBMjDgA+KQApDgDUKxMjtwB9IAAADgBlFxMjBgBvHKIX
DgAGKxMjHgBdGgceDgChKQApBgChH5MDswB9IAAADgD2AhMjDgAuKxMjDgD0KhMjDgC1DWkfDgD0
F2kfDgB4FRMjBgC8F6IXDgClIBMjDgDBIBMjDgBhKxMjIgBuKnwUBgBLE5wtBgDpAaIXDgBbLBMj
DgC1GRMjDgAKLGkfBgDbCS0mJgCAAQYGBgDwFpMDcwF9IAAADgBmDhsKDgB8DtEWDgD6FNEWBgBY
IC0mBgDPCaIXBgByIC0mBgBjMC0mPwB9IAAAKgClLlglKgAtLlglBgABEqIXKgCqClglKgBqLlgl
BgBLAaIXBgAIAgYGBgCiLy0mBgBMGKIXBgDHHqIXBgBrFKIXBgDIFJMDDgBHMIgFDgDACm0lDgD/
G20lDgAVHG0lDgAhHG0lDgA2MM0fGgCULgQmGgCJJgQmGgCbFAQmGgA7GwQmGgD9HQQmGgC6DgQm
DgDpLGkfBgDLAaIXDgD3DWkfBgB6CqIXBgDkKqIXBgCpF14vBgBjEqIXBgBVHKIXBgCGHKIXLgAB
ACsfLgAqACsfLgBNACsfFgB/AAMfFgAaAAMfhwDfLQAAFgCQAAMfBgDNF6IXBgAuDqIXBgA7CqIX
BgA9AQYGBgCCCqIXDgBmD2kfBgC7H5MDDgCzDxMjDgCWDxMjBgDJHJMDBgBkAQYGDgCBFxMjDgAe
DxMjDgAGFRMjDgAREBMjDgAbLBMjDgCMKxMjDgAvFxMjDgDELhMjDgDDKxMjHgArCwceHgDbHgce
DgDIDxMjDgCaKxMjDgBFFxMjHgB4EAceHgBqJgceBgApHqIXJgDECRceYwDCGgAABgB2JqIXBgA4
AqIXDgCNKQApDgCCGxMjDgANFxMjBgCuCJMDBgC5JpMDBgD0FpMDDgBSKQApBgC2Gi0mBgDDCS0m
KgDaDlglBgD2KaIXIgCKKnwUIgDMCnwUIgBSIHwUKgDtGlglKgBwGVglKgBLG1glKgCOB1glKgDS
GlglKgC/FVglKgDPCFglKgCsFlglBgBYAaIXDgDYDWkfDgAMKhMjDgAaExMjDgBxDxMjAAAAAE8C
AAAAAAEAAQABABAAQRgAABQAAQABAAEAEABQHgAAdQAFAA0AAQAQAF0eAAB1AAUAGAABABAAKyoA
AIUABQAoAAEAEABAJgAARQAJADAAAQAQAMgjAABFAAoAMgAAABAAtyI7I0UACwA5AAABEACVJDsj
oQANAD0AAQAQAH8cTxVFAA4AQAABABAA+AFPFUUADgBDAAEAEAB8KNolRQAQAE0AAQAQAIYnkydF
ABAAUAAAAQAAnw3mEkUBJACLAAEAEADcG+YSRQArAIsAAQAQAJ8Y5hJFADAAjgAAABAAYAnmEkUA
NACRAAAAEADiIOYSRQA3AJIAAQAQAPoS5hJFADoAmwABABAA1BLmEkwARAC1AAEAEABIFc0kRQBE
ALgAAQAQAC8lHiVFAEQAywABABAAQwUeJUUARADMAAEAEAByBB4lRQBIAM0AAQAQAF4DHiVFAEoA
zgACABAAIR0AAEUAUADPAAIAEAAWHQAARQBUANgAAgEAAJ8NAABFAVoA5QAFABAA1CAAAEUAYwDl
AAUAEAC9CQAARQBsAOkABQAQAN8hAABFAHAA6gACABAAnxgAAEUAdQDrAAUAEABWMAAARQB/AO4A
BQAQALIYAABFAIUA8QAFABAAnR8AACUBiwDyAAMhEAACBgAARQCLAPQAAyEQAAIGAABFAI0A9wAD
ARAA0QEAAEUAjwD6AAEAcx/rEBYAWivvEBYAUyv3EBYAbwT/EAYAQCYHEQYAyCMLEQYAXR4PEQEA
LQY2DAEAOSoTEQEAOSoTEREAwRcYEREAqg4dEREAXAgiEQEA4AK0AgEAHAMKAwEAChsmEQEAFyQw
EQEAlh45EQEAaB09EQEAnx1GEQEATh1UEQEAlAheEQEANh1hEQEAxh9wEQEAHwNeAAEANBVeAAEA
Oi5eAAEAmy9eAAEALh42DAEALTB1EQEAhwxeEQEABB1eAAEAcx/rEAEAPwV5EQEATQT/EAYGagU2
DFaAVA6BEVaAHS+BEVaA7BSBEVaAFS+BEVaA3heBEVaA1ReBEQYA5QleEQYA7wleEQYAkhleEQYA
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
TCd0A8EFqC0QAMkF/gyJDsEFbhUGANEFmCCNDjkDfSqWDuEFJQadDjkDRSCjDokDgTDLAUEDmSoB
AEEDAgq8DlEDmCAGAOEFTQmdDlEDNyCjDlEDdCqWDkEDiArBDkEDsSXIDukF+xbODvEFOgsQAEED
LyfVDvkF+xbbDgEGhA2eDVkD2yTiDgkG+xboDhEGgRJ1AvkFIQbvDkEDtwj2DokDczAvD0ED+xZZ
DxEGdxKeDYkDfydhD0EDeAh1AvkFIx4GACEGwBQGAMkD7Ad0D8wCmCAGAMwCnReVD8wC9wCgD9QC
mCAyANwCii7KD9wCBBfVD9wCIQbhAOQCBBdMA3EDTCeSDXEDlCXRBHED+xZuDXEDIQYaDfQBmCAG
ALEBnwfFBIEC5g1AEIECGipGEDkG2BnFBDkGfR/FBIECqQHFBIECLgLFBIECjx/FBIECySBMEJkC
oyxLC5kCDSHFBIECOQjFBIECgxPFBIECbhPFBIEC+CypBYECJRNSEEEGgg9YEEkGayxLC0EG+S6j
BawAZycBAKwA3SrVD+wCmCAGAJwBmCAGAEkCmCBxEPQCdxJvA/wCJy/1AgQDnReVDxQAxiQEAwgA
lADDEAgAmADIEAgAnADNEAgAoADSEAgApADXEAgAqADcEAgAbAHDEAgAcAHIEAgAdAHNEAgAeAHS
EAgAfAHXEAgAgAHcEAgAhAHhEAgAiAHmEA4AaQQAAA4AeQQAABIAfQTDEA4A3QQAAC4ACwCBGC4A
EwCKGC4AGwCpGC4AIwCyGC4AKwDbGC4AMwDbGC4AOwDbGC4AQwCyGC4ASwDhGC4AUwDbGC4AWwD4
GEMAYwDIEAMBcwDIEGMBgwBAGaEBawDIEKkCewCpGMkCewCpGIMEawDIEKMEawDIEMMEawDIEAEK
awDIECEKawDIEEEKawDIEGEKawDIEIEKawDIEKEKawDIEMEKawDIEOEKawDIEAELawDIECELawDI
EOAZawDIEAAaawDIECAaawDIEEAaawDIEGAaawDIEIAaawDIEKAaawDIEMAaawDIEAAbawDIECAb
awDIEEAbawDIEGAbawDIEIAbawDIEKAbawDIEMAbawDIEOAbawDIEAAcawDIECAcawDIEEAcawDI
EGAcawDIEOQiiwDIEGQjiwDIEAQkiwDIEFQAmQDnAC4BSgHhATcCjwKUAlQDgAOIA80D9QMtBHME
igSVBKAE3gQNBToFUwaXBrEGvwbHBs4G9AblCOsIdwmmCc4J7Ql+CoYKowqrCrQKXgtjC28LgAud
C7oL9gsnDEAMUgyJDLYMuwwTDSANOg1FDXMNeQ2IDaINsw26DcwN3w3mDfcN/A0jDn4Oqg79DhIP
NQ9AD00PZw9+D+UP7w8HEF4QgxADAAEABAAFAAYAEQAHABIACAAVAAkAFwALABgADQAcABAAIQAT
ACIAGgAlABsAKQAgAC8AIwAwAAAAdALxFwAA+hX1FwAAVwP5FwAASxb1FwAAIwv/FwAAlRb1FwAA
KQP5FwAAJBb1FwAADgP/FwAACxb1FwAAyAP5FwAAexb1FwAAsQP/FwAAXRb1FwAAXALxFwAA1BX1
FwAAdxsDGAAAtQT1FwAA8wTxFwAA/AMJGAAAoR4NGAAAsg4TGAAARSgZGAAAmBceGAAAoyrxFwAA
UCclGAAA2yE9GAAAOgVOGAAASARXGAAA8hz1FwAAZCj/FwAAmiZgGAAAsgv/FwAAYx1rGAAAUSj/
FwAAUCZxGAAALgz/FwAAzij/FwAAqAL/FwAAwgL/FwAAWQv/FwAAigv/FwAAIg7/FwAAfgn/FwAA
Oxn/FwAAIAv/FwAAsgv/FwAASxN7GAIADgADAAEADwADAAIAEAAFAAEAEQAFAAIAEgAHAAEAEwAH
AAIAFAAJAAEAFQAJAAEAGQALAAEAGgANAAIAGwAPAAIAHAARAAEAHQATAAEAHgAVAAIAHwAXAAIA
IAAZAAEAIQAbAAEAIgAdAAEAIwAfAAEAJAAhAAIAMQAjAAIAMwAlAAEANAAlAAIANQAnAAEANgAn
AAIANwApAAEAOAApAAIAOgArAAIAOwAtAAEAPAAtAAIAPQAvAAIAQwAxAAEARAAxAAIASQAzAAIA
SgA1AAIASwA3AAIAUwA5AAEAVAA5AAIAVQA7AAEAVgA7AAIAVwA9AAEAWAA9AAIAcQA/AAIAcgBB
AAIAjwBDAAIAmwBFAAIAnABHAAIAnQBJAAIAzwBLAAEA0ABLAAIA0QBNAAEA0gBNAAIA0wBPAAEA
1ABPAAIA1QBRAAEA1gBRAAIA2ABTAAEA2QBTAAIA2gBVAAEA2wBVAAIA3ABXAAEA3QBXAAIA3gBZ
AAEA3wBZAAIA4ABbAAEA4QBbAAIA4gBdAAEA4wBdAAIA7QBfAAIA8wBhABwAJADaABcBQwGgAagB
swG5AfsBqwLKAuYC+gIaA5oDogOpA7YDvwPnAx8EUQRsBL0E7AT9BDEFmQXMBQUGKQZBBkoGhQaO
BrcG0gfZB+EH6QfwB/gHAAgJCB4INwhKCGwIdQh9CJAInAipCL4I0wgwCUgJYAluCccJRgpWCpYK
IwsrCzMLPAuNC5ULowurC7MLGAxmDG4MdwyADK8M6Qz7DAMNCw1fDWYNNg5fDnMOiw+tD7wP3A9q
EHcQiBCSEJwQBIAAAAEAAAAAAAAAAAAAAAAA3gUAAAQAAAAAAAAAAAAAAJ8Q0gUAAAAADAAAAAAA
AAAAAAAAqBC2KgAAAAAAAAAAAAAAAAAAAACxEGkfAAAAAAwAAAAAAAAAAAAAAKgQMi0AAAAADAAA
AAAAAAAAAAAAqBCzHQAAAAAEAAAAAAAAAAAAAACfEKIXAAAAAAQAAAAAAAAAAAAAAJ8QBx4AAAAA
BAAAAAAAAAAAAAAAuhB8FAAAAAAEAAAAAAAAAAAAAACfEFoOAAAAAAQAAAAAAAAAAAAAAJ8QWCUA
AAAADAAAAAAAAAAAAAAAqBDWHQAAAAAAAAAAAQAAAMEiAAAaAAIAGwACABwADQAdAA0AHgANAB8A
DQAgAA0AIQANACIADQAjAA0AJAANACUAFQAmABUAAAAAABYAjgQBAAAAFgCQBAAAAABMAI4EAQAA
AEwAkAQAAAAAjwGOBAEAAACPAZAEAAAAAJEBjgQBAAAAkQGQBDUBRQPHAqIJ3wI+Cu0CeQrtAkwO
xwI+Ct8CogkDAAoABQAGAAAAAElEVFNDb21wb25lbnRNZXRhRGF0YTEwMABJRFRTVmFyaWFibGUx
MDAASURUU1J1bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbjEwMABJRFRTUnVudGltZUNvbm5lY3Rp
b24xMDAASURUU0Nvbm5lY3Rpb25NYW5hZ2VyMTAwAElEVFNWYXJpYWJsZXMxMDAASURUU0V2YWx1
YXRvckNvbnRleHQxMDAAPD45X184MF8wADxpbml0Q1RFTWFwPmJfXzgwXzAAPD45X18xXzAAPENv
bnZlcnREaWN0U3RyaW5nTGlzdF9Ub19TdHJpbmc+Yl9fMV8wADxhZGRPclJlcGxhY2VLVlA+Yl9f
MABDVEVjb2x1bW5zXzAATWFpbl8xAExpbmtlZExpc3ROb2RlYDEATnVsbGFibGVgMQBJRW51bWVy
YWJsZWAxAElFcXVhdGFibGVgMQBQcmVkaWNhdGVgMQBJQ29sbGVjdGlvbmAxAElFbnVtZXJhdG9y
YDEASGFzaFNldGAxAElMaXN0YDEATGlua2VkTGlzdGAxAGdldF9JdGVtMQBnZXRfRXhwcjEAcmlj
aFRleHRCb3gxAFRvSW50MzIAR2V0SW50MzIAPD5jX19EaXNwbGF5Q2xhc3MxNV8wYDIARnVuY2Ay
AFR1cGxlYDIATGlua2VkSGFzaE1hcGAyAEtleVZhbHVlUGFpcmAyAERpY3Rpb25hcnlgMgBnZXRf
SXRlbTIAZ2V0X0V4cHIyAEludDY0AE1ENQBnZXRfVVRGOAA8PjkAPE1vZHVsZT4Ac2V0X1FDU1JR
U1JJRABnZXRfUVNSSUQAc2V0X1FTUklEAFFDU1JfSUQAUUNTT19DU1JfSUQAUUNTUl9RU1JfSUQA
Z2V0X3N0cklEAHNldF9zdHJJRABnZXRfc3RyUGFyZW50SUQAc2V0X3N0clBhcmVudElEAElucHV0
SUQAR2V0T3V0cHV0SUQAUUNTT19OQU1FAFFDU1JfTkFNRQBUQ1RFAGdldF9DVEUAZ2V0Q1RFAHNl
dF9SQVdDVEVTUUxIQVNIAExMAGlzWE1MAGdldF9SQVdDVEVTUUwAZ2V0RW5kUXVlcnlOb25DVEVT
UUwAZ2V0X1FTUlNRTABzZXRfUVNSU1FMAERTR1RPT0xTX1FVRVJZX0NURV9TUUwAUUNTUl9TUUwA
YW5hbHl6ZVNRTABpbXBhY3RTUUwAU3lzdGVtLklPAGFkZE9yUmVwbGFjZUtWUABzZXRfUkFXQ1RF
U1FMSEFTSFVQUEVSAGdldF9SQVdDVEVTUUxVUFBFUgBnZXRfbHN0RFNHVE9PTFNRVUVSWUNURVNR
TE9VVFBVVABzZXRfbHN0RFNHVE9PTFNRVUVSWUNURVNRTE9VVFBVVABnZXRfcHJvcF9sc3RfRFNH
VE9PTFNfUVVFUllfQ1RFX1NRTF9PVVRQVVQAc2V0X3Byb3BfbHN0X0RTR1RPT0xTX1FVRVJZX0NU
RV9TUUxfT1VUUFVUAGxzdERTR1RPT0xTX1FVRVJZX0NURV9TUUxfT1VUUFVUAFUAZ2V0X2JERlRE
U0dUb29sc1FVRVJZQ1RFU1FMUkFXAHNldF9iREZURFNHVG9vbHNRVUVSWUNURVNRTFJBVwBnZXRf
aURGVERTR1Rvb2xzUVVFUllDVEVTUUxSQVcAc2V0X2lERlREU0dUb29sc1FVRVJZQ1RFU1FMUkFX
AGdldF9wcm9wX2xzdF9EU0dUT09MU19RVUVSWV9DVEVfU1FMX1JBVwBzZXRfcHJvcF9sc3RfRFNH
VE9PTFNfUVVFUllfQ1RFX1NRTF9SQVcAZ2V0X1gAZ2V0X1kAdmFsdWVfXwBzZWxlY3RDb2x1bW5s
aXN0Q29tbWEAZ3VkdXNvZnQuZ3NxbHBhcnNlci5wcC5wYXJhAGdldF9Db21wb25lbnRNZXRhRGF0
YQBBZGRCbG9iRGF0YQBHZXRCbG9iRGF0YQBtc2NvcmxpYgBzYgBTQ18xOGIzODkzNDVmYjY0MDll
YTIzYjNkNjdkNWRkZTE3YwA8PmMAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAQWRkAGdldF9S
ZWQASW5wdXRzRmluaXNoZWQATWFya091dHB1dHNGaW5pc2hlZABnZXRfVGFibGVEZXRlcm1pbmVk
ADxzdHJJRD5rX19CYWNraW5nRmllbGQAPHN0clBhcmVudElEPmtfX0JhY2tpbmdGaWVsZAA8c3Ry
Q29sdW1uVGFibGU+a19fQmFja2luZ0ZpZWxkADxzdHJDVEVOYW1lPmtfX0JhY2tpbmdGaWVsZAA8
c3RyU2NoZW1hTmFtZT5rX19CYWNraW5nRmllbGQAPHN0clRhYmxlTmFtZT5rX19CYWNraW5nRmll
bGQAPHN0ck5hbWU+a19fQmFja2luZ0ZpZWxkADxzdHJTdGF0ZW1lbnRUeXBlPmtfX0JhY2tpbmdG
aWVsZAA8c3RyQ29sdW1uPmtfX0JhY2tpbmdGaWVsZAA8c3RyU3RtdD5rX19CYWNraW5nRmllbGQA
ZmllbGQAVHJpbUVuZABEYXRhR3JpZFZpZXdCYW5kAGdldF9CZXR3ZWVuT3BlcmFuZABnZXRfT2Jq
ZWN0T3BlcmFuZABnZXRfTGVmdE9wZXJhbmQAZ2V0X1JpZ2h0T3BlcmFuZABBcHBlbmQAUmVwbGFj
ZQBSZXBsYWNlTXVsdGlwbGVTcGFjZXNUb1NpbmdsZVNwYWNlAElzTnVsbE9yV2hpdGVTcGFjZQBn
ZXRfU3RhY2tUcmFjZQBnZXRfWE1MVHlwZV9JbnN0YW5jZQBvdXRlckluc3RhbmNlAGRlZmF1bHRJ
bnN0YW5jZQBuZXdJbnN0YW5jZQBzZXRfRGF0YVNvdXJjZQBFVGFibGVTb3VyY2UAY3VycmVudFNv
dXJjZQBHZXRIYXNoQ29kZQBGaWxlTW9kZQBzZXRfQXV0b1NpemVDb2x1bW5zTW9kZQBEYXRhR3Jp
ZFZpZXdBdXRvU2l6ZUNvbHVtbnNNb2RlAFRQYXJzZVRyZWVOb2RlAGlzTGVhZk5vZGUAcE5vZGUA
Z2V0X1VuaWNvZGUAcG5vZGUAZ2V0X01lc3NhZ2UAZ2V0X0Vycm9ybWVzc2FnZQBNeUVycm9ybWVz
c2FnZQBnZXRfQmVpZ2UAQWRkUmFuZ2UAVFRhYmxlAGdldF9zdHJDb2x1bW5UYWJsZQBzZXRfc3Ry
Q29sdW1uVGFibGUAZ2V0RXhwcmVzc2lvblRhYmxlAFRMelRhbGVUb1RhYmxlAHRhcmdldFRhYmxl
AGx6VGFibGUASUVudW1lcmFibGUASURpc3Bvc2FibGUASGFzaHRhYmxlAGxlZnR0YWJsZQByaWdo
dHRhYmxlAGx6dGFibGUAc2V0X0NvbHVtbkhlYWRlcnNWaXNpYmxlAGd1ZHVzb2Z0LmdzcWxwYXJz
ZXIuc3RtdC5vcmFjbGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUATG9hZEZp
bGUAaXNPdXRwdXRGaWxlAGZpbGUAQ29uc29sZQBUdXBsZQBzZXRfQ29sdW1uSGVhZGVyc0RlZmF1
bHRDZWxsU3R5bGUARGF0YUdyaWRWaWV3Q2VsbFN0eWxlAFRBbGlnblN0eWxlAEZvbnRTdHlsZQBp
bnNlcnRWYWx1ZWxpc3RTdHlsZQBzZWxlY3RDb2x1bW5saXN0U3R5bGUAc2V0X0NURU5hbWUAZ2V0
X3N0ckNURU5hbWUAc2V0X3N0ckNURU5hbWUAWE5hbWUAZ2V0X05hbWUAc2V0X05hbWUAZ2V0X3N0
clNjaGVtYU5hbWUAc2V0X3N0clNjaGVtYU5hbWUAZ2V0X1RhYmxlTmFtZQBnZXRfc3RyVGFibGVO
YW1lAHNldF9zdHJUYWJsZU5hbWUAZ2V0VGFibGVOYW1lAHRhYmxlTmFtZQBnZXRfT3JpZ05hbWUA
Z2V0UmVhbE5hbWUAZ2V0X0Z1bGxOYW1lAHVwZGF0ZUNvbHVtblRhYmxlRnVsbE5hbWUAZ2V0RnVs
bE5hbWUAQ29sTmFtZQBjb2x1bW5OYW1lAGdldF9GdW5jdGlvbk5hbWUAZ2V0X3N0ck5hbWUAc2V0
X3N0ck5hbWUAZ2V0X0FsaWFzTmFtZQBnZXRUYWJsZUFsaWFzTmFtZQBUT2JqZWN0TmFtZQBnZXRP
YmplY3ROYW1lAElucHV0TmFtZQBnZXRfVmlld05hbWUAdmlld05hbWUAcHJlZml4TmFtZQBHZXRS
dW50aW1lQ29ubmVjdGlvbkJ5TmFtZQBzcWxGaWxlbmFtZQBzZXRfc3FsZmlsZW5hbWUAQXBwZW5k
TGluZQBjYXNlV2hlblRoZW5JblNhbWVMaW5lAFdyaXRlTGluZQBnZXRfTmV3TGluZQBmcm9tQ2xh
dXNlSW5OZXdMaW5lAHNlbGVjdEl0ZW1Jbk5ld0xpbmUAQ29tYmluZQB1bmRlZmluZQBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZQBzZWxlY3RGcm9tY2xhdXNlSm9pbk9uSW5OZXdsaW5l
AENsb25lAEVzY2FwZQBnZXRfVGFibGVUeXBlAENsYXVzZVR5cGUAY2xhdXNlVHlwZQBFRXhwcmVz
c2lvblR5cGUAZ2V0X0V4cHJlc3Npb25UeXBlAEVGdW5jdGlvblR5cGUAZ2V0X0Z1bmN0aW9uVHlw
ZQBFU3FsU3RhdGVtZW50VHlwZQBnZXRfc3RyU3RhdGVtZW50VHlwZQBzZXRfc3RyU3RhdGVtZW50
VHlwZQBzcWxzdGF0ZW1lbnR0eXBlAGFuZE9yVW5kZXJXaGVyZQB3aGVyZQBTeXN0ZW0uQ29yZQBU
UGxzcWxDcmVhdGVQcm9jZWR1cmUAVE1zc3FsQ3JlYXRlUHJvY2VkdXJlAGdldF9DdWx0dXJlAHNl
dF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBDYXB0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNl
AFRleHRCb3hCYXNlAElNZXRhRGF0YWJhc2UAQ2xvc2UARGlzcG9zZQBQYXJzZQBwYXJzZQBpbk9y
ZGVyVHJhdmVyc2UAVFdoZXJlQ2xhdXNlAGdldF9XaGVyZUNsYXVzZQBnZXRfU3RhcnRXaXRoQ2xh
dXNlAGdldF9IaWVyYXJjaGljYWxDbGF1c2UARVNxbENsYXVzZQBUUGFydGl0aW9uQ2xhdXNlAGdl
dF9QYXJ0aXRpb25DbGF1c2UAVEFsaWFzQ2xhdXNlAGdldF9BbGlhc0NsYXVzZQBUTm9kZVdpdGhB
bGlhc0NsYXVzZQBUVmlld0FsaWFzQ2xhdXNlAGdldF9WaWV3QWxpYXNDbGF1c2UAZ2V0X0dyb3Vw
QnlDbGF1c2UAZ2V0X09yZGVyQnlDbGF1c2UAVENvbm5lY3RCeUNsYXVzZQBnZXRfT3JkZXJieUNs
YXVzZQBjbGF1c2UAY29udGFpbkNsYXN1c2UAQ3JlYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAFdy
aXRlAHJlbW92ZVF1b3RlAFhBdHRyaWJ1dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVi
dWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dz
YWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0
cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRy
aWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBEZWZhdWx0TWVtYmVyQXR0cmlidXRl
AENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRl
AEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50
QXR0cmlidXRlAFBhcmFtQXJyYXlBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1
bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUAQnl0ZQBD
aGFuZ2VLVlBWYWx1ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAHZhbHVlAFNhdmUAYWRkX0Fzc2VtYmx5
UmVzb2x2ZQBDdXJyZW50RG9tYWluX0Fzc2VtYmx5UmVzb2x2ZQBSZW1vdmUAc2l6ZQBDVEVSZWxh
dGVkQW5hbHl6ZQBndWR1c29mdC5nc3FscGFyc2VyLmpvaW5SZWxhdGlvbkFuYWx5emUATGFzdElu
ZGV4T2YAVFdpbmRvd0RlZgBnZXRfV2luZG93RGVmAGZsYWcAaW1wYWN0U1FMX29yaWcAZ2V0X0Vu
Y29kaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAZ2V0X05hbWVzcGFjZV9TdHJpbmcAZ2V0
X1hQYXRoX1N0cmluZwBDb252ZXJ0TGlzdFN0cmluZ19Ub19TdHJpbmcAQ29udmVydERpY3RTdHJp
bmdMaXN0X1RvX1N0cmluZwBnZXRfU3RyaW5nAGdldF9TY2hlbWFTdHJpbmcAYnVpbGRTdHJpbmcA
Z2V0X1RhYmxlU3RyaW5nAG5hbWVTdHJpbmcAZmlsbFN0cmluZwBidWlsZExvY2F0aW9uU3RyaW5n
AFRvU3RyaW5nAGdldF9GdWxsTmFtZVdpdGhBbGlhc1N0cmluZwBnZXRfT2JqZWN0U3RyaW5nAEdl
dFN0cmluZwBTdWJzdHJpbmcAU3lzdGVtLkRyYXdpbmcAZXJyb3JNc2cAZXJyTXNnAE1hdGNoAEdl
dE1kNUhhc2gAbWQ1SGFzaABDb21wdXRlSGFzaABSZWZyZXNoAFBhdGgAZ2V0X0xlbmd0aABFbmRz
V2l0aABTdGFydHNXaXRoAHN0YXJ0d2l0aABvYmoAVE1zc3FsQmxvY2sAVEhpZXJhcmNoaWNhbABT
eXN0ZW0uQ29tcG9uZW50TW9kZWwAYmFzZUxldmVsAGlzQ29sdW1uTGV2ZWwAbGV2ZWwATXlVdGls
AGd1ZHVzb2Z0LmdzcWxwYXJzZXIuZGVtb3MudXRpbABTZWxlY3RBbGwAVEZ1bmN0aW9uQ2FsbABn
ZXRfRnVuY3Rpb25DYWxsAFNDXzE4YjM4OTM0NWZiNjQwOWVhMjNiM2Q2N2Q1ZGRlMTdjLmRsbABE
YXRhR3JpZFZpZXdDZWxsAHNldF9RQ1NSUVNSSURfSXNOdWxsAGdldF9RU1JJRF9Jc051bGwAc2V0
X1FTUklEX0lzTnVsbABzZXRfUkFXQ1RFU1FMSEFTSF9Jc051bGwAZ2V0X1JBV0NURVNRTF9Jc051
bGwAZ2V0X1FTUlNRTF9Jc051bGwAc2V0X1FTUlNRTF9Jc051bGwAc2V0X1JBV0NURVNRTEhBU0hV
UFBFUl9Jc051bGwAZ2V0X1JBV0NURVNRTFVQUEVSX0lzTnVsbABzZXRfQ1RFTmFtZV9Jc051bGwA
U2V0TnVsbABDb250cm9sAGdldFJlYWxOYW1lRnJvbVNxbABGb3JtYXRTcWwAZ3VkdXNvZnQuZ3Nx
bHBhcnNlci5zdG10Lm1zc3FsAEZpbGVTdHJlYW0AZ2V0X0l0ZW0Ac2V0X0l0ZW0AVFdoZW5DbGF1
c2VJdGVtAGdldFdoZW5DbGF1c2VJdGVtAFRKb2luSXRlbQBnZXRKb2luSXRlbQBUVmlld0FsaWFz
SXRlbQBnZXRWaWV3QWxpYXNJdGVtAFRHcm91cEJ5SXRlbQBnZXRHcm91cEJ5SXRlbQBUT3JkZXJC
eUl0ZW0AZ2V0T3JkZXJCeUl0ZW0AaXRlbQBTeXN0ZW0ASGFzaEFsZ29yaXRobQBUcmltAEVudW0A
cmVzb3VyY2VNYW4AQm9vbGVhbgBjYXNldGhlbgBjYXNld2hlbgBnZXRfZW5kVG9rZW4AVFNvdXJj
ZVRva2VuAGdldEJlZm9yZVRva2VuAGdldF9ub2Rlc1N0YXJ0RnJvbVRoaXNUb2tlbgBnZXRfc3Rh
cnRUb2tlbgB0b2tlbgBTY3JpcHRNYWluAEFwcERvbWFpbgBnZXRfQ3VycmVudERvbWFpbgBUSm9p
bgBnZXRfT3JhY2xlT3V0ZXJKb2luAGdldEpvaW4AYWRkU3VicXVlcnlKb2luAGpvaW4AVENvbHVt
bgBCbG9iQ29sdW1uAFRTb3VyY2VDb2x1bW4Ac291cmNlQ29sdW1uAHNlYXJjaENvbHVtbgBjaGVj
a0NvbHVtbgB0cmVhdERpc3RpbmN0QXNWaXJ0dWFsQ29sdW1uAG9yaWduQ29sdW1uAGV4cHJUb0Nv
bHVtbgBhdHRyVG9Db2x1bW4AZ2V0X3N0ckNvbHVtbgBzZXRfc3RyQ29sdW1uAHRhcmdldENvbHVt
bgBUUmVzdWx0Q29sdW1uAGdldFJlc3VsdENvbHVtbgBEYXRhR3JpZFZpZXdDb2x1bW4AaXNQc2V1
ZG9jb2x1bW4AbGVmdGNvbHVtbgByaWdodGNvbHVtbgBURXhwcmVzc2lvbgBUQ2FzZUV4cHJlc3Np
b24AZ2V0X0Nhc2VFeHByZXNzaW9uAGdldF9TdHJpbmdFeHByZXNzaW9uAHNlYXJjaEV4cHJlc3Np
b24Ad3NQYWRkaW5nUGFyZW50aGVzZXNJbkV4cHJlc3Npb24AZ2V0RXhwcmVzc2lvbgBleHByZXNz
aW9uAGdldF9Mb2NhdGlvbgBvcmlnaW5Mb2NhdGlvbgBsb2NhdGlvbgBYRGVjbGFyYXRpb24Ac2V0
X0RlY2xhcmF0aW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5
c3RlbS5SZWZsZWN0aW9uAElDb2xsZWN0aW9uAFZhbHVlQ29sbGVjdGlvbgBEYXRhR3JpZFZpZXdD
ZWxsQ29sbGVjdGlvbgBEYXRhR3JpZFZpZXdDb2x1bW5Db2xsZWN0aW9uAGNvbHVtbkNvbGxlY3Rp
b24AZ2V0X1J1bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbgBHcm91cENvbGxlY3Rpb24ARGF0YUdy
aWRWaWV3Um93Q29sbGVjdGlvbgBLZXlDb2xsZWN0aW9uAGdldF9Db25uZWN0aW9uAFRBbmFseXRp
Y0Z1bmN0aW9uAGdldF9BbmFseXRpY0Z1bmN0aW9uAGdldF9Db25kaXRpb24AZGVhbENvbXBhcmVD
b25kaXRpb24AZ2V0X09uQ29uZGl0aW9uAEpvaW5Db25kaXRpb24AaXNfY29tcGFyZV9jb25kaXRp
b24AVExpbmVmZWVkc0NvbW1hT3B0aW9uAFRDYXNlT3B0aW9uAFRFbXB0eUxpbmVzT3B0aW9uAElP
RXhjZXB0aW9uAEZpbGVOb3RGb3VuZEV4Y2VwdGlvbgBJbnZhbGlkT3BlcmF0aW9uRXhjZXB0aW9u
AEZvcm1hdEV4Y2VwdGlvbgBDb21tb24AU3RyaW5nQ29tcGFyaXNvbgBsaW5lTm8AZ2V0X0NvbHVt
bk5vAGNvbHVtbk5vAEZpbGVJbmZvAEN1bHR1cmVJbmZvAEZpbGVTeXN0ZW1JbmZvAGdldF9Db2xs
ZWN0Q29sdW1uSW5mbwBzZXRfQ29sbGVjdENvbHVtbkluZm8AY29sbGVjdENvbHVtbkluZm8AY29s
dW1uSW5mbwBxdWVyeWluZm8AaW5pdENURU1hcABkZXBlbmRNYXAAT3V0cHV0TmFtZU1hcABjdXJy
ZW50Q2xhdXNlTWFwAGdldF9wcm9wX2N0ZU1hcABNeUNURXNNYXAAbXlDVEVzTWFwAHRhYmxlQWxp
YXNNYXAAcXVlcnlBbGlhc01hcABhY2Nlc3NNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRFRTUnVudGltZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNQaXBlbGluZVdyYXAAcHAA
R3JvdXAAa3ZwAFN5c3RlbS5YbWwuTGlucQBTeXN0ZW0uTGlucQBDbGVhcgBDaGFyAGNvbHVtbk51
bWJlcgBTdHJpbmdCdWlsZGVyAHNlbmRlcgBJbnB1dDBCdWZmZXIAT3V0cHV0MEJ1ZmZlcgBQaXBl
bGluZUJ1ZmZlcgBsb2NhdGlvbkJ1ZmZlcgBTY3JpcHRCdWZmZXIAYnVmZmVyAGdldF9SZXNvdXJj
ZU1hbmFnZXIAZ2V0X0Nvbm5lY3Rpb25NYW5hZ2VyAFJlc29sdmVFdmVudEhhbmRsZXIAWENvbnRh
aW5lcgBjb250YWluZXIAdGFibGVPd25lcgBUb1VwcGVyAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlJ1bnRpbWUuV3JhcHBlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVy
AFRHU3FsUGFyc2VyAGluUGFyc2VyAGd1ZHVzb2Z0LmdzcWxwYXJzZXIAZ2V0X1RyaW1DaGFyYWN0
ZXIAZ2V0X1BhcmFtZXRlcgBVdGY4U3RyaW5nV3JpdGVyAFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVy
AGZpbHRlcgBndWR1c29mdC5nc3FscGFyc2VyLnBwLnN0bXRmb3JtYXR0ZXIAVG9Mb3dlcgBqcgBH
ZXRFRGJWZW5kb3IAZ2V0X0RiVmVuZG9yAGRiVmVuZG9yAGRlZmF1bHRWZW5kb3IAZGJ2ZW5kb3IA
c2V0X0JhY2tDb2xvcgBzZXRfU2VsZWN0aW9uQ29sb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRv
cgBJRGljdGlvbmFyeUVudW1lcmF0b3IAZ2V0X1NldE9wZXJhdG9yAC5jdG9yAC5jY3RvcgBJRXhw
cmVzc2lvblZpc2l0b3IAZ2V0X0V4cHIAVEluRXhwcgBnZXRfSW5FeHByAGNvbHVtbnNJbkV4cHIA
am9pbkNvbmRpdG9uc0luRXhwcgBjb2x1bW5FeHByAGNvbGxlY3RFeHByAGdldF9GdW5jX2V4cHIA
Z2V0X0Vsc2VfZXhwcgBnZXRfQ29tcGFyaXNvbl9leHByAGdldF9SZXR1cm5fZXhwcgBnZXRfSW5w
dXRfZXhwcgBsY2V4cHIAc2xleHByAHNyZXhwcgBsc3RTdHIAYXR0cgBPdXRwdXRJRHMAZm9ybWF0
ZWRDVEVzAGVuZHF1ZXJ5X25vbkNURXMARm9ybWF0Q1RFcwBGaWxsaW5fZGd2X0dldENURXMAaXRl
cmF0ZVN0bXRfZ2V0Q1RFcwBnZXRfTExzAFRBbGlhcwBnZXRfQWxpYXMAdGFibGVBbGlhcwBnZXRf
Q29sdW1uQWxpYXMAY29sdW1uQWxpYXMAcGFyZW50QWxpYXMAZmluZFRhYmxlQnlBbGlhcwBnZXRS
ZXN1bHRDb2x1bW5CeUFsaWFzAGFsaWFzAFN5c3RlbS5EaWFnbm9zdGljcwBzZWFyY2hGaWVsZHMA
Y2FzZUtleXdvcmRzAHN0ck11bHRpcGxlU3BhY2VzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAU3lzdGVtLlJlc291cmNlcwBTQ18xOGIzODkzNDVmYjY0MDllYTIzYjNkNjdkNWRkZTE3
Yy5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAZ3VkdXNvZnQu
Z3NxbHBhcnNlci5ub2RlcwBnZXRTdWJRdWVyaWVzAFNDXzE4YjM4OTM0NWZiNjQwOWVhMjNiM2Q2
N2Q1ZGRlMTdjLlByb3BlcnRpZXMAc2VhcmNoVGFibGVzAHNlYXJjaEluVGFibGVzAGZpbmRDb2x1
bW5JblRhYmxlcwBsaW5rRmllbGRUb1RhYmxlcwBjaGVja1N0bXRUYWJsZXMAZ2V0X1JlYWRXcml0
ZVZhcmlhYmxlcwB0YWJsZXMAZ2V0VGFibGVOYW1lcwB0YWJsZU5hbWVzAHBhcnNlTmFtZXMAdGFi
bGVGdWxsTmFtZXMAZW1wdHlMaW5lcwBhbGlhc2VzAHNlYXJjaENsYXVzZXMAZmluZENvbHVtbnNG
cm9tQ2xhdXNlcwBzZWFyY2hJbkNsYXVzZXMAY2xhdXNlcwBHZXRCeXRlcwBnZXRfVmFsdWVzAEJ1
ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1uSW5kZXhlcwBTZXR0aW5ncwBnZXRfQXJncwBSZXNv
bHZlRXZlbnRBcmdzAGFyZ3MAYW5hbHlzaXMARXF1YWxzAEdldENURXMudXRpbHMAZ2V0X0NlbGxz
AGRndl9DVEVDb2xzAGVuZFF1ZXJ5X25vbkNURUNvbHMAbHN0X2VuZHF1ZXJ5X25vbkNURV9Db2xz
AEdldENURXMuRFNHVG9vbHMAR2V0Q1RFc19EU0dUb29scwBnZXRfSXRlbXMAZ2V0X0pvaW5JdGVt
cwBTeXN0ZW0uV2luZG93cy5Gb3JtcwBndWR1c29mdC5nc3FscGFyc2VyLnBwLnBhcmEuc3R5bGVl
bnVtcwBDb250YWlucwBqb2lucwBnZXRDVEVDb2x1bW5zAGdldF9Db2x1bW5zAGdldF9MaW5rZWRD
b2x1bW5zAENURWNvbHVtbnMAZ3VkdXNvZnQuZ3NxbHBhcnNlci5kZW1vcy5nZXR0YWJsZWNvbHVt
bnMAU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zAGxvY2F0aW9ucwBTeXN0ZW0uQ29sbGVj
dGlvbnMAQ29ubmVjdGlvbnMAZ2V0X0pvaW5Db25kaXRpb25zAGNvbmRpdGlvbnMAU2F2ZU9wdGlv
bnMAU3RyaW5nU3BsaXRPcHRpb25zAFJlZ2V4T3B0aW9ucwBnZXRfQ29sdW1uSW5mb3MAZ2V0X0dy
b3VwcwBCdWZmZXJzAEZpbGVBY2Nlc3MAZ2V0X1N1Y2Nlc3MAc3RhdHMAZ2V0X1N0YXRlbWVudHMA
Z2V0U2VsZWN0U3FsU3RhdGVtZW50cwBnZXRfQm9keVN0YXRlbWVudHMAZ2V0X3NxbHN0YXRlbWVu
dHMARmluaXNoT3V0cHV0cwBnZXRfUm93cwBDcmVhdGVOZXdPdXRwdXRSb3dzAGdldF9LZXlzAHNl
YXJjaEluU3ViUXVlcnlzAFJlbW92ZUF0AEVsZW1lbnRBdABkb0l0AENvbmNhdABDb2x1bW5JbXBh
Y3QAZ3VkdXNvZnQuZ3NxbHBhcnNlci5kZW1vcy5jb2x1bW5JbXBhY3QAaW1wYWN0AGNvbHVtbk9i
amVjdABTZWxlY3QAc2VsZWN0AEluRGljdABPdXREaWN0AGpvaW5SZWxhdGlvblNldABnZXQAZ2V0
X0VuZE9mUm93c2V0AFNldEVuZE9mUm93c2V0AGlzTGVmdABvcF9JbXBsaWNpdABTcGxpdABleHBy
VmlzaXQAZ2V0X0RlZmF1bHQAZ2V0X0FuYWx5c2lzUmVzdWx0AGdldF9JbXBhY3RSZXN1bHQAZ2V0
U3ViU3RtdABjb2x1bW5UYWJsZVN0bXQAZ2V0X1ByZXBhcmFibGVTdG10AGl0ZXJhdGVTdG10AGFu
YWx5emVTdG10AGluU3RtdABnZXRfc3RyU3RtdABzZXRfc3RyU3RtdABnZXRfTGVmdFN0bXQAZ2V0
X1JpZ2h0U3RtdABnZXRfUGFyZW50U3RtdABndWR1c29mdC5nc3FscGFyc2VyLnN0bXQAWEVsZW1l
bnQAZ2V0RWxlbWVudABhbmFseXplU3RhdGVtZW50AFRVcGRhdGVTcWxTdGF0ZW1lbnQAVEJsb2Nr
U3FsU3RhdGVtZW50AFRDdXN0b21TcWxTdGF0ZW1lbnQAVFNlbGVjdFNxbFN0YXRlbWVudABUSW5z
ZXJ0U3FsU3RhdGVtZW50AFRDcmVhdGVWaWV3U3FsU3RhdGVtZW50AGltcGFjdFNxbEZyb21TdGF0
ZW1lbnQAc2VhcmNoSm9pbkZyb21TdGF0ZW1lbnQAcmVtb3ZlQ29tbWVudABFbnZpcm9ubWVudABY
RG9jdW1lbnQAVFRyaW1Bcmd1bWVudABnZXRfVHJpbUFyZ3VtZW50AFVzZXJDb21wb25lbnQAUGFy
ZW50Q29tcG9uZW50AFNjcmlwdENvbXBvbmVudABpblBhcmVudABnZXRfQ3VycmVudABQb2ludABz
ZXRfRm9udABzZXRfU2VsZWN0aW9uRm9udABnZXRfQ291bnQAc2V0X0NvbHVtbkNvdW50AEdGbXRP
cHQAc2VwdABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AFRyaW1TdGFydABJbnNlcnQAQ29u
dmVydABBZGRMYXN0AFRDVEVMaXN0AGdldF9MaXN0AFRQYXJzZVRyZWVOb2RlTGlzdABUVGFibGVM
aXN0AHRhYmxlTGlzdABUT2JqZWN0TmFtZUxpc3QAbmFtZUxpc3QAZ2V0X0N0ZUxpc3QAY2lMaXN0
AHFpTGlzdABUV2hlbkNsYXVzZUl0ZW1MaXN0AGdldF9XaGVuQ2xhdXNlSXRlbUxpc3QAVEpvaW5J
dGVtTGlzdABUVmlld0FsaWFzSXRlbUxpc3QAZ2V0X1ZpZXdBbGlhc0l0ZW1MaXN0AFRHcm91cEJ5
SXRlbUxpc3QAVE9yZGVyQnlJdGVtTGlzdABmaW5kQ29sdW1uc0Zyb21MaXN0AHNlYXJjaEpvaW5J
bkxpc3QAVFNvdXJjZVRva2VuTGlzdABUSm9pbkxpc3QAZ2V0X0NvbHVtbkxpc3QAVFJlc3VsdENv
bHVtbkxpc3QAZ2V0X1Jlc3VsdENvbHVtbkxpc3QAVEV4cHJlc3Npb25MaXN0AGdldF9FeHByZXNz
aW9uTGlzdABzZWFyY2hFeHByZXNzaW9uTGlzdABhZGRDb2x1bW5Ub0xpc3QAZ2V0X0V4cHJMaXN0
AGdldF9QYXJ0aXRpb25CeV9FeHByTGlzdABhbGlnbkFsaWFzSW5TZWxlY3RMaXN0AHN0bXRMaXN0
AFRTdGF0ZW1lbnRMaXN0AGdldF9PcmRlckJ5TGlzdABnZXRfQ29ubmVjdEJ5TGlzdABkaWN0X3N0
cl9saXN0AHBvc2lubGlzdABNaWNyb3NvZnQuU3FsU2VydmVyLlBpcGVsaW5lSG9zdABnZXRfRmly
c3QAUG9wRmlyc3QAU2V0T3V0AElucHV0MF9Qcm9jZXNzSW5wdXQAaW5wdXQAUHJpbWVPdXRwdXQA
TW92ZU5leHQAU3lzdGVtLlRleHQAQXBwZW5kVGV4dABnZXRfc3FsdGV4dABzZXRfc3FsdGV4dABH
ZXRWYWx1ZVdpdGhDb250ZXh0AFNjcmlwdENvbXBvbmVudEV2YWxDb250ZXh0AGdldF9FdmFsdWF0
b3JDb250ZXh0AGRndgBGaWxsaW5fRGF0YUdyaWRWaWV3AENsZWFyX0RhdGFHcmlkVmlldwB0cmFj
ZVZpZXcAQWRkUm93AElucHV0MF9Qcm9jZXNzSW5wdXRSb3cATmV4dFJvdwBEYXRhR3JpZFZpZXdS
b3cAY2hlY2tTeW50YXgAaWR4AEZpbmRJbmRleABSZWdleABjb2x1bW5QcmV4AFJpY2hUZXh0Qm94
AEZpbGxpbl9yaWNoVGV4dEJveABUR3JvdXBCeQBmaW5kQ29sdW1uc0Zyb21Hcm91cEJ5AFRPcmRl
ckJ5AGdldF9PcmRlckJ5AGdldF9vcmRlckJ5AFRvQXJyYXkAZ3JvdXBieQBvcmRlcmJ5AGNvbm5l
Y3RieQBnZXRfS2V5AHRoZUtleQBDb250YWluc0tleQBjb250YWluc0tleQBnZXRfU29ydEtleQBr
ZXkAU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeQBnZXRfQXNzZW1ibHkAZ2V0X0NvbHVtbk5h
bWVPbmx5AHNpbXBseQBJRGljdGlvbmFyeQBNZXJnZURpY3Rpb25hcnkAZ2V0X1N1YlF1ZXJ5AHdz
UGFkZGluZ1BhcmVudGhlc2VzT2ZTdWJRdWVyeQBzZWFyY2hTdWJRdWVyeQBmaW5kQ29sdW1uSW5T
dWJRdWVyeQBnZXRfQ29tYmluZWRRdWVyeQBnZXRfU3VicXVlcnkAc3VicXVlcnkARm9ybWF0dGVy
RmFjdG9yeQBHRm10T3B0RmFjdG9yeQBUUmVzdWx0RW50cnkARGljdGlvbmFyeUVudHJ5AG9wX0lu
ZXF1YWxpdHkASXNOdWxsT3JFbXB0eQAAABVnAHMAcQBsAHAAYQByAHMAZQByAABdQwA6AFwAVwBp
AG4AZABvAHcAcwBcAE0AaQBjAHIAbwBzAG8AZgB0AC4ATgBFAFQAXABGAHIAYQBtAGUAdwBvAHIA
awBcAHYANAAuADAALgAzADAAMwAxADkAXAAAL2cAdQBkAHUAcwBvAGYAdAAuAGcAcwBxAGwAcABh
AHIAcwBlAHIALgBkAGwAbAAAFV4AXAAoACgALgAqACkAXAApACQAAAMuAAAXQQBuAGEAbAB5AHoA
aQBuAGcAOgAgAAAJIAA8AC0AIAABAQAFeAAyAACAm0kAcwBOAHUAbABsACAAcAByAG8AcABlAHIA
dAB5ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAAQQBz
AHMAaQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAgAGkA
bgBzAHQAZQBhAGQALgAAD0kAbgBwAHUAdAAgADAAABFPAHUAdABwAHUAdAAgADAAABVDAG8AbgBu
AGUAYwB0AGkAbwBuAAA/YgBEAEYAVABfAEQAUwBHAFQAbwBvAGwAcwBfAFEAVQBFAFIAWQBfAEMA
VABFAF8AUwBRAEwAXwBSAEEAVwAAP2kARABGAFQAXwBEAFMARwBUAG8AbwBsAHMAXwBRAFUARQBS
AFkAXwBDAFQARQBfAFMAUQBMAF8AUgBBAFcAAEFsAHMAdABEAFMARwBUAE8ATwBMAFMAXwBRAFUA
RQBSAFkAXwBDAFQARQBfAFMAUQBMAF8ATwBVAFQAUABVAFQAAHFTAEMAXwAxADgAYgAzADgAOQAz
ADQANQBmAGIANgA0ADAAOQBlAGEAMgAzAGIAMwBkADYANwBkADUAZABkAGUAMQA3AGMALgBQAHIA
bwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAUvAHQAAAttAHMAcwBxAGwAAAdk
AGIAMgAAC20AeQBzAHEAbAAAD24AZQB0AGUAegB6AGEAABF0AGUAcgBhAGQAYQB0AGEAAA1vAHIA
YQBjAGwAZQAAEWkAbgBmAG8AcgBtAGkAeAAADXMAeQBiAGEAcwBlAAAVcABvAHMAdABnAHIAZQBz
AHEAbAAACWgAaQB2AGUAABNnAHIAZQBlAG4AcABsAHUAbQAAEXIAZQBkAHMAaABpAGYAdAAAB20A
ZAB4AAAtUwBlAGwAZQBjAHQAZQBkACAAUwBRAEwAIABkAGkAYQBsAGUAYwB0ADoAIAAABT8ALgAA
CSAAaQBuACAAAAMgAACA3VUAcwBhAGcAZQA6ACAAQwBvAGwAdQBtAG4ASQBtAHAAYQBjAHQAIABb
AC8AZgAgADwAcwBjAHIAaQBwAHQAIABmAGkAbABlAD4AXQAgAFsALwBkAF0ALwBbAC8AcwAgAFsA
LwB4AG0AbABdACAAWwAvAGMAXQBdAC8AWwAvAHYAXQAgAFsALwBvACAAPABvAHUAdABwAHUAdAAg
AGYAaQBsAGUAIABwAGEAdABoAD4AXQAgAFsALwB0ACAAPABkAGEAdABhAGIAYQBzAGUAIAB0AHkA
cABlAD4AXQAAXy8AcwA6ACAATwBwAHQAaQBvAG4ALAAgAGQAaQBzAHAAbABhAHkAIAB0AGgAZQAg
AGEAbgBhAGwAeQBzAGkAcwAgAHIAZQBzAHUAbAB0ACAAcwBpAG0AcABsAHkALgAAfy8AYwA6ACAA
TwBwAHQAaQBvAG4ALAAgAGQAaQBzAHAAbABhAHkAIAB0AGgAZQAgAGEAbgBhAGwAeQBzAGkAcwAg
AHIAZQBzAHUAbAB0ACAAcwBpAG0AcABsAHkAIABpAG4AIABjAG8AbAB1AG0AbgAgAGwAZQB2AGUA
bAAuAABlLwBkADoAIABPAHAAdABpAG8AbgAsACAAZABpAHMAcABsAGEAeQAgAHQAaABlACAAYQBu
AGEAbAB5AHMAaQBzACAAcgBlAHMAdQBsAHQAIABpAG4AIABkAGUAdABhAGkAbAAuAACAty8AeABt
AGwAOgAgAE8AcAB0AGkAbwBuACwAIABlAHgAcABvAHIAdAAgAHQAaABlACAAYQBuAGEAbAB5AHMA
aQBzACAAcgBlAHMAdQBsAHQAcwAgAHQAbwAgAFgATQBMACAAZgBvAHIAbQBhAHQALAAgAGkAdAAn
AHMAIAB2AGEAbABpAGQAIABvAG4AbAB5ACAAaQBmACAALwBzACAAaQBzACAAcwBwAGUAYwBpAGYA
aQBlAGQAAVEvAHYAOgAgAE8AcAB0AGkAbwBuACwAIAB0AHIAYQBjAGUAIABkAGEAdABhACAAbABp
AG4AZQBhAGcAZQAgAGkAbgAgAHYAaQBlAHcAcwAuAAB1LwBvADoAIABPAHAAdABpAG8AbgAsACAA
dwByAGkAdABlACAAdABoAGUAIABvAHUAdABwAHUAdAAgAHMAdAByAGUAYQBtACAAdABvACAAdABo
AGUAIABzAHAAZQBjAGkAZgBpAGUAZAAgAGYAaQBsAGUALgAAgMcvAHQAOgAgAE8AcAB0AGkAbwBu
ACwAIABzAGUAdAAgAHQAaABlACAAZABhAHQAYQBiAGEAcwBlACAAdAB5AHAAZQAuACAAUwB1AHAA
cABvAHIAdAAgAG8AcgBhAGMAbABlACwAIABtAHkAcwBxAGwALAAgAG0AcwBzAHEAbAAgAGEAbgBk
ACAAZABiADIALAAgAHQAaABlACAAZABlAGYAYQB1AGwAdAAgAHQAeQBwAGUAIABpAHMAIABvAHIA
YQBjAGwAZQAAgxdTAEUATABFAEMAVAAgAGUALgBsAGEAcwB0AF8AbgBhAG0AZQAgAEEAUwAgAG4A
YQBtAGUALAAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIABlAC4AYwBvAG0AbQBpAHMAcwBpAG8AbgBfAHAAYwB0ACAAYwBvAG0A
bQAsAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgAGUALgBzAGEAbABhAHIAeQAgACoAIAAxADIAIAAiAEEAbgBuAHUAYQBsACAA
UwBhAGwAYQByAHkAIgAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIABGAFIATwBNACAAcwBjAG8AdAB0AC4AZQBtAHAAbABvAHkA
ZQBlAHMAIABBAFMAIABlAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFcASABFAFIARQAgAGUALgBzAGEAbABhAHIAeQAgAD4A
IAAxADAAMAAwACAAbwByACAAMQA9ADEACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATwBSAEQARQBSACAAQgBZAAoAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
AGUALgBmAGkAcgBzAHQAXwBuAGEAbQBlACwACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAZQAuAGwAYQBzAHQAXwBuAGEAbQBl
ADsAAAUvAHYAAAUvAHMAAAkvAHgAbQBsAAAFLwBjAAAFLwBvAAAFLwBmAACAmw0ACgBZAG8AdQAg
AGMAYQBuACAAYQBkAGQAIAAvAHMAIABkAGkAcgBlAGMAdABpAHYAZQAgAHQAbwAgAGQAaQBzAHAA
bABhAHkAIAB0AGgAZQAgAGEAbgBhAGwAeQBzAGkAcwAgAHIAZQBzAHUAbAB0ACAAaQBuACAAYQAg
AHMAaQBtAHAAbABlACAAZgBvAHIAbQBhAHQALgAABQoAKwAABQ0ACgAAAwoAAAMqAAAJLQAtAD4A
IAABEygAYQBsAGkAYQBzACkADQAKAAAdLQAtAD4AIABXAEkAVABIACAAQwBUAEUADQAKAAElLQAt
AD4AIABXAGgAZQByAGUAIABDAGwAYQB1AHMAZQANAAoAAS8tAC0APgAgAEMAbwBuAG4AZQBjAHQA
IABCAHkAIABDAGwAYQB1AHMAZQANAAoAAS8tAC0APgAgAFMAdABhAHIAdAAgAFcAaQB0AGgAIABD
AGwAYQB1AHMAZQANAAoAASstAC0APgAgAE8AcgBkAGUAcgAgAEIAeQAgAEMAbABhAHUAcwBlAA0A
CgABFS0ALQA+ACAASgBvAGkAbgANAAoAARMoAFcAaABlAHIAZQApAA0ACgAAHSgAQwBvAG4AbgBl
AGMAdAAgAEIAeQApAA0ACgAAHSgAUwB0AGEAcgB0ACAAVwBpAHQAaAApAA0ACgAAGSgATwByAGQA
ZQByACAAQgB5ACkADQAKAAARKABKAG8AaQBuACkADQAKAAAZKABnAHIAbwB1AHAAIABiAHkAKQAN
AAoAAG8gAFsAZwB1AGQAdQBzAG8AZgB0ACAAYwBhAG4AJwB0ACAAcABhAHIAcwBlACAAcQB1AGUA
cgB5ACAAaQBuACAAUQBTAFIAXwBTAFEATAAsACAAQwBUAEUAIABuAG8AdAAgAGYAbwB1AG4AZABd
AAEfWwBDAFQARQAgAG4AbwB0ACAAZgBvAHUAbgBkAF0AAFNbAEkAbgB2AGEAbABpAGQAIABxAHUA
ZQByAHkAIABpAG4AIABRAFMAUgBfAFMAUQBMACwAIABDAFQARQAgAG4AbwB0ACAAZgBvAHUAbgBk
AF0AAAcxAC4AMAAAC3UAdABmAC0AOAABBW4AbwAAJWMAbwBsAHUAbQBuAEkAbQBwAGEAYwB0AFIA
ZQBzAHUAbAB0AAAfcgB0AD0AdgBXAGgAZQByAGUACQB2AGkAZQB3AD0AAA8JAHcAaABlAHIAZQA9
AAAFLAAgAAAfcgB0AD0AdgBUAGEAYgBsAGUACQB2AGkAZQB3AD0AABEJAHQAYQBiAGwAZQBzAD0A
AB1yAHQAPQB2AEoAbwBpAG4ACQB2AGkAZQB3AD0AAA0JAGoAbwBpAG4APQAAGXIAdAA9AGMAbwBs
AAkAdgBpAGUAdwA9AAARCQBjAG8AbAB1AG0AbgA9AAADCQAAD3MAbwB1AHIAYwBlAD0AABdlAHgA
cAByAGUAcwBzAGkAbwBuAD0AAAksAFwAcwAqAAAJXABzACoALAAAAywAABsgAGQAZQBwAGUAbgBk
AHMAIABvAG4AOgAgAAAZdABhAHIAZwBlAHQAQwBvAGwAdQBtAG4AAAthAGwAaQBhAHMAABVjAG8A
bwByAGQAaQBuAGEAdABlAAAJbgBhAG0AZQAAGXMAbwB1AHIAYwBlAEMAbwBsAHUAbQBuAAALdwBo
AGUAcgBlAAAVYwBvAG4AbgBlAGMAdAAgAGIAeQAAFXMAdABhAHIAdAAgAHcAaQB0AGgAABFvAHIA
ZABlAHIAIABiAHkAAAlqAG8AaQBuAAANcwBlAGwAZQBjAHQAABFnAHIAbwB1AHAAIABiAHkAAA1j
AGwAYQB1AHMAZQAAE3QAYQBiAGwAZQBOAGEAbQBlAAAVdABhAGIAbABlAE8AdwBuAGUAcgAAM2UA
bgBkACAAcQB1AGUAcgB5ACAAbgBvAG4ALQBDAFQARQAgAGMAbwBsAHUAbQBuAHMAAQM7AAANcgBv
AHcAbgB1AG0AAAtyAG8AdwBpAGQAAA9uAGUAeAB0AHYAYQBsAAAPcwB5AHMAZABhAHQAZQAAEw0A
CgBTAGUAYQByAGMAaAAgAAAVIAA8ADwAYwBvAGwAdQBtAG4AXwAABT4APgAAFSAAPAA8AEcAVQBF
AFMAUwA+AD4AAAtjAG8AdQBuAHQAAAdzAHUAbQAAFXIAbwB3AF8AbgB1AG0AYgBlAHIAAC8tAC0A
PgAgAGEAZwBnAHIAZQBnAGEAdABlACAAZgB1AG4AYwB0AGkAbwBuACAAARUtAC0APgAgAHQAYQBi
AGwAZQAgAAEVUgBPAFcAXwBOAFUATQBCAEUAUgAAAyIAAANbAAADXQAADUkAUwBOAFUATABMAACA
x1UAcwBhAGcAZQA6ACAAagBvAGkAbgBSAGUAbABhAHQAaQBvAG4AQQBuAGEAbAB5AHoAZQAgAFsA
LwB0ACAAPABzAHEAbAAgAHMAYwByAGkAcAB0ACAAZgBpAGwAZQAgAHAAYQB0AGgAPgBdACAAWwAv
AHQAIAA8AGQAYQB0AGEAYgBhAHMAZQAgAHQAeQBwAGUAPgBdACAAWwAvAG8AIAA8AG8AdQB0AHAA
dQB0ACAAZgBpAGwAZQAgAHAAYQB0AGgAPgBdAACAgS8AZgA6ACAATwBwAHQAaQBvAG4ALAAgAHMA
cQBsACAAcwBjAHIAaQBwAHQAIABmAGkAbABlACAAcABhAHQAaAA6ACAAVABoAGUAIABzAHEAbAAg
AGYAaQBsAGUAIAB3AGkAbABsACAAYgBlACAAYQBuAGEAbAB5AHoAZQBkAC4AAICtLwBvADoAIABP
AHAAdABpAG8AbgAsACAAbwB1AHQAcAB1AHQAIABmAGkAbABlACAAcABhAHQAaAA6ACAATwBwAHQA
aQBvAG4ALAAgAHcAcgBpAHQAZQAgAHQAaABlACAAYQBuAGEAbAB5AHMAaQBzACAAcgBlAHMAdQBs
AHQAIAB0AG8AIAB0AGgAZQAgAHMAcABlAGMAaQBmAGkAZQBkACAAZgBpAGwAZQAuAACDo3MAZQBs
AGUAYwB0ACAAYQAuAGkAZAAsACAAYgAuAG4AYQBtAGUALAAgAGMALgBuAG8ACgAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgAGYAcgBvAG0AIABlAG0AcAAgAGEALAAgAGQAZQBwAHQAIABiACwAIABvAHIA
ZABlAHIAIABjACwACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACgAcwBlAGwAZQBjAHQAIABhADEA
LgBuAG8ALAAgAGIAMgAuAGMAdQBzAHQAaQBkAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABmAHIA
bwBtACAAYwB1AHMAdABvAG0AZQByACAAYQAxACwAIABwAHIAbwBkAHUAYwB0ACAAYgAyAAoAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAB3AGgAZQByAGUAIABhADEALgBpAGQAIAA9ACAAYgAyAC4AYwB1
AHMAdABpAGQAKQAgAGQACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAHcAaABlAHIAZQAgAGEALgBp
AGQAIAA9ACAAYgAuAGkAZAAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAYQBuAGQAIABiAC4AaQBk
ACAAPQAgAGMALgBuAG8ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGEAbgBkACAAYwAuAG4AbwAg
AD0AIABkAC4AbgBvAACDG1cASQBUAEgAIABQAGUAcgBzAG8AbgBDAFQARQAoAEIAdQBzAGkAbgBl
AHMAcwBFAG4AdABpAHQAeQBJAEQALAAgAEYAaQByAHMAdABOAGEAbQBlACwAIABMAGEAcwB0AE4A
YQBtAGUAKQAgAEEAUwAoAFMARQBMAEUAQwBUACAAUABlAHIAcwBvAG4ALgBCAHUAcwBpAG4AZQBz
AHMARQBuAHQAaQB0AHkASQBEACwAIABGAGkAcgBzAHQATgBhAG0AZQAsACAATABhAHMAdABOAGEA
bQBlACAARgBSAE8ATQAgACAAIABQAGUAcgBzAG8AbgAuAFAAZQByAHMAbwBuACAAVwBIAEUAUgBF
ACAAIABMAGEAcwB0AE4AYQBtAGUAIABMAEkASwBFACAAJwBDACUAJwApACwAIABQAGgAbwBuAGUA
QwBUAEUAKABCAHUAcwBpAG4AZQBzAHMARQBuAHQAaQB0AHkASQBEACwAIABQAGgAbwBuAGUATgB1
AG0AYgBlAHIAKQAgAEEAUwAoAFMARQBMAEUAQwBUACAAQgB1AHMAaQBuAGUAcwBzAEUAbgB0AGkA
dAB5AEkARAAsACAAUABoAG8AbgBlAE4AdQBtAGIAZQByACAARgBSAE8ATQAgACAAIABQAGUAcgBz
AG8AbgAuAFAAZQByAHMAbwBuAFAAaABvAG4AZQApACAAUwBFAEwARQBDAFQAIABGAGkAcgBzAHQA
TgBhAG0AZQAsACAATABhAHMAdABOAGEAbQBlACwAIABQAGgAbwBuAGUATgB1AG0AYgBlAHIAIABG
AFIATwBNACAAUABlAHIAcwBvAG4AQwBUAEUAIABJAE4ATgBFAFIAIABKAE8ASQBOACAAUABoAG8A
bgBlAEMAVABFACAATwBOACAAUABlAHIAcwBvAG4AQwBUAEUALgBCAHUAcwBpAG4AZQBzAHMARQBu
AHQAaQB0AHkASQBEACAAPQAgAFAAaABvAG4AZQBDAFQARQAuAEIAdQBzAGkAbgBlAHMAcwBFAG4A
dABpAHQAeQBJAEQAAV9KAG8AaQBuAFQAYQBiAGwAZQAxAAkASgBvAGkAbgBDAG8AbAB1AG0AbgAx
AAkASgBvAGkAbgBUAGEAYgBsAGUAMgAJAEoAbwBpAG4AQwBvAGwAdQBtAG4AMgANAAoAAAM6AAAt
cwBlAGEAcgBjAGgARgBpAGUAbABkAHMAIABvAGYAIAB0AHkAcABlADoAIAAALSAAbgBvAHQAIABp
AG0AcABsAGUAbQBlAG4AdABlAGQAIAB5AGUAdAANAAoAABcsACAAYwBvAGwAdQBtAG4AcwAgACgA
AAMpAAAPVgBlAHIAZABhAG4AYQAAH2UAbgBkAHEAdQBlAHIAeQBfAG4AbwBuAEMAVABFAAAHKQA7
ACAAAAU7ACAAAD0gACwAIABlAG4AZAAgAHEAdQBlAHIAeQAgAG4AbwBuAC0AQwBUAEUAIABjAG8A
bAB1AG0AbgBzACAAWwABN2UAbgBkACAAcQB1AGUAcgB5ACAAbgBvAG4ALQBDAFQARQAgAGMAbwBs
AHUAbQBuAHMAIABbAAEHXABzACsAAEBE7/bLYShJtNtMG4oFzPsABCABAQgDIAABBSABARERBCAB
AQ4GIAEBEYCZBxUSgbEBHgAHFRKBsQETAAUAABKBvQUgAgEcGAYgAQESgcEDIAAOBCABAg4FAAIO
Dg4FAAESQQ4EBwESTQQAABJNAgYCBAYRgdEEBhGB1QQGEYHZBAYRgd0HAAIOEjkSTQcgAgEOEYHp
BiABEoHtDgUgABKB8QYgARKB9QgMBwYSOQgSURJVCBJoBSABARFdAyAACAUgABKB/QUgARJRCAQG
EoDpBSABElUIBSAAEYD5BgADDg4ODgUgABKA8QYVEj0BEmgFIAEBEwAOBwgIElUOEmwIElkSbAgE
BhGCBQUAAQ4dHAQAAQEOBCAAElkFIAIOAwMFIAASgS0GFRI9ARJsBSAAEoExBSABElkIAyAAAg8H
CQgSVQ4SbA4IElkSbAgEIAARXQYVEYDlAQI5BxMRXQgdBQ4IFRIsAg4SUQ4VEmECDhUSPQEOFRI9
AQ4VEmECDhUSPQEOFRI9ARJcCAgODggODhJlAyAACQQAAQgJBiACHQUICAUAABKBWQUgAQ4dBQcV
EiwCDhJRChUSYQIOFRI9AQ4FFRI9AQ4GFRI9ARJcBSABEwAIBAABCAgEAAECDgUgAR0FDgUgAQEd
BQQAABJlBwcDHQUSbQgGIAEdBR0FBCABDg4FIAESbQ4GFRI9ARJgCSADARJ5HQgSfQMGEnkDBh0I
BCABCAgFIAIBCBwEIAECCAQgARwIByACAg4Rgh0FIAEdCAgDBwEIBgACCBJ9DgUgABKCIQUgABKC
JQYgARKCKQ4FIAASgIkFIAASgi0GIAESgjEcBQAAEoI1BiABHBKCOQQgAQEcCAABEoJBEYJFBCAA
EkEGIAIBDhJBBAcBEV0FBwIIEV0KIAEBFRKCSQETAAUgAQgTAAgVEiwCEwATARUGFRJhAhMAFRKA
qQEVEoCtAhMBEwAUFRJhAhMAFRKAqQEVEoCtAhMBEwAGIAETARMADhUSgKkBFRKArQITARMABCAA
EwAJFRKArQITARMABSABAhMADwYVEoCxARUSgK0CEwETAA4VEoCxARUSgK0CEwETAAogAQEVEoCp
ARMAEBACAhUSgK0CHgAeAR4AHgEGCgITARMAByACARMAEwEQBwEVEoCpARUSgK0CEwETAAkgABUS
gKkBEwAEIAATAQsgABUSgLUCEwATAQcHAxFdEjkICwcHCBJVDggSWQ4IBSAAEYJRBxUSPQESgIAG
FRI9ARJ8DBUSLAIOFRIsAhJRAggVEiwCElERcA0VEiwCDhUSgLkBEoCEGQcMDhUSgLkBDgICAgIO
CBKAyRFdEoDNEjQGFRKAuQEOBgABARKCVRMHBRKAgBUSPQESgN0IEoDdEoDhBSACDg4OBSAAEoE9
CSAAFRI9ARKA3QcVEj0BEoDdBSAAEoJdIAcMEoCAFRI9ARKA3Q4SgOEIEoDdEoDhDhKA6QgSVRJ4
AgYKBxUSgK0CCgoHIAIIDhGCHQUgAg4ICAQgAQ4IBhUSgmUBDgkHAxKA7QgSgOEFIAASgO0GIAES
gOEIBQcCEm0IBCAAElEKBwEVEoC5ARKAgBwHCgIVEiwCElECAhKA4QgSgOESgIAIEoDhEoCABxUS
LAISUQIFIAASgNkFIAARgTkEIAECHAcABA4ODg4ODQcGAhUSgPUBDg4IDg4GFRKCSQEOCSAAFRKA
9QETAAYVEoD1AQ4IIAUCDg4ODg4dBxACEoDpElUSURFwCBJVEYD5EngODggOEoDxAggFAAEOHQ4I
FRKCZQESgIReBxkVEiwCEoDZEXASgPESgP0IEoDZCAgSgQEIEoDZEoEFEoEJCBKA2QgSgQEIEoDZ
FRGBDQISgNkVEoCpARUSgK0CEXASgNkSgNkRcBUSgPUBEoCAEoCAFRKA9QEODgkVEiwCEoDZEXAF
IAASgP0FIAASgQkGIAESgmkIBSAAEoJtBSAAEoJxCSAAFRI9ARKCdQcVEj0BEoJ1BAYSgnkGIAES
gQEIBSAAEoJ9BiABEoKBCBcgABUSgLUCEwAVEoCpARUSgK0CEwETABcVEoC1AhKA2RUSgKkBFRKA
rQIRcBKA2QsgABURgQ0CEwATARcVEYENAhKA2RUSgKkBFRKArQIRcBKA2QgVEoJJARKAgAgVEoD1
ARKAgBkHBwgSgREVEoC5ARKAgAgSgIAVEoD1AQ4OBSAAEoKFBSAAEoKJBiABEoERCAQAAQgOCBUS
gmUBEoCACBUSgLkBEoCAEgcFCBwSgNkVEoD1ARKAgBKAgAYgARKA3QgFBwIIElEHFRKCZQESfAcH
BAIIElEOBgcDCAgSUSUHBxUSLAIOElEVEmECDhUSPQEOFRI9AQ4OFRJhAg4VEj0BDg4OgLsHNxKA
wRKAxRKBHQgSURUSLAIODhUSLAIODhKBIRUSgPUBDhKA8RUSgLkBElUSbRUSgLkBDggVEoC5AQ4I
AggICBUSgPUBEnwSfBUSgLkBDhUSgPUBEoCEEoCEEoCADg4ODg4OEnwVEoC5AQ4VEoC5AQ4SgIQO
CBJ8EoDFFRIsAg4SgIgVEoD1AQ4SgIQOEoCIFRKAuQEVEoCtAgoKFRKAuQEVEoCtAgoKEoCICBFw
EoDFEm0SbRJtEoElBiADAQ4ODgYgAQESgR0GAAESgo0OBiABARKCjQQgABJtBhUSPQESVQcVEoJl
ARJVBxUSgLkBElUGFRIsAg4OBxUSgkkBEnwHFRKA9QESfAgVEoJJARKAhAgVEoD1ARKAhAUgABKC
lQUgABKCmQcVEoC5ARJ8BiABEoKdCAQgAQgDBAABDg4SFRKAtQIOFRKAqQEVEoCtAg4OEhURgQ0C
DhUSgKkBFRKArQIODgcgAgESgo0cBgADDhwcHAgVEiwCDhKAiAcVEoJlARFwEhUSLAIRcBUSgLkB
FRKArQIKCgsVEj0BFRKArQIKCgwVEoJlARUSgK0CCgoUFRKAtQIOFRKAqQEVEoCtAhKAiA4UFRGB
DQIOFRKAqQEVEoCtAhKAiA4HFRKAuQERcAkgAgESglURgqUFBwIIElUzBwkVEoCpARUSgK0CElEO
FRGBKQEVEoCtAhJRDhUSgK0CElEOElESgO0OFRI9AQ4IEoDhECAAFRKAqQEVEoCtAhMBEwANFRKA
qQEVEoCtAhJRDgkgABUSgLEBEwANFRKAsQEVEoCtAhJRDgkgABURgSkBEwANFRGBKQEVEoCtAhJR
DggVEoCtAhJRDhIHBhKA7RKBMQ4VEj0BDggSgOEGIAEdDh0DEBABARUSPQEeABUSgkkBHgADCgEO
EwcHEoDtEoExDhUSPQEOCBKA4Q4FIAAdEwAGAAIODh0OBhUSYQIODhEHCQgIEoE1CAgSgS0ICBKB
LQUgABKBNQYgARKBLQgwBxgSXBJgDhJQCAgSgTUICBKBLQ4IFRI9AQ4ICAgSgS0OCBUSPQEOCB0O
FRI9AQ4IBSABDh0DCyAAFRKCsQITABMBDRABAh4AFRKCSQEeAAgHCgEVEj0BDgUVEj0BCAkgAh0O
HQ4RgrUHFRKBXQIODhoQAgIVEoJJAR4BFRKCSQEeABUSgV0CHgAeAQQKAg4OBwcDCAgSgS0PBwIV
EoC5ARUSgK0CCgoIDBUSgLkBFRKArQIKCgcHAxKA8QgICAcEEoDxCAgIZAciAhGBORKAgAISfBKA
8RUSgLkBEoDxEnwVEoC5ARKAgBJ8EoE9CBKBPQgSgNkSgT0SgIASgOkIElUSeBUSgPUBEoCAEoCA
EoCAEoFBCAgIEoDZEoCAFRKArQIKCggSgNkSgRkDBhFdBSACAQgIBxUSPQESgIQHFRI9ARKA8QgV
EoC5ARKA8QgVEoJlARKA8QUgABKBQQUgABKBYQYgARKA2QgFIAASgsEEBwESeAsHAxUSgLkBDhJt
CBAHBw4VEj0BDh0OCA4SbRJtDAcDCBUSgPUBElESUQcVEoJJARJRBxUSgPUBElEFBwISPAgHFRKC
ZQESUQcVEoC5ARJRBhUSPQESUSgHDhKA2RKA2RKA2RKA2RKBYQgSgUEIEoEZEoDxEoDZEoDZEoFR
EoDxBiABARKBSQUgABKBZQUgABKBUSEHDBKA2RKA2RI8EoFlEoFRCBKA2RI8EoDZEjwSgPESgPEH
FRKBcQESPAYgARKCxQgJBwMSgWkIEoE9BAYSgWkCBggGIAESgT0IEQcGCBKA4RJAFRKA9QEODhI8
EwcDCBUSgLkBEoDZFRKA9QESgNkHFRI9ARKA2QgVEoJlARKA2QgVEoJJARKA2QgVEoD1ARKA2RMH
BxUSPQEOCA4SgXUSgMkSgM0OCiADAQ4RgskRgs0GIAEBEoLRBhUSPQESPAQHARI5LQcOCBJRFRGB
eQESPBI8Dg4ODhUSgLkBHQ4VEoD1AR0OHQ4VEoD1AR0OHQ4SPAcVEoJlARI8CSAAFRGBeQETAAcV
EYF5ARI8BxUSgkkBHQ4HFRKA9QEdDgYHAggSgS0FIAIBHBwZBwsSgPEIEoDhEoF9CBKBgQgSgYUI
CBKA4QoHBAgSgQEIEoDZGQcHFRKAuQEdDhUSgPUBElESURJVDhwSgPEGFRI9AR0OBxUSgmUBHQ4E
IAEcHAUHARKA8Q4HBhJVDggSgOERgTkSQAkHAxKBiQISgY0FIAASgtkFIAASgYkDIAAcEAcGEYE5
EoFBCBKA2Q4SgRkGBwIIEoDZEQcFEoDxEoFtEoGJEoDZEoGNEgcJEoDpElUOCBJVEYD5EkQODgYH
AggSgOEQBwcSQBKA2Q4SgOkIElUSRAQHARJEEQcJCgoKDhKBkRGBlQoOEoGNBSAAEoGRAyAACgoA
Ag4OFRKCSQEOEgcDDhURgZkBFRI9AQ4VEj0BDhUVEoFdAhURgbUCDhUSPQEOFRI9AQ4SCgIVEYG1
Ag4VEj0BDhUSPQEOCRUSPQEVEj0BDgkgABURgZkBEwAKFRGBmQEVEj0BDgoHBAgVEj0BDg4OAwAA
DgggAwEODBGC7QYgAQESgukFAAARgvEGIAEBEYLxEQcHEoGpCAgOFRI9AQ4OEoGtBCABAQIGIAEB
EoGpBSAAEoL1BiABEoL5CAUgABKC/QYgARKBrQgFIAASgwUGIAESgwkIBiABCBKBrQYgAQERgw0U
BwgSgakICA4VEj0BDg4Sga0Sga0cBw4SgakICA4VEj0BDg4Sga0ODhKBrQgODhKBrQUAAgIODgoH
BAgOFRI9AQ4ODAcGDggVEj0BDg4ODgsHBQ4IFRI9AQ4ODgcgAhKDCQgIBQACDhwcDAcGDg4IFRI9
AQ4ODgkABA4ODg4RgekMBwIVEoCYAh4AHgEICRUSgJgCHgAeAQoGFRGBtQITABMBDCABAhURgbUC
EwATAQ4VEoMVARURgbUCHgAeAQ0VEj0BFRGBtQIeAB4BCiABCBUSgxUBEwAGIAIBCBMACBUSYQIe
AB4BCQcDEoGJHBKBjRcHBQgVEoC5ARKA2RwVEoD1ARKA2RKA2TgHFBKA2RKBQRKA2RKA2RKA2RKA
2RKBTQgSgNkSgQkIEoDZCBKA2RKBGRKBGRKBGRKA2RKA2RKBUQUgABGDGQUgABKDHQUgABKBTQUg
ABKDIQUgABKDJQsHBBUSgLkBDggODgYVEj0BEXAFIAEBEm0LFRGBtQIOFRI9AQ4EBwETAAkVEYG1
AhMAEwEJFRKAmAITABMBAhMACLd6XFYZNOCJCImEXc2AgMyRCCsv1nalCm1DCLA/X38R1Qo6BAAA
AAAEAQAAAAQCAAAABAMAAAAEBAAAAAQFAAAABAYAAAAEBwAAAAMGEjkHBhUSPQESaAcGFRI9ARJs
BwYVEj0BEmADBhIYAwYSHAMGEhAEBhKAhQQGEoCRBAYSgJUDBhIkCQYVEoC5ARKAgAgGFRKAuQES
fAMGEm0IBhUSLAIOElENBhUSLAIOFRIsAhJRAgkGFRIsAhJREXACBg4OBhUSLAIOFRKAuQESgIQE
BhKAvQMGElEHBhUSPQESXAMGETgIBhUSgLkBElEHBhUSgLkBDgQGEoDZAwYSTAQGEoFtCAYVEoFx
ARI8CAYVEoC5ARI8BgYVEj0BCAYGFRI9AQ4DBhFwAwYSNAMGEnwEBhGBVQgGFRKArQIKCgMGElUE
BhKAgAgGFRKAuQERcBMGFRIsAhFwFRKAuQEVEoCtAgoKBAYSgJAIBhUSgV0CDg4EBhKAlBYGFRKB
XQIVEYG1Ag4VEj0BDhUSPQEOBwACEkEcEkkFIAEOEjkFAAIBDg4FAAEBElEHIAIBElEQDgUgAQES
DAYAAg4SZQ4DAAABBSAAEoCBBiABARKAgQkgBAEIDhJ5En0LIAQBCB0IHRJ5En0GIAEBEoCFBQAA
EoCRBQAAEoCVBgABARKAlQQAABIkBgABEV0dDggAAhFdHQ4RXQUAAQEdDhIgBhKAgBKA2RJREoDZ
AhFwEnwIIAAVEj0BElwJIAEBFRI9ARJcCCAAFRI9ARJgCSABARUSPQESYBQgBAESgM0RXRURgOUB
AhURgOUBAhcgBQESgM0RXRURgOUBAhURgOUBAhKAvRIgBAEOEV0VEYDlAQIVEYDlAQIVIAUBDhFd
FRGA5QECFRGA5QECEoC9DiAGARKAzRFdAgICEoC9DyAHARKAzRFdAgICAhKAvRYgBgEOEV0VEYDl
AQIVEYDlAQICEoC9DSAHAQ4RXQICAgISgL0OIAQSgIASgNkSURFwEnwIIAISgOESUQ4FIAIODggO
IAISURUSLAISURFwElESIAQVEoC5ARKAgBKA2RJRCBFwFCAFFRKAuQESgIASgNkSUQgRcBJ8FSAG
FRKAuQESgIASgNkSUQgCEXASfA8gBAISgPEOCBUSgK0CCgoRIAUCEoCAElEIDhUSgK0CCgoKIAQC
EoCADhJRCAwgBQISgIAOElEIEXAFIAEOElUGIAIBElEICyAEARJRCBKBGRFwCiAAFRKAuQESgIAL
IAECEBUSLAIOElEeIAQCEBUSLAIOElEQDhAVEmECDhUSPQEOEBUSPQEOGCADAhAVEiwCDhJREA4Q
FRJhAg4VEj0BDg0gAgIQFRIsAg4SURAODSACARKA8RUSgLkBElUVIAIBFRIsAg4SURAVEmECDhUS
PQEOESACARKBLRAVEmECDhUSPQEODSACARKBLRAVEmECDg4QIAIBElEQFRJhAg4VEj0BDhIgAwES
URAVEmECDhUSPQEOEA4FIAEBElELIAIBFRKAuQEOElUKIAMBEoCIEXASbQsgBAISfBKA4RJRCA4g
AgESgPEVEoC5ARKA8QYgARJ4ElUJAAEVEoC5AQ4OCiADARJMEoDZElEGIAECEYE5BiABDhKA2Qcg
AgISgN0CCSACARKA2RKA2QggARKBPRKBPQ4gAwESPBKA8RURgOUBAgggAgESgRkSUQUgABKBbQkg
ABUSgLkBEjwGIAIBDhFdCCACARKAzRFdBSABARI5BiABARKA8RIgAxUSgLkBHQ4ODhUSgLkBElEN
IAMBFRKAuQEdDhJVDhAgBAEVEoC5AR0ODhJREoDxFyAFARUSgLkBHQ4SgPEODhUSgLkBEoDxByAC
AhKBbQ4IIAIBEoDhElEIIAIBElESgRkJIAISQBKA4RJRBiABEkQSVQggAgESgNkSUQkAAg4OFRI9
AQ4OAAIODhUSYQIOFRI9AQ4QAAIBEoGdFRJhAg4VEj0BDhEAAwESgZ0VEmECDhUSPQEODhIAAwES
gaEVEmECDhUSPQEOHQ4TAAQBEoGhFRJhAg4VEj0BDg4dDhgABQESgaEVEmECDhUSPQEODhUSPQEO
HQ4QAAMBFRJhAg4VEj0BDg4QDhUABAEVEmECDhUSPQEOFRI9AQ4OEA4VAAQBFRJhAg4VEj0BDg4Q
DhUSPQEOEQADARKBoRUSYQIOFRI9AQ4IFgAEARKBoRUSYQIOFRI9AQ4VEj0BDggXAAUBEoGhFRJh
Ag4VEj0BDhUSPQEOCA4GAAEBEoGhGhACAgEVEj0BFRGBtQIeAB4BFRGBtQIeAB4BEBACAwEVEmEC
HgAeAR4AHgEJAAIBEoG5EoG5GiAJARI0EjQSgNkVEoC5ARKAgBJRCAIRcBJ8BSABARI0EiAGARI0
ElUODhFwFRKArQIKChQgBgESNBJVEoCADhFwFRKArQIKCgggAgESVRKAgAUgABKBWRIgARUSPQEO
FRGBtQIOFRI9AQ4DKAAIAygAAgUoABKAgQMoAA4FKAASgIkDKAAcBQgAEoCRBQgAEoCVBAgAEiQG
KAETARMAFygAFRKAtQITABUSgKkBFRKArQITARMAECgAFRKAqQEVEoCtAhMBEwAIKAAVEj0BElwI
KAAVEj0BEmAKKAAVEoC5ARKAgAUoABKBbQkoABUSgLkBEjwFKAASgVkIAQAIAAAAAAAeAQABAFQC
FldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NDXzE4YjM4OTM0NWZiNjQwOWVh
MjNiM2Q2N2Q1ZGRlMTdjAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTkAAEcBABouTkVURnJh
bWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdv
cmsgNAkBAARJdGVtAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJj
ZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJs
aWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291
cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAA4WgEAAAAAAAAAAABSWgEAACAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAARFoBAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUA
IAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAw
AACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGABAOwDAAAAAAAAAAAAAOwDNAAAAFYAUwBfAFYA
RQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/AAAAAAAA
AAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQA
AABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARMAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABl
AEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMA
AAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBE
AGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADEAOABiADMAOAA5ADMANAA1AGYAYgA2ADQA
MAA5AGUAYQAyADMAYgAzAGQANgA3AGQANQBkAGQAZQAxADcAYwAAADAACAABAEYAaQBsAGUAVgBl
AHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEA
bQBlAAAAUwBDAF8AMQA4AGIAMwA4ADkAMwA0ADUAZgBiADYANAAwADkAZQBhADIAMwBiADMAZAA2
ADcAZAA1AGQAZABlADEANwBjAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkA
ZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADkAAAAqAAEAAQBMAGUAZwBh
AGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkA
bABlAG4AYQBtAGUAAABTAEMAXwAxADgAYgAzADgAOQAzADQANQBmAGIANgA0ADAAOQBlAGEAMgAz
AGIAMwBkADYANwBkADUAZABkAGUAMQA3AGMALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQA
TgBhAG0AZQAAAAAAUwBDAF8AMQA4AGIAMwA4ADkAMwA0ADUAZgBiADYANAAwADkAZQBhADIAMwBi
ADMAZAA2ADcAZAA1AGQAZABlADEANwBjAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkA
bwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBv
AG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAFABAAwAAABkOgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAA=]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_18b389345fb6409ea23b3d67d5dde17c</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg">User::bDFT_DSGTools_QUERY_CTE_SQL_RAW,User::iDFT_DSGTools_QUERY_CTE_SQL_RAW,User::lstDSGTOOLS_QUERY_CTE_SQL_OUTPUT</property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="1">
                        <arrayElement
                          dataType="System.String">&lt;SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
&lt;SOAP-ENV:Body&gt;
&lt;a1:ScriptBreakpointInfo id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/Microsoft.SqlServer.VSTAHosting/Microsoft.SqlServer.VSTAScriptingLib%2C%20Version%3D12.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D89845dcd8080cc91"&gt;
&lt;Enabled&gt;true&lt;/Enabled&gt;
&lt;File id="ref-3"&gt;ColumnImpact.cs&lt;/File&gt;
&lt;FileLine&gt;2560&lt;/FileLine&gt;
&lt;FileColumn&gt;17&lt;/FileColumn&gt;
&lt;/a1:ScriptBreakpointInfo&gt;
&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">2b99df736c8251414232aa785b242fe8</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">266819cdea5a8371d0abd3970c88445367ddda35</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Connections[Connection]"
                      connectionManagerID="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      connectionManagerRefId="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      name="Connection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <inputColumns>
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Inputs[Input 0].Columns[QSR_ID]"
                          cachedDataType="i4"
                          cachedName="QSR_ID"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QSR_ID]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Inputs[Input 0].Columns[QSR_SQL]"
                          cachedDataType="nText"
                          cachedName="QSR_SQL"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QSR_SQL]"
                          usageType="readWrite" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0]"
                      hasSideEffects="true"
                      name="Output 0">
                      <outputColumns>
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[CTEName]"
                          dataType="wstr"
                          length="128"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[CTEName]"
                          name="CTEName" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQL]"
                          dataType="nText"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQL]"
                          name="RAWCTESQL" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQLHASH]"
                          dataType="wstr"
                          length="128"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQLHASH]"
                          name="RAWCTESQLHASH" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQLUPPER]"
                          dataType="nText"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQLUPPER]"
                          name="RAWCTESQLUPPER" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQLHASHUPPER]"
                          dataType="wstr"
                          length="128"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[RAWCTESQLHASHUPPER]"
                          name="RAWCTESQLHASHUPPER" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[QCSR_QSR_ID]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0].Columns[QCSR_QSR_ID]"
                          name="QCSR_QSR_ID" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw"
                  componentClassID="Microsoft.OLEDBSource"
                  contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                  description="OLE DB Source"
                  name="SRC_OLEDB_SQLRaw"
                  usesDispositions="true"
                  version="7">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset"></property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">Select QSR_ID, QSR_SQL from DSGTOOLS.QUERY_SQL_RAW where cast(QSR_MODIFIED_DT as date) &gt; (select max(QCSR_MODIFIED_DT) from DSGTOOLS.QUERY_CTE_SQL_RAW)</property>
                    <property
                      dataType="System.String"
                      description="The variable that contains the SQL command to be executed."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">2</property>
                    <property
                      dataType="System.String"
                      description="The mappings between the parameters in the SQL command and variables."
                      name="ParameterMapping">"Parameter0:Input",{B08D9D80-EB7B-4600-A525-C19F7AA077DF};</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      connectionManagerRefId="Package.ConnectionManagers[CONN_OLEDB_DVDDB01]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output]"
                      name="OLE DB Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QSR_ID]"
                          dataType="i4"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].ExternalColumns[QSR_ID]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QSR_ID]"
                          name="QSR_ID"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QSR_SQL]"
                          dataType="nText"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].ExternalColumns[QSR_SQL]"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].Columns[QSR_SQL]"
                          name="QSR_SQL"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].ExternalColumns[QSR_ID]"
                          dataType="i4"
                          name="QSR_ID" />
                        <externalMetadataColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output].ExternalColumns[QSR_SQL]"
                          dataType="nText"
                          name="QSR_SQL" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output]"
                      isErrorOut="true"
                      name="OLE DB Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[QSR_ID]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[QSR_ID]"
                          name="QSR_ID" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[QSR_SQL]"
                          dataType="nText"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[QSR_SQL]"
                          name="QSR_SQL" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW.Paths[OLE DB Source Output]"
                  endId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Inputs[Input 0]"
                  name="OLE DB Source Output"
                  startId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw.Outputs[OLE DB Source Output]" />
                <path
                  refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW.Paths[Output 0]"
                  endId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW.Inputs[OLE DB Destination Input]"
                  name="Output 0"
                  startId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns.Outputs[Output 0]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\EST_LOAD_QUERY_CTE_SQL_RAW"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{A87F91DC-9FAF-4B74-85C5-700DA9E7FD81}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="EST_LOAD_QUERY_CTE_SQL_RAW"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{3B45F8B9-DB8E-4026-A831-03E4C0EBD40D}"
              SQLTask:SqlStatementSource="call dsgtools.query_cte_sql_raw_update()" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\EST_Trunacte_DSGTools_QUERY_CTE_SQL_RAW"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:Disabled="True"
          DTS:DTSID="{353ABFF7-54CB-4865-B427-568C6A92DF48}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="EST_Trunacte_DSGTools_QUERY_CTE_SQL_RAW"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0"
            DTS:LoggingMode="2" />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{3B45F8B9-DB8E-4026-A831-03E4C0EBD40D}"
              SQLTask:SqlStatementSource="TRUNCATE TABLE DSGTOOLS.QUERY_CTE_SQL_RAW IMMEDIATE" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\EST_TRUNCATE_QUERY_STAGING_CTE_SQL_RAW"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{ECC255C0-DAAB-4AC2-BC44-080ACDD6E703}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="EST_TRUNCATE_QUERY_STAGING_CTE_SQL_RAW"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{3B45F8B9-DB8E-4026-A831-03E4C0EBD40D}"
              SQLTask:SqlStatementSource="Truncate dsgtools.query_staging_cte_sql_raw IMMEDIATE" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{40BB1EF3-49B4-4B6B-BB0A-EE064A3CA7A1}"
          DTS:From="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\EST_TRUNCATE_QUERY_STAGING_CTE_SQL_RAW"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{792C879F-8058-4602-9740-903F0B5FB0E5}"
          DTS:From="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\EST_LOAD_QUERY_CTE_SQL_RAW" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{0C7A8CCD-C67B-44B5-B897-DA91E632D4D3}"
      DTS:From="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{B2ED66B4-F94D-4FE9-821C-9EEE4A04E6A5}"
      DTS:From="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\EST_QUERY_FACT_SQL_RAW_CTE_UPDATE" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{A1A90D4B-E311-4B9D-ABD6-8800770F2925}"
      DTS:EventID="464"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{9B25E415-27A5-47D9-B4D8-78FC719FB7AD}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\EST_OnError"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{db8837b1-8036-4c43-a5af-b42b582bb15b}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="EST_OnError">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{3B45F8B9-DB8E-4026-A831-03E4C0EBD40D}"
              SQLTask:SqlStatementSource="insert into DSGTOOLS.SSIS_PKGERRROR (SPE_PKG_ID, SPE_PACKAGE_NAME, SPE_TASK_NAME, SPE_SOURCE_NAME, SPE_ERROR_CODE, SPE_ERROR_DESCRIPTION)values (?,?,?,?,?,?)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::PackageID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="System::TaskName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="System::SourceName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="4"
                SQLTask:DtsVariableName="System::ErrorCode"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="21"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="5"
                SQLTask:DtsVariableName="System::ErrorDescription"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="288,41.6"
          Id="Package\EST_QUERY_FACT_SQL_RAW_CTE_UPDATE"
          TopLeft="472.387761818424,429.546224511617" />
        <NodeLayout
          Size="340,41.6"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT"
          TopLeft="24.9428642297279,142.647064145131" />
        <NodeLayout
          Size="262.4,41.6"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\EST_LOAD_QUERY_CTE_SQL_OUTPUT"
          TopLeft="49.0571448642381,214.835299211885" />
        <NodeLayout
          Size="329.6,41.6"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\EST_Trunacte_DSGTools_QUERY_CTE_SQL_OUTPUT"
          TopLeft="5.5,5.50000000000007" />
        <NodeLayout
          Size="337.6,41.6"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\EST_TRUNCATE_QUERY_STAGING_CTE_SQL_OUTPUT"
          TopLeft="17.6285729004413,71.5411806210515" />
        <EdgeLayout
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT.PrecedenceConstraints[Constraint]"
          TopLeft="186.428572900441,113.141180621051">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="8.51429132928661,29.5058835240795"
              Start="0,0"
              End="8.51429132928661,22.0058835240795">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,10.7529417620397" />
                  <mssgle:CubicBezierSegment
                    Point1="0,10.7529417620397"
                    Point2="0,14.7529417620397"
                    Point3="4,14.7529417620397" />
                  <mssgle:LineSegment
                    End="4.51429132928661,14.7529417620397" />
                  <mssgle:CubicBezierSegment
                    Point1="4.51429132928661,14.7529417620397"
                    Point2="8.51429132928661,14.7529417620397"
                    Point3="8.51429132928661,18.7529417620397" />
                  <mssgle:LineSegment
                    End="8.51429132928661,22.0058835240795" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT.PrecedenceConstraints[Constraint 1]"
          TopLeft="194.942864229728,184.247064145131">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-14.6857193654899,30.5882350667542"
              Start="0,0"
              End="-14.6857193654899,23.0882350667542">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,11.2941175333771" />
                  <mssgle:CubicBezierSegment
                    Point1="0,11.2941175333771"
                    Point2="0,15.2941175333771"
                    Point3="-4,15.2941175333771" />
                  <mssgle:LineSegment
                    End="-10.6857193654899,15.2941175333771" />
                  <mssgle:CubicBezierSegment
                    Point1="-10.6857193654899,15.2941175333771"
                    Point2="-14.6857193654899,15.2941175333771"
                    Point3="-14.6857193654899,19.2941175333771" />
                  <mssgle:LineSegment
                    End="-14.6857193654899,23.0882350667542" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="383.2,320.8"
          Size="383.2,364"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT"
          TopLeft="431.371885413331,33.5071894140258" />
        <NodeLayout
          Size="321.6,41.6"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW"
          TopLeft="16.9571426503513,135.394118043873" />
        <NodeLayout
          Size="246.4,41.6"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\EST_LOAD_QUERY_CTE_SQL_RAW"
          TopLeft="40.6000022990364,223.317652614224" />
        <NodeLayout
          Size="312,41.6"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\EST_Trunacte_DSGTools_QUERY_CTE_SQL_RAW"
          TopLeft="5.5,5.50000000000007" />
        <NodeLayout
          Size="320.8,41.6"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\EST_TRUNCATE_QUERY_STAGING_CTE_SQL_RAW"
          TopLeft="14.1714304203891,62.2000032817618" />
        <EdgeLayout
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW.PrecedenceConstraints[Constraint]"
          TopLeft="176.36428653537,103.800003281762">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,31.5941147621114"
              Start="0,0"
              End="0,24.0941147621114">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.0941147621114" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW.PrecedenceConstraints[Constraint 1]"
          TopLeft="178.157142650351,176.994118043873">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-14.7571403513149,46.323534570351"
              Start="0,0"
              End="-14.7571403513149,38.823534570351">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.1617672851755" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19.1617672851755"
                    Point2="0,23.1617672851755"
                    Point3="-4,23.1617672851755" />
                  <mssgle:LineSegment
                    End="-10.7571403513149,23.1617672851755" />
                  <mssgle:CubicBezierSegment
                    Point1="-10.7571403513149,23.1617672851755"
                    Point2="-14.7571403513149,23.1617672851755"
                    Point3="-14.7571403513149,27.1617672851755" />
                  <mssgle:LineSegment
                    End="-14.7571403513149,38.823534570351" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="388.8,320"
          Size="388.8,363.2"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW"
          TopLeft="0.126976789259942,33.3071889764568" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="388.92697678926,215.207189195241">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="42.4449086240711,0"
              Start="0,0"
              End="34.9449086240711,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="34.9449086240711,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="619.679823615877,397.507189414026">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,32.0390350975912"
              Start="0,0"
              End="0,24.5390350975912">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.5390350975912" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="Added to Github on 04/19/2020"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="199.2,60"
          Id="4d112364-29b9-4cf5-b049-910f6751eaa6"
          TopLeft="175.714288706682,443.058829588874" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="Package.EventHandlers[OnError]\EST_OnError"
          TopLeft="NaN,NaN" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <TaskHost
    design-time-name="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="235.2,56.8"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw"
          TopLeft="121.6,41.6" />
        <NodeLayout
          Size="172,41.6"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SC_GetCTEColumns"
          TopLeft="124,165.6" />
        <NodeLayout
          Size="369.6,41.6"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT"
          TopLeft="40.8,291.2" />
        <EdgeLayout
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT.Paths[OLE DB Source Output]"
          TopLeft="239.2,98.4">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-29.2,67.2"
              Start="0,0"
              End="-29.2,59.7">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.6" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.6"
                    Point2="0,33.6"
                    Point3="-4,33.6" />
                  <mssgle:LineSegment
                    End="-25.2,33.6" />
                  <mssgle:CubicBezierSegment
                    Point1="-25.2,33.6"
                    Point2="-29.2,33.6"
                    Point3="-29.2,37.6" />
                  <mssgle:LineSegment
                    End="-29.2,59.7" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT.Paths[Output 1]"
          TopLeft="210,207.2">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="16,84"
              Start="0,0"
              End="16,76.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38" />
                  <mssgle:CubicBezierSegment
                    Point1="0,38"
                    Point2="0,42"
                    Point3="4,42" />
                  <mssgle:LineSegment
                    End="12,42" />
                  <mssgle:CubicBezierSegment
                    Point1="12,42"
                    Point2="16,42"
                    Point3="16,46" />
                  <mssgle:LineSegment
                    End="16,76.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\SRC_OLEDB_SQLRaw">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\SQC_DSGTools_QUERY_CTE_SQL_OUTPUT\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_OUTPUT\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_OUTPUT">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="180,42"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw"
          TopLeft="77.7142870377522,9.78823543139395" />
        <NodeLayout
          Size="184,42"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SC_GetTablesColumns"
          TopLeft="84.857145358105,162.717649915887" />
        <NodeLayout
          Size="354,42"
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW"
          TopLeft="23.0879137033197,306.394576493356" />
        <EdgeLayout
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW.Paths[Output 0]"
          TopLeft="176.857145358105,204.317649915887">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="23.0307683452147,102.076926577469"
              Start="0,0"
              End="23.0307683452147,94.576926577469">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,47.0384632887345" />
                  <mssgle:CubicBezierSegment
                    Point1="0,47.0384632887345"
                    Point2="0,51.0384632887345"
                    Point3="4,51.0384632887345" />
                  <mssgle:LineSegment
                    End="19.0307683452147,51.0384632887345" />
                  <mssgle:CubicBezierSegment
                    Point1="19.0307683452147,51.0384632887345"
                    Point2="23.0307683452147,51.0384632887345"
                    Point3="23.0307683452147,55.0384632887345" />
                  <mssgle:LineSegment
                    End="23.0307683452147,94.576926577469" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW.Paths[OLE DB Source Output]"
          TopLeft="167.714287037752,51.788235431394">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="9.14285832035279,110.929414484493"
              Start="0,0"
              End="9.14285832035279,103.429414484493">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,51.4647072422465" />
                  <mssgle:CubicBezierSegment
                    Point1="0,51.4647072422465"
                    Point2="0,55.4647072422465"
                    Point3="4,55.4647072422465" />
                  <mssgle:LineSegment
                    End="5.14285832035279,55.4647072422465" />
                  <mssgle:CubicBezierSegment
                    Point1="5.14285832035279,55.4647072422465"
                    Point2="9.14285832035279,55.4647072422465"
                    Point3="9.14285832035279,59.4647072422465" />
                  <mssgle:LineSegment
                    End="9.14285832035279,103.429414484493" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\SRC_OLEDB_SQLRaw">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\SQC_DSGTools_QUERY_CTE_SQL_RAW\DFT_DSGTOOLS_QUERY_STAGING_CTE_SQL_RAW\DST_OLEDB_DSGTools_QUERY_STAGING_CTE_SQL_RAW">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>